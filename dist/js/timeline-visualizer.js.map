{"version":3,"sources":["node_modules/browser-pack/_prelude.js","dist/index.js","dist/lib/timelineVisualizer.js","node_modules/browserify/lib/_empty.js","node_modules/events/events.js","node_modules/lodash.isequal/index.js","node_modules/superfly-timeline/dist/api/expression.js","node_modules/superfly-timeline/dist/api/index.js","node_modules/superfly-timeline/dist/api/resolvedTimeline.js","node_modules/superfly-timeline/dist/api/resolver.js","node_modules/superfly-timeline/dist/api/state.js","node_modules/superfly-timeline/dist/api/timeline.js","node_modules/superfly-timeline/dist/api/types.js","node_modules/superfly-timeline/dist/index.js","node_modules/superfly-timeline/dist/resolver/CacheHandler.js","node_modules/superfly-timeline/dist/resolver/ExpressionHandler.js","node_modules/superfly-timeline/dist/resolver/InstanceHandler.js","node_modules/superfly-timeline/dist/resolver/LayerStateHandler.js","node_modules/superfly-timeline/dist/resolver/ReferenceHandler.js","node_modules/superfly-timeline/dist/resolver/ResolvedTimelineHandler.js","node_modules/superfly-timeline/dist/resolver/ResolverHandler.js","node_modules/superfly-timeline/dist/resolver/StateHandler.js","node_modules/superfly-timeline/dist/resolver/TimelineValidator.js","node_modules/superfly-timeline/dist/resolver/lib/cache.js","node_modules/superfly-timeline/dist/resolver/lib/cap.js","node_modules/superfly-timeline/dist/resolver/lib/event.js","node_modules/superfly-timeline/dist/resolver/lib/expression.js","node_modules/superfly-timeline/dist/resolver/lib/instance.js","node_modules/superfly-timeline/dist/resolver/lib/lib.js","node_modules/superfly-timeline/dist/resolver/lib/performance.js","node_modules/superfly-timeline/dist/resolver/lib/reference.js","node_modules/superfly-timeline/dist/resolver/lib/timeline.js","node_modules/superfly-timeline/node_modules/tslib/tslib.js","node_modules/tslib/tslib.js"],"names":[],"mappingsphgxztlrfnlxNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjljrafile":"timeline-visualizer.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst tslib_1 = require(\"tslib\");\ntslib_1.__exportStar(require(\"./lib/timelineVisualizer\"), exports);\n//# sourceMappingURL=index.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.TimelineVisualizer = void 0;\nconst isEqual = require(\"lodash.isequal\");\nconst superfly_timeline_1 = require(\"superfly-timeline\");\nconst events_1 = require(\"events\");\n/** Step size/ time step. */\nconst DEFAULT_STEP_SIZE = 1;\n/** Width of label column. */\nconst LABEL_WIDTH_OF_TIMELINE = 0.25;\n/** Default zoom */\nconst DEFAULT_ZOOM_VALUE = 100;\n/** Factor to zoom by */\nconst ZOOM_FACTOR = 1.001;\n/** Factor to pan by (pan = PAN_FACTOR * STEP_SIZE) */\nconst PAN_FACTOR = 10;\n/** Maximum layer height */\nconst MAX_LAYER_HEIGHT = 60;\n/** Amount to move playhead per second. */\nconst DEFAULT_PLAYHEAD_SPEED = 1;\n/** BEGIN STYLING VALUES */\n/** Timeline background color. */\nconst COLOR_BACKGROUND = '#333333';\n/** Layer label background color. */\nconst COLOR_LABEL_BACKGROUND = '#666666';\n/** Color of the ruler lines */\nconst RULER_LINE_COLOR = '#999999';\n/** Width of the ruler lines */\nconst RULER_LINE_WIDTH = 1;\n/** Playhead color. */\nconst COLOR_PLAYHEAD = 'rgba(255, 0, 0, 0.5)';\n/** Playhead thickness. */\nconst THICKNESS_PLAYHEAD = 5;\n/** Color of line separating timeline rows. */\nconst COLOR_LINE = 'black';\n/** Height of line separating rows. */\nconst THICKNESS_LINE = 1;\n/** Text properties. */\nconst TEXT_FONT_FAMILY = 'Calibri';\nconst TEXT_FONT_SIZE = 16;\nconst TEXT_COLOR = 'white';\n/** Timeline object properties. */\nconst COLOR_TIMELINE_OBJECT_FILL = 'rgb(22, 102, 247, 0.75)';\nconst COLOR_TIMELINE_OBJECT_BORDER = 'rgba(232, 240, 255, 0.85)';\nconst THICKNESS_TIMELINE_OBJECT_BORDER = 1;\n/** Timeline object height as a proportion of the row height. */\nconst TIMELINE_OBJECT_HEIGHT = 1;\n/** END STYLING VALUES */\n/** BEGIN CONSTANTS FOR STATE MANAGEMENT */\nconst MOUSEIN = 0;\nconst MOUSEOUT = 1;\nclass TimelineVisualizer extends events_1.EventEmitter {\n    /**\n     * @param {string} canvasId The ID of the canvas object to draw within.\n     */\n    constructor(canvasId, options = {}) {\n        super();\n        // Step size.\n        this.stepSize = DEFAULT_STEP_SIZE;\n        /** @private @readonly Proportion of the canvas to be used for the layer labels column. */\n        this._layerLabelWidthProportionOfCanvas = LABEL_WIDTH_OF_TIMELINE;\n        /** Layers on timeline. */\n        this._layerLabels = {};\n        /** State of the timeline. */\n        this._timelineState = {};\n        /** Map of objects for determining hovered object */\n        this._hoveredObjectMap = {};\n        /** Start time of the current view. Defines the objects within view on the timeline [time] */\n        this._viewStartTime = 0;\n        /** Range of the current view [time] */\n        // private _viewTimeRange: number = 1\n        // private _drawTimeEnd: number\n        /** Store whether the mouse is held down, for scrolling. */\n        this._mouseDown = false;\n        /** Current zoom amount. */\n        this._timelineZoom = DEFAULT_ZOOM_VALUE;\n        /** Whether or not the playhead should move. */\n        this._playHeadPlaying = false;\n        /** Speed of the playhead [units / second] */\n        this._playSpeed = DEFAULT_PLAYHEAD_SPEED;\n        /** The current time position of the playhead. */\n        this._playHeadTime = 0;\n        /** The last time updateDraw() did a draw. */\n        this._updateDrawLastTime = 0;\n        /** Whether the mouse last moved over an object or out. */\n        this._lastHoverAction = MOUSEOUT;\n        /** Name of object that was last hovered over. */\n        this._lastHoveredHash = '';\n        /** If the visualizer automatically should re-resolve the timeline when navigating the viewport */\n        this._timelineResolveAuto = false;\n        /** At what time the timeline was resolved [time] */\n        this._timelineResolveStart = 0;\n        this._timelineResolveEnd = 0;\n        this._timelineResolveZoom = 1;\n        this._timelineResolveCount = 100;\n        this._timelineResolveCountAdjust = 1;\n        /** How much extra (outside the current viewport) the timeline should be resolved to [ratio] */\n        this._timelineResolveExpand = 3;\n        this.latestUpdateTime = 0;\n        this.reresolveTimeout = null;\n        this._mergeIterator = 0;\n        // Initialise other values.\n        this._canvasId = canvasId;\n        this.initCanvas();\n        this._drawPlayhead = !!options.drawPlayhead;\n        // Calculate width of label column.\n        this._layerLabelWidth = this._canvasWidth * this._layerLabelWidthProportionOfCanvas;\n        // Calculate timeline width and start point.\n        this._viewDrawX = this._layerLabelWidth;\n        this._viewDrawWidth = this._canvasWidth - this._layerLabelWidth;\n        // Draw background.\n        this.drawBackground();\n        // Draw playhead.\n        this.drawPlayhead();\n        this.updateDraw();\n    }\n    /**\n     * Initialises the canvas and registers canvas events.\n     */\n    initCanvas() {\n        // Create new canvas object.\n        this._canvasContainer = document.getElementById(this._canvasId);\n        if (!this._canvasContainer)\n            throw new Error(`Canvas \"${this._canvasId}\" not found`);\n        // Get rendering context.\n        this._canvas = this._canvasContainer.getContext('2d');\n        // Register canvas interaction event handlers.\n        this._canvasContainer.addEventListener('mousedown', (event) => this.canvasMouseDown(event));\n        this._canvasContainer.addEventListener('mouseup', (event) => this.canvasMouseUp(event));\n        this._canvasContainer.addEventListener('mousemove', (event) => this.canvasMouseMove(event));\n        this._canvasContainer.addEventListener('wheel', (event) => this.canvasScrollWheel(event));\n        // Get width and height of canvas.\n        this._canvasWidth = this._canvasContainer.width;\n        this._canvasHeight = this._canvasContainer.height;\n    }\n    /**\n     * Updates the timeline, should be called when actions are added/removed from a timeline\n     * but the same timeline is being drawn.\n     * @param {TimelineObject[]} timeline Timeline to draw.\n     * @param {ResolveOptions} options Resolve options.\n     */\n    updateTimeline(timeline, options) {\n        // If options have not been specified set time to 0.\n        if (options === undefined) {\n            options = {\n                time: 0,\n                limitCount: 10\n            };\n        }\n        this.latestTimeline = timeline;\n        this.latestOptions = options;\n        if (!options.limitTime) {\n            this._timelineResolveAuto = true;\n        }\n        else {\n            this._timelineResolveAuto = false;\n        }\n        const options2 = Object.assign({}, options);\n        if (this._timelineResolveAuto) {\n            this.updateTimelineResolveWindow();\n        }\n        if (this._resolvedTimeline === undefined) { // If first time this runs\n            // Set timeline start and end times.\n            if (options2.time !== undefined) {\n                this._viewStartTime = options2.time;\n            }\n            // Move playhead to start time.\n            this._playHeadTime = this._viewStartTime;\n        }\n        this._updateTimeline(true);\n    }\n    _updateTimeline(fromNewTimeline = false) {\n        const options2 = Object.assign({}, this.latestOptions);\n        if (this._timelineResolveAuto) {\n            options2.time = this._timelineResolveStart;\n            options2.limitTime = this._timelineResolveEnd;\n            options2.limitCount = Math.ceil(this._timelineResolveCount * this._timelineResolveCountAdjust);\n        }\n        // If the playhead is being drawn, the resolve time should be at the playhead time.\n        if (this._drawPlayhead && this._playHeadTime > options2.time) {\n            options2.time = this._playHeadTime;\n        }\n        // Resolve the timeline.\n        const startResolve = Date.now();\n        const resolvedTimeline = (0, superfly_timeline_1.resolveTimeline)(this.latestTimeline, options2);\n        if (this._resolvedTimeline === undefined) { // If first time this runs\n            this._resolvedTimeline = resolvedTimeline;\n        }\n        else {\n            if (this._drawPlayhead) {\n                // Trim the current timeline:\n                if (resolvedTimeline) {\n                    // Merge the timelines.\n                    this._resolvedTimeline = this.mergeTimelineObjects(this._resolvedTimeline, resolvedTimeline, fromNewTimeline);\n                }\n            }\n            else {\n                // Otherwise we only see one timeline at a time.\n                // Overwrite the previous timeline:\n                this._resolvedTimeline = resolvedTimeline;\n            }\n        }\n        // Update layers.\n        this.updateLayerLabels();\n        this.latestUpdateTime = Date.now() - startResolve;\n        // Redraw the timeline.\n        this.redrawTimeline();\n        this.latestUpdateTime = Date.now() - startResolve;\n    }\n    /**\n     * Sets the viewport to a position, zoom, and playback speed.\n     * Playback speed currently not implemented.\n     * @param viewPort Object to update viewport with.\n     */\n    setViewPort(viewPort) {\n        // Whether the viewport has changed.\n        let changed = false;\n        // If zoom has been specified.\n        if (viewPort.zoom !== undefined) {\n            // Zoom to specified zoom.\n            this._timelineZoom = viewPort.zoom;\n            changed = true;\n        }\n        // If timestamp has been specified.\n        if (viewPort.timestamp !== undefined) {\n            // Set start time to specified time.\n            if (viewPort.timestamp > 0) {\n                this._viewStartTime = viewPort.timestamp;\n                changed = true;\n            }\n        }\n        if (viewPort.playViewPort !== undefined) {\n            this._playViewPort = viewPort.playViewPort;\n        }\n        // If the playback speed has been set, set the new playback speed.\n        if (viewPort.playSpeed !== undefined) {\n            if (!this._drawPlayhead)\n                throw new Error('setViewPort: viewPort.playSpeed was set, but drawPlayhead was not set in constructor');\n            this._playSpeed = viewPort.playSpeed;\n        }\n        // Set playhead playing/ not playing.\n        if (viewPort.playPlayhead !== undefined) {\n            if (!this._drawPlayhead)\n                throw new Error('setViewPort: viewPort.playPlayhead was set, but drawPlayhead was not set in constructor');\n            this._playHeadPlaying = viewPort.playPlayhead;\n        }\n        if (viewPort.playheadTime !== undefined) {\n            if (!this._drawPlayhead)\n                throw new Error('setViewPort: viewPort.playheadTime was set, but drawPlayhead was not set in constructor');\n            this._playHeadTime = Math.max(0, viewPort.playheadTime);\n            if (this._playHeadTime > 0)\n                this._updateDrawLastTime = this._playHeadTime;\n            changed = true;\n        }\n        // Redraw timeline if anything has changed.\n        if (changed === true) {\n            this.redrawTimeline();\n        }\n    }\n    /**\n     * Accessor for polling the currently hovered over object.\n     */\n    getHoveredObject() {\n        return this._hoveredOver;\n    }\n    /**\n     * Calculates the height to give to each row to fit all layers on screen.\n     * @param {String[]} layers Map of layers to use.\n     * @returns Height of rows.\n     */\n    calculateRowHeight(layers) {\n        return Math.min(MAX_LAYER_HEIGHT, this._canvasHeight / Object.keys(layers).length);\n    }\n    updateLayerLabels() {\n        // Store layers to draw.\n        const o = this.getLayersToDraw();\n        if (!isEqual(this._layerLabels, o.layers)) {\n            this._layerLabels = o.layers;\n            // Calculate row height.\n            this._rowHeight = this.calculateRowHeight(this._layerLabels);\n            // Set timeline object height.\n            this._timelineObjectHeight = this._rowHeight * TIMELINE_OBJECT_HEIGHT;\n            this._numberOfLayers = Object.keys(this._layerLabels).length;\n            this._rowsTotalHeight = this._rowHeight * this._numberOfLayers;\n        }\n    }\n    getLayers() {\n        const layers = Object.entries(this._layerLabels);\n        layers.sort((a, b) => a[1] - b[1]);\n        return layers.map(l => l[0]);\n    }\n    /**\n     * Draws the layer labels to the canvas.\n     */\n    drawLayerLabels() {\n        let row = 0;\n        // Iterate through layers.\n        for (let layerName of this.getLayers()) {\n            this._canvas.fillStyle = COLOR_LABEL_BACKGROUND;\n            this._canvas.fillRect(0, row * this._rowHeight, this._layerLabelWidth, this._rowHeight);\n            this._canvas.fillStyle = TEXT_COLOR;\n            this._canvas.font = TEXT_FONT_SIZE.toString() + 'px ' + TEXT_FONT_FAMILY;\n            this._canvas.textBaseline = 'middle';\n            this._canvas.fillText(layerName, 0, (row * this._rowHeight) + (this._rowHeight / 2), this._layerLabelWidth);\n            if (this._layerLabels[layerName] !== 0) {\n                this._canvas.fillStyle = COLOR_LINE;\n                this._canvas.fillRect(this._layerLabelWidth, row * this._rowHeight, this._viewDrawWidth, THICKNESS_LINE);\n            }\n            row++;\n        }\n    }\n    /**\n     * Draws the timeline background.\n     */\n    drawBackground() {\n        this._canvas.fillStyle = COLOR_BACKGROUND;\n        this._canvas.fillRect(0, 0, this._canvasWidth, this._canvasHeight);\n        this.drawBackgroundRuler();\n    }\n    /**\n     * Draw a ruler on top of background\n     */\n    drawBackgroundRuler() {\n        const range = this.viewRange;\n        const endTime = this.viewEndTime;\n        const circaNumberOfLines = 5;\n        const rounder = Math.pow(10, Math.floor(Math.log10(range / circaNumberOfLines))); // What to round the ruler to\n        const rounderNext = rounder * 10;\n        const numberOfLines = Math.floor(range / rounder);\n        const rulerDiff = rounder;\n        const startTime = Math.floor(this._viewStartTime / rounder) * rounder;\n        const opacity = (Math.min(1, circaNumberOfLines / numberOfLines));\n        if (rulerDiff) {\n            this._canvas.strokeStyle = RULER_LINE_COLOR;\n            this._canvas.lineWidth = RULER_LINE_WIDTH;\n            for (let rulerTime = startTime; rulerTime < endTime; rulerTime += rulerDiff) {\n                this._canvas.beginPath();\n                let x = this.timeToXCoord(rulerTime);\n                let distanceToNext = (rulerTime / rounderNext) % 1;\n                if (distanceToNext > 0.5)\n                    distanceToNext -= 1;\n                distanceToNext = Math.abs(distanceToNext);\n                if (distanceToNext < 0.01) {\n                    // Is a significant line\n                    this._canvas.globalAlpha = 1;\n                }\n                else {\n                    this._canvas.globalAlpha = opacity;\n                }\n                if (x >= this._viewDrawX) {\n                    this._canvas.moveTo(x, 0);\n                    this._canvas.lineTo(x, this._canvasHeight);\n                }\n                this._canvas.stroke();\n            }\n            this._canvas.globalAlpha = 1;\n        }\n    }\n    /**\n     * Draws the playhead initially.\n     */\n    drawPlayhead() {\n        // If the playhead should be draw.\n        if (this._drawPlayhead) {\n            if (this.istimeInView(this._playHeadTime)) {\n                this._canvas.fillStyle = COLOR_PLAYHEAD;\n                this._canvas.fillRect(this.timeToXCoord(this._playHeadTime), 0, THICKNESS_PLAYHEAD, this._canvasHeight);\n            }\n        }\n    }\n    /**\n     * Gets the layers to draw from the timeline.\n     */\n    getLayersToDraw() {\n        this._hoveredObjectMap = {};\n        const layersArray = this._resolvedTimeline ? Object.keys(this._resolvedTimeline.layers) : [];\n        layersArray.sort((a, b) => a.localeCompare(b));\n        const layers = {};\n        layersArray.forEach((layerName, index) => {\n            layers[layerName] = index;\n            this._hoveredObjectMap[layerName] = [];\n        });\n        return {\n            layers: layers,\n            layersArray: layersArray\n        };\n    }\n    /**\n     * Redraws the timeline to the canvas.\n     */\n    redrawTimeline() {\n        this._canvas.clearRect(0, 0, this._canvasWidth, this._canvasHeight);\n        this.drawBackground();\n        this.drawLayerLabels();\n        // Recompute objects positions\n        this._timelineState = this.getTimelineDrawState(this._resolvedTimeline);\n        // Draw the current state.\n        this.drawTimelineState(this._timelineState);\n        this.drawPlayhead();\n        this.checkAutomaticReresolve();\n    }\n    /**\n     * Draws a timeline state to the canvas.\n     * @param {TimelineDrawState} currentDrawState State to draw.\n     */\n    drawTimelineState(currentDrawState) {\n        for (let element in currentDrawState) {\n            const drawState = currentDrawState[element];\n            if (drawState.visible) {\n                this._canvas.fillStyle = COLOR_TIMELINE_OBJECT_FILL;\n                this._canvas.fillRect(drawState.left, drawState.top, drawState.width, drawState.height);\n                this._canvas.strokeStyle = COLOR_TIMELINE_OBJECT_BORDER;\n                this._canvas.lineWidth = THICKNESS_TIMELINE_OBJECT_BORDER;\n                this._canvas.strokeRect(drawState.left, drawState.top, drawState.width, drawState.height);\n                this._canvas.fillStyle = TEXT_COLOR;\n                this._canvas.font = TEXT_FONT_SIZE.toString() + 'px ' + TEXT_FONT_FAMILY;\n                this._canvas.textBaseline = 'top';\n                this._canvas.fillText(drawState.title, drawState.left, drawState.top);\n            }\n        }\n    }\n    /**\n     * Returns the draw states for all timeline objects.\n     * @param {ResolvedTimeline} timeline Timeline to draw.\n     * @returns {TimelineDrawState} State of time-based objects.\n     */\n    getTimelineDrawState(timeline) {\n        let currentDrawState = {};\n        if (timeline) {\n            for (let objId in timeline.objects) {\n                let timelineObj = timeline.objects[objId];\n                for (let _i = 0; _i < timelineObj.resolved.instances.length; _i++) {\n                    let instanceObj = timelineObj.resolved.instances[_i];\n                    let name = 'timelineObject:' + objId + ':' + instanceObj.id;\n                    currentDrawState[name] = this.createStateForObject(timelineObj, instanceObj.start, instanceObj.end);\n                    if (currentDrawState[name].visible === true) {\n                        if (!this._hoveredObjectMap[timelineObj.layer + ''])\n                            this._hoveredObjectMap[timelineObj.layer + ''] = [];\n                        this._hoveredObjectMap[timelineObj.layer + ''].push({\n                            startX: currentDrawState[name].left,\n                            endX: currentDrawState[name].left + currentDrawState[name].width,\n                            objectRefId: objId,\n                            instanceId: instanceObj.id,\n                            type: 'timelineObject',\n                            name: name\n                        });\n                    }\n                }\n            }\n        }\n        return currentDrawState;\n    }\n    /**\n     * Creates a draw state for a timeline object.\n     * @param {string} layer Object's layer.\n     * @param {number} start Start time.\n     * @param {number} end End time.\n     * @returns {DrawState} State of the object to draw.\n     */\n    createStateForObject(obj, start, end) {\n        // Default state (hidden).\n        let state = {\n            height: 0,\n            left: 0,\n            top: 0,\n            width: 0,\n            visible: false,\n            title: 'N/A'\n        };\n        // State should be default if the object is not being shown.\n        if (this.showOnTimeline(start, end)) {\n            // Get object dimensions and position.\n            let objectWidth = this.getObjectWidth(start, end);\n            let xCoord = this.capXcoordToView(this.timeToXCoord(start));\n            let objectTop = this.getObjectOffsetFromTop(obj.layer + '');\n            // Set state properties.\n            state.height = this._timelineObjectHeight;\n            state.left = xCoord;\n            state.top = objectTop;\n            state.width = objectWidth;\n            state.visible = true;\n            state.title = obj.id;\n        }\n        return state;\n    }\n    /**\n     * Calculates the offset, in pixels from the start of the timeline for an object.\n     * @param {number} start start time of the object.\n     * @returns {number} Offset in pixels.\n     */\n    // private getObjectOffsetFromTimelineStart (start: number): number {\n    // \t// Calculate offset.\n    // \tlet offset = (start - this._viewStartTime) * this.pixelsWidthPerUnitTime\n    // \t// Offset cannot be to the left of the timeline start position.\n    // \tif (offset < 0) {\n    // \t\toffset = 0\n    // \t}\n    // \treturn offset\n    // }\n    /**\n     * Calculates the width, in pixels, of an object based on its duration.\n     * @param {number} start Start time of the object.\n     * @param {number} end End time of the object.\n     * @returns {number} Width in pixels.\n     */\n    getObjectWidth(startTime, endTime) {\n        if (!endTime)\n            return this._canvasWidth;\n        // If the start time is less than the timeline start, set to timeline start.\n        if (startTime < this._viewStartTime) {\n            startTime = this._viewStartTime;\n        }\n        // Calculate duration of the object remaining on the timeline.\n        let duration = endTime - startTime;\n        // Return end point position in pixels.\n        return duration * this.pixelsWidthPerUnitTime;\n    }\n    /**\n     * Determines whether to show an object on the timeline.\n     * @param {number} start Object start time.\n     * @param {number} end Object end time.\n     * @returns {true} if object should be shown on the timeline.\n     */\n    showOnTimeline(start, end) {\n        let isAfter = start >= this.viewEndTime;\n        let isBefore = (end || Infinity) <= this._viewStartTime;\n        return !isAfter && !isBefore;\n    }\n    /**\n     * Calculate position of object instance from top of timeline according to its layer.\n     * @param {string} layer Object's layer.\n     * @returns Position relative to top of canvas in pixels.\n     */\n    getObjectOffsetFromTop(layerName) {\n        let top = this._layerLabels[layerName];\n        return top * this._rowHeight;\n    }\n    /**\n     * Moves the playhead. Called periodically.\n     */\n    updateDraw() {\n        const now = Date.now();\n        // How long time since last update:\n        const dt = (this._updateDrawLastTime > 0 ?\n            now - this._updateDrawLastTime :\n            1) / 1000;\n        this._updateDrawLastTime = now;\n        const deltaTime = this._playSpeed * dt;\n        // Check playhead should be drawn.\n        let needRedraw = false;\n        if (this._playHeadPlaying && this._drawPlayhead) {\n            if (this._playViewPort &&\n                this.istimeInView(this._playHeadTime) // Only play if playhead is in view\n            ) {\n                this._viewStartTime += deltaTime;\n            }\n            // Move playhead forward\n            this._playHeadTime += deltaTime;\n            needRedraw = true;\n        }\n        if (needRedraw) {\n            this.redrawTimeline();\n        }\n        // call this function on next frame\n        window.requestAnimationFrame(() => this.updateDraw());\n    }\n    /**\n     * Handles mouse down event.\n     * @param event Mouse event.\n     */\n    canvasMouseDown(event) {\n        // Store mouse is down.\n        this._mouseDown = true;\n        // Store X position of mouse on click.\n        this._mouseLastX = event.clientX;\n        // Prevent event.\n        event.preventDefault();\n        event.stopPropagation();\n    }\n    /**\n     * Handles mouse up event.\n     * @param event Mouse event.\n     */\n    canvasMouseUp(event) {\n        // Mouse no longer down.\n        this._mouseDown = false;\n        // Reset scroll direction.\n        this._lastScrollDirection = 0;\n        // Prevent event.\n        event.preventDefault();\n        event.stopPropagation();\n    }\n    /**\n     * Handles mouse movement on canvas.\n     * @param event Mouse event.\n     */\n    canvasMouseMove(event) {\n        // If mouse is down.\n        if (this._mouseDown) {\n            // If we are beginning scrolling, we can move freely.\n            if (this._lastScrollDirection === undefined || this._lastScrollDirection === 0) {\n                // Store current mouse X.\n                this._mouseLastX = event.clientX;\n                // Calculate change in X.\n                let deltaX = event.clientX - this._mouseLastX;\n                // Store scrolling direction.\n                if (deltaX < 0) {\n                    this._lastScrollDirection = -1;\n                }\n                else {\n                    this._lastScrollDirection = 1;\n                }\n                // Scroll to new X position.\n                this.canvasScrollByDeltaX(-deltaX);\n            }\n            else {\n                // Calculate scroll direction.\n                let direction = this._mouseLastX - event.clientX;\n                // If changing direction, store new direction but don't scroll.\n                if (direction < 0 && this._lastScrollDirection === 1) {\n                    this._mouseLastX = event.clientX;\n                    this._lastScrollDirection = -1;\n                }\n                else if (direction > 0 && this._lastScrollDirection === -1) {\n                    this._mouseLastX = event.clientX;\n                    this._lastScrollDirection = 1;\n                }\n                else {\n                    // Calculate change in X.\n                    let deltaX = event.clientX - this._mouseLastX;\n                    // Store last X position.\n                    this._mouseLastX = event.clientX;\n                    // Move by change in X.\n                    this.canvasScrollByDeltaX(-deltaX);\n                }\n            }\n            // Redraw timeline.\n            this.redrawTimeline();\n        }\n        else {\n            // Whether an object is under the cursor.\n            let found = false;\n            // Find the object that is currently hovered over.\n            let mousePos = this.getMousePos(this._canvasContainer, event);\n            if (mousePos.x > this._viewDrawX) {\n                if (mousePos.y < this._rowsTotalHeight) {\n                    let selectedRow = Math.floor((mousePos.y / this._rowsTotalHeight) * this._numberOfLayers);\n                    let layer;\n                    Object.keys(this._layerLabels).forEach(layerName => {\n                        if (this._layerLabels[layerName] === selectedRow)\n                            layer = layerName;\n                    });\n                    let hoverMapData = (layer ? this._hoveredObjectMap[layer] : []) || [];\n                    hoverMapData.forEach(object => {\n                        if (object.startX <= mousePos.x && object.endX >= mousePos.x) {\n                            found = true;\n                            const hoverHash = object.type + object.objectRefId + object.instanceId; // hash-ish\n                            if (this._lastHoveredHash !== hoverHash) {\n                                // Get object metadata from the object name of the hovered object.\n                                // If we are hovering over a timeline object.\n                                if (object.type === 'timelineObject') {\n                                    // Get the timeline object and the instance being hovered over.\n                                    if (this._resolvedTimeline) {\n                                        let timelineObject = this._resolvedTimeline.objects[object.objectRefId];\n                                        let instance = timelineObject.resolved.instances.find(instance => instance.id === object.instanceId);\n                                        if (instance) {\n                                            // Construct hover info.\n                                            let hoverInfo = {\n                                                object: timelineObject,\n                                                instance: instance,\n                                                pointer: { xPostion: mousePos.x, yPosition: mousePos.y }\n                                            };\n                                            // Set currently hovered object.\n                                            this._hoveredOver = hoverInfo;\n                                            // Emit event.\n                                            this.emit('timeline:hover', { detail: this._hoveredOver });\n                                        }\n                                        // Store last items.\n                                        this._lastHoverAction = MOUSEIN;\n                                        this._lastHoveredHash = hoverHash;\n                                    }\n                                }\n                            }\n                        }\n                    });\n                }\n            }\n            // Emit undefined when mouse out.\n            if (!found && this._lastHoverAction === MOUSEIN) {\n                this.emit('timeline:hover', { detail: undefined });\n                this._lastHoverAction = MOUSEOUT;\n            }\n        }\n    }\n    /**\n     * Handles scroll wheel events on the canvas.\n     * @param event Scroll event.\n     */\n    canvasScrollWheel(event) {\n        // Get mouse pointer coordinates on canvas.\n        let canvasCoord = this.getMousePos(this._canvasContainer, event);\n        // Don't scroll if mouse is not over timeline.\n        if (canvasCoord.x <= this._viewDrawX) {\n            return;\n        }\n        let changed = false;\n        // CTRL + scroll to zoom.\n        if (event.ctrlKey === true) {\n            if (event.deltaY) {\n                changed = true;\n                const zoomFactor = Math.pow(ZOOM_FACTOR, -event.deltaY);\n                this.zoomUnderCursor(canvasCoord.x, zoomFactor);\n            }\n        }\n        else if (event.deltaX !== 0) { // Scroll on x-axis\n            changed = true;\n            // Pan.\n            this.canvasScrollByDeltaX((event.deltaX * (PAN_FACTOR * this.stepSize)));\n        }\n        else if (event.deltaY !== 0 && event.altKey === true) { // Also scroll on alt-key + scroll y-axis\n            changed = true;\n            // Pan.\n            this.canvasScrollByDeltaX((event.deltaY * (PAN_FACTOR * this.stepSize)));\n        }\n        // Prevent event.\n        event.preventDefault();\n        event.stopPropagation();\n        if (changed) {\n            // Redraw timeline.\n            this.redrawTimeline();\n        }\n    }\n    /**\n     * Scroll across the canvas by a specified X value.\n     * @param {number} deltaX Value to move by.\n     */\n    canvasScrollByDeltaX(deltaX) {\n        // Calculate new starting time.\n        let targetStart = this._viewStartTime + (deltaX / this.pixelsWidthPerUnitTime);\n        // Starting time cannot be < 0.\n        if (targetStart < 0) {\n            targetStart = 0;\n        }\n        // Optimisation, don't redraw if nothing has changed.\n        if (targetStart === this._viewStartTime) {\n            return;\n        }\n        this._viewStartTime = targetStart;\n    }\n    /**\n     * Zooms into/out of timeline, keeping the time under the cursor in the same position.\n     * @param cursorX Position of mouse cursor.\n     */\n    zoomUnderCursor(cursorX, zoomFactor) {\n        // Point in time of the cursor\n        let cursorTime = this.xCoordToTime(cursorX);\n        // Ratio (in view range) of the cursor\n        let cursorRatio = this.timeToRatio(cursorTime);\n        // Change zoom:\n        this._timelineZoom = this._timelineZoom * zoomFactor;\n        // Limit within current view\n        cursorRatio = Math.max(0, Math.min(1, cursorRatio));\n        // Calculate start\n        let targetStart = cursorTime - (cursorRatio * this.viewRange);\n        // Start cannot be less than 0\n        if (targetStart < 0) {\n            targetStart = 0;\n        }\n        // Set draw time\n        this._viewStartTime = targetStart;\n    }\n    /**\n     * Gets the mouse position relative to the top-left of the canvas [pixels]\n     * @param canvas\n     * @param evt\n     * @returns {x: number, y: number} Position.\n     */\n    getMousePos(canvas, evt) {\n        const rect = canvas.getBoundingClientRect();\n        return {\n            x: evt.clientX - rect.left,\n            y: evt.clientY - rect.top\n        };\n    }\n    /**\n     * Trims a timeline so that objects only exist within a specified time period.\n     * @param timeline Timeline to trim.\n     * @param trim Times to trim between.\n     */\n    trimTimeline(timeline, trim) {\n        // The new resolved objects.\n        let newObjects = {};\n        // Iterate through resolved objects.\n        Object.keys(timeline.objects).forEach((objId) => {\n            const obj = timeline.objects[objId];\n            const resultingInstances = [];\n            obj.resolved.instances.forEach(instance => {\n                // Whether to insert this object into the new timeline.\n                let useInstance = false;\n                let newInstance = Object.assign({}, instance); // clone\n                // If trimming the start time.\n                if (trim.start) {\n                    // If the object ends after the trim start time.\n                    if ((instance.end || Infinity) > trim.start) {\n                        useInstance = true;\n                        if (newInstance.start < trim.start) {\n                            newInstance.start = trim.start;\n                        }\n                    }\n                }\n                // If trimming the end time.\n                if (trim.end) {\n                    // If the object starts before the trim end time.\n                    if (instance.start < trim.end) {\n                        useInstance = true;\n                        if ((newInstance.end || Infinity) > trim.end) {\n                            newInstance.end = trim.end;\n                        }\n                    }\n                }\n                if (!trim.start && !trim.end) {\n                    useInstance = true;\n                }\n                if (useInstance &&\n                    newInstance.start < (newInstance.end || Infinity)) {\n                    resultingInstances.push(newInstance);\n                }\n            });\n            // If there isn't a resolved object for the new instance, create it.\n            if (!newObjects[objId]) {\n                let newObject = {\n                    content: obj.content,\n                    enable: obj.enable,\n                    id: obj.id,\n                    layer: obj.layer,\n                    resolved: Object.assign(Object.assign({}, obj.resolved), { instances: [] })\n                };\n                newObjects[objId] = newObject;\n            }\n            newObjects[objId].resolved.instances = resultingInstances;\n        });\n        return {\n            classes: timeline.classes,\n            layers: timeline.layers,\n            objects: newObjects,\n            statistics: timeline.statistics,\n            nextEvents: timeline.nextEvents\n        };\n    }\n    /**\n     * Merges two timelines by merging instances of objects that intersect each other.\n     * @param past Older timeline.\n     * @param present Newer timeline.\n     * @returns {ResolvedTimeline} containing merged timelines.\n     */\n    mergeTimelineObjects(past, present, fromNewTimeline) {\n        const resultingObjects = {};\n        if (fromNewTimeline) {\n            past = this.trimTimeline(past, { end: this._playHeadTime });\n            present = this.trimTimeline(present, { start: this._playHeadTime });\n            // Because we want to keep old objects, this iterator is used to create unique old ids for them\n            this._mergeIterator++;\n            Object.keys(past.objects).forEach((objId) => {\n                const pastObj = past.objects[objId];\n                // @ts-ignore: hack to mark it as a \"past object\"\n                if (pastObj.__pastObj) {\n                    // Copy over it right away, it's old. Don't do anything else\n                    resultingObjects[objId] = pastObj;\n                    return;\n                }\n                // If an object exists in both timelines\n                const presentObj = present.objects[objId];\n                if (presentObj) {\n                    if (\n                    // Compare the objects, only look into merging them if they look identical\n                    isEqual(Object.assign({}, pastObj, { resolved: null }), Object.assign({}, presentObj, { resolved: null }))) {\n                        // This assumes that all past instances stop at a certain time at the very latest,\n                        // and that all new instances start at that time at the very earliest.\n                        // Iterate over all instances of those objects.\n                        const allInstances = {};\n                        pastObj.resolved.instances.forEach(pastInstance => {\n                            allInstances[pastInstance.end + ''] = pastInstance;\n                        });\n                        presentObj.resolved.instances.forEach(presentInstance => {\n                            if (allInstances[presentInstance.start + '']) {\n                                // The instances are next to each other, merge them into one:\n                                allInstances[presentInstance.start + ''].end = presentInstance.end;\n                            }\n                            else {\n                                allInstances[presentInstance.start + ''] = presentInstance;\n                            }\n                        });\n                        presentObj.resolved.instances = [];\n                        Object.keys(allInstances).forEach(key => {\n                            const instance = allInstances[key];\n                            presentObj.resolved.instances.push(instance);\n                        });\n                        // Copy over the new object\n                        resultingObjects[objId] = presentObj;\n                        return; // don't copy over old object\n                    }\n                    else {\n                        // The objects doesn't look identical\n                        // Copy over the new object\n                        resultingObjects[objId] = presentObj;\n                    }\n                }\n                else {\n                    // The old object doesn't exist in the new timeline\n                }\n                // @ts-ignore: hack to mark it as a \"past object\"\n                pastObj.__pastObj = true;\n                // Copy over the old object\n                resultingObjects[this._mergeIterator + '__' + objId] = pastObj;\n            });\n            // Iterate over the next objects\n            Object.keys(present.objects).forEach((objId) => {\n                const presentObj = present.objects[objId];\n                if (!past.objects[objId]) { // (if it did existed in the past, it has already been handled)\n                    // Just copy over the new object\n                    resultingObjects[objId] = presentObj;\n                }\n            });\n        }\n        else {\n            // No new timeline, objects and instances are only added\n            Object.keys(past.objects).forEach((objId) => {\n                const pastObj = past.objects[objId];\n                resultingObjects[objId] = pastObj;\n            });\n            Object.keys(present.objects).forEach((objId) => {\n                const presentObj = present.objects[objId];\n                const existingObj = resultingObjects[objId];\n                if (existingObj) {\n                    // merge with old instances\n                    const existingInstances = {};\n                    existingObj.resolved.instances.forEach(instance => {\n                        existingInstances[instance.start + '_' + instance.end] = true;\n                    });\n                    presentObj.resolved.instances.forEach(instance => {\n                        // Only push instances that aren't already present:\n                        if (!existingInstances[instance.start + '_' + instance.end]) {\n                            existingObj.resolved.instances.push(instance);\n                        }\n                    });\n                }\n                else {\n                    resultingObjects[objId] = presentObj;\n                }\n            });\n        }\n        const resultingLayers = {};\n        Object.keys(resultingObjects).forEach(key => {\n            const obj = resultingObjects[key];\n            const layer = obj.layer + '';\n            if (!resultingLayers[layer])\n                resultingLayers[layer] = [];\n            resultingLayers[layer].push(key);\n        });\n        return Object.assign(Object.assign({}, present), { objects: resultingObjects, layers: resultingLayers });\n    }\n    updateTimelineResolveWindow() {\n        const { start, end } = this.getExpandedStartEndTime(1);\n        this._timelineResolveStart = start;\n        this._timelineResolveEnd = end;\n        this._timelineResolveZoom = this._timelineZoom;\n        if (this.latestUpdateTime) {\n            // Calculate an optimal number of objects to create, so that the drawing still runs smoothly.\n            const targetResolveTime = 50; // ms\n            let ratio = targetResolveTime / this.latestUpdateTime;\n            this._timelineResolveCountAdjust = Math.max(0.1, Math.min(10, (1 + (this._timelineResolveCountAdjust * ratio)) / 2));\n        }\n    }\n    getExpandedStartEndTime(multiplier = 1) {\n        let start = this._viewStartTime;\n        let end = this.viewEndTime;\n        let duration = end - start;\n        let expand = duration * (this._timelineResolveExpand - 1) * multiplier;\n        start -= expand * 0.33;\n        end += expand * 0.66; // expand more into the future\n        start = Math.max(0, start);\n        end = Math.max(0, end);\n        const zoomDiff = Math.max(this._timelineResolveZoom, this._timelineZoom) /\n            Math.min(this._timelineResolveZoom, this._timelineZoom);\n        return { start, end, zoomDiff };\n    }\n    checkAutomaticReresolve() {\n        const { start, end, zoomDiff } = this.getExpandedStartEndTime(0.2);\n        if (this._timelineResolveAuto && (start < this._timelineResolveStart ||\n            end > this._timelineResolveEnd ||\n            zoomDiff > 3)) {\n            if (!this.reresolveTimeout) {\n                this.reresolveTimeout = setTimeout(() => {\n                    this.reresolveTimeout = null;\n                    this.updateTimelineResolveWindow();\n                    this._updateTimeline();\n                }, Math.max(100, this.latestUpdateTime * 5));\n            }\n        }\n    }\n    // --------------------- Conversions between position & time -------------\n    /**\n     * Calculate the X coordinate of a time value.\n     * @param {number} time The time to convert.\n     * @returns {number} The X coordinate of the time.\n     */\n    timeToXCoord(time) {\n        return this._viewDrawX + ((time - this._viewStartTime) * this.pixelsWidthPerUnitTime);\n    }\n    /**\n     * Calculate the time of a X coordinate.\n     * @param {number} time The X coordinate to convert.\n     * @returns {number} The time of the X coordinate.\n     */\n    xCoordToTime(position) {\n        return this._viewStartTime + ((position - this._viewDrawX) / this.pixelsWidthPerUnitTime);\n    }\n    /** Calculate the ratio of the time in current view (0 i beginning, 1 is end)  */\n    timeToRatio(time) {\n        return (time - this._viewStartTime) / this.viewRange;\n    }\n    /** Returns true if the position is within the current view  */\n    istimeInView(time) {\n        const ratio = this.timeToRatio(time);\n        return ratio >= 0 && ratio < 1;\n    }\n    capXcoordToView(position) {\n        return Math.max(this._viewDrawX, Math.min(this._viewDrawX + this._viewDrawWidth, position));\n    }\n    // -------------- Getters / Convenience functions ---------------------\n    /** Zoom factor [pixels / time] */\n    get pixelsWidthPerUnitTime() {\n        return (this._timelineZoom / 100);\n    }\n    /** The range of the view [time] */\n    get viewRange() {\n        return this._viewDrawWidth / this.pixelsWidthPerUnitTime;\n    }\n    /** The end time of the view [time] */\n    get viewEndTime() {\n        return this._viewStartTime + this.viewRange;\n    }\n}\nexports.TimelineVisualizer = TimelineVisualizer;\n//# sourceMappingURL=timelineVisualizer.js.map","","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nvar objectCreate = Object.create || objectCreatePolyfill\nvar objectKeys = Object.keys || objectKeysPolyfill\nvar bind = Function.prototype.bind || functionBindPolyfill\n\nfunction EventEmitter() {\n  if (!this._events || !Object.prototype.hasOwnProperty.call(this, '_events')) {\n    this._events = objectCreate(null);\n    this._eventsCount = 0;\n  }\n\n  this._maxListeners = this._maxListeners || undefined;\n}\nmodule.exports = EventEmitter;\n\n// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nvar defaultMaxListeners = 10;\n\nvar hasDefineProperty;\ntry {\n  var o = {};\n  if (Object.defineProperty) Object.defineProperty(o, 'x', { value: 0 });\n  hasDefineProperty = o.x === 0;\n} catch (err) { hasDefineProperty = false }\nif (hasDefineProperty) {\n  Object.defineProperty(EventEmitter, 'defaultMaxListeners', {\n    enumerable: true,\n    get: function() {\n      return defaultMaxListeners;\n    },\n    set: function(arg) {\n      // check whether the input is a positive number (whose value is zero or\n      // greater and not a NaN).\n      if (typeof arg !== 'number' || arg < 0 || arg !== arg)\n        throw new TypeError('\"defaultMaxListeners\" must be a positive number');\n      defaultMaxListeners = arg;\n    }\n  });\n} else {\n  EventEmitter.defaultMaxListeners = defaultMaxListeners;\n}\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {\n  if (typeof n !== 'number' || n < 0 || isNaN(n))\n    throw new TypeError('\"n\" argument must be a positive number');\n  this._maxListeners = n;\n  return this;\n};\n\nfunction $getMaxListeners(that) {\n  if (that._maxListeners === undefined)\n    return EventEmitter.defaultMaxListeners;\n  return that._maxListeners;\n}\n\nEventEmitter.prototype.getMaxListeners = function getMaxListeners() {\n  return $getMaxListeners(this);\n};\n\n// These standalone emit* functions are used to optimize calling of event\n// handlers for fast cases because emit() itself often has a variable number of\n// arguments and can be deoptimized because of that. These functions always have\n// the same number of arguments and thus do not get deoptimized, so the code\n// inside them can execute faster.\nfunction emitNone(handler, isFn, self) {\n  if (isFn)\n    handler.call(self);\n  else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      listeners[i].call(self);\n  }\n}\nfunction emitOne(handler, isFn, self, arg1) {\n  if (isFn)\n    handler.call(self, arg1);\n  else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      listeners[i].call(self, arg1);\n  }\n}\nfunction emitTwo(handler, isFn, self, arg1, arg2) {\n  if (isFn)\n    handler.call(self, arg1, arg2);\n  else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      listeners[i].call(self, arg1, arg2);\n  }\n}\nfunction emitThree(handler, isFn, self, arg1, arg2, arg3) {\n  if (isFn)\n    handler.call(self, arg1, arg2, arg3);\n  else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      listeners[i].call(self, arg1, arg2, arg3);\n  }\n}\n\nfunction emitMany(handler, isFn, self, args) {\n  if (isFn)\n    handler.apply(self, args);\n  else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      listeners[i].apply(self, args);\n  }\n}\n\nEventEmitter.prototype.emit = function emit(type) {\n  var er, handler, len, args, i, events;\n  var doError = (type === 'error');\n\n  events = this._events;\n  if (events)\n    doError = (doError && events.error == null);\n  else if (!doError)\n    return false;\n\n  // If there is no 'error' event listener then throw.\n  if (doError) {\n    if (arguments.length > 1)\n      er = arguments[1];\n    if (er instanceof Error) {\n      throw er; // Unhandled 'error' event\n    } else {\n      // At least give some kind of context to the user\n      var err = new Error('Unhandled \"error\" event. (' + er + ')');\n      err.context = er;\n      throw err;\n    }\n    return false;\n  }\n\n  handler = events[type];\n\n  if (!handler)\n    return false;\n\n  var isFn = typeof handler === 'function';\n  len = arguments.length;\n  switch (len) {\n      // fast cases\n    case 1:\n      emitNone(handler, isFn, this);\n      break;\n    case 2:\n      emitOne(handler, isFn, this, arguments[1]);\n      break;\n    case 3:\n      emitTwo(handler, isFn, this, arguments[1], arguments[2]);\n      break;\n    case 4:\n      emitThree(handler, isFn, this, arguments[1], arguments[2], arguments[3]);\n      break;\n      // slower\n    default:\n      args = new Array(len - 1);\n      for (i = 1; i < len; i++)\n        args[i - 1] = arguments[i];\n      emitMany(handler, isFn, this, args);\n  }\n\n  return true;\n};\n\nfunction _addListener(target, type, listener, prepend) {\n  var m;\n  var events;\n  var existing;\n\n  if (typeof listener !== 'function')\n    throw new TypeError('\"listener\" argument must be a function');\n\n  events = target._events;\n  if (!events) {\n    events = target._events = objectCreate(null);\n    target._eventsCount = 0;\n  } else {\n    // To avoid recursion in the case that type === \"newListener\"! Before\n    // adding it to the listeners, first emit \"newListener\".\n    if (events.newListener) {\n      target.emit('newListener', type,\n          listener.listener ? listener.listener : listener);\n\n      // Re-assign `events` because a newListener handler could have caused the\n      // this._events to be assigned to a new object\n      events = target._events;\n    }\n    existing = events[type];\n  }\n\n  if (!existing) {\n    // Optimize the case of one listener. Don't need the extra array object.\n    existing = events[type] = listener;\n    ++target._eventsCount;\n  } else {\n    if (typeof existing === 'function') {\n      // Adding the second element, need to change to array.\n      existing = events[type] =\n          prepend ? [listener, existing] : [existing, listener];\n    } else {\n      // If we've already got an array, just append.\n      if (prepend) {\n        existing.unshift(listener);\n      } else {\n        existing.push(listener);\n      }\n    }\n\n    // Check for listener leak\n    if (!existing.warned) {\n      m = $getMaxListeners(target);\n      if (m && m > 0 && existing.length > m) {\n        existing.warned = true;\n        var w = new Error('Possible EventEmitter memory leak detected. ' +\n            existing.length + ' \"' + String(type) + '\" listeners ' +\n            'added. Use emitter.setMaxListeners() to ' +\n            'increase limit.');\n        w.name = 'MaxListenersExceededWarning';\n        w.emitter = target;\n        w.type = type;\n        w.count = existing.length;\n        if (typeof console === 'object' && console.warn) {\n          console.warn('%s: %s', w.name, w.message);\n        }\n      }\n    }\n  }\n\n  return target;\n}\n\nEventEmitter.prototype.addListener = function addListener(type, listener) {\n  return _addListener(this, type, listener, false);\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.prependListener =\n    function prependListener(type, listener) {\n      return _addListener(this, type, listener, true);\n    };\n\nfunction onceWrapper() {\n  if (!this.fired) {\n    this.target.removeListener(this.type, this.wrapFn);\n    this.fired = true;\n    switch (arguments.length) {\n      case 0:\n        return this.listener.call(this.target);\n      case 1:\n        return this.listener.call(this.target, arguments[0]);\n      case 2:\n        return this.listener.call(this.target, arguments[0], arguments[1]);\n      case 3:\n        return this.listener.call(this.target, arguments[0], arguments[1],\n            arguments[2]);\n      default:\n        var args = new Array(arguments.length);\n        for (var i = 0; i < args.length; ++i)\n          args[i] = arguments[i];\n        this.listener.apply(this.target, args);\n    }\n  }\n}\n\nfunction _onceWrap(target, type, listener) {\n  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };\n  var wrapped = bind.call(onceWrapper, state);\n  wrapped.listener = listener;\n  state.wrapFn = wrapped;\n  return wrapped;\n}\n\nEventEmitter.prototype.once = function once(type, listener) {\n  if (typeof listener !== 'function')\n    throw new TypeError('\"listener\" argument must be a function');\n  this.on(type, _onceWrap(this, type, listener));\n  return this;\n};\n\nEventEmitter.prototype.prependOnceListener =\n    function prependOnceListener(type, listener) {\n      if (typeof listener !== 'function')\n        throw new TypeError('\"listener\" argument must be a function');\n      this.prependListener(type, _onceWrap(this, type, listener));\n      return this;\n    };\n\n// Emits a 'removeListener' event if and only if the listener was removed.\nEventEmitter.prototype.removeListener =\n    function removeListener(type, listener) {\n      var list, events, position, i, originalListener;\n\n      if (typeof listener !== 'function')\n        throw new TypeError('\"listener\" argument must be a function');\n\n      events = this._events;\n      if (!events)\n        return this;\n\n      list = events[type];\n      if (!list)\n        return this;\n\n      if (list === listener || list.listener === listener) {\n        if (--this._eventsCount === 0)\n          this._events = objectCreate(null);\n        else {\n          delete events[type];\n          if (events.removeListener)\n            this.emit('removeListener', type, list.listener || listener);\n        }\n      } else if (typeof list !== 'function') {\n        position = -1;\n\n        for (i = list.length - 1; i >= 0; i--) {\n          if (list[i] === listener || list[i].listener === listener) {\n            originalListener = list[i].listener;\n            position = i;\n            break;\n          }\n        }\n\n        if (position < 0)\n          return this;\n\n        if (position === 0)\n          list.shift();\n        else\n          spliceOne(list, position);\n\n        if (list.length === 1)\n          events[type] = list[0];\n\n        if (events.removeListener)\n          this.emit('removeListener', type, originalListener || listener);\n      }\n\n      return this;\n    };\n\nEventEmitter.prototype.removeAllListeners =\n    function removeAllListeners(type) {\n      var listeners, events, i;\n\n      events = this._events;\n      if (!events)\n        return this;\n\n      // not listening for removeListener, no need to emit\n      if (!events.removeListener) {\n        if (arguments.length === 0) {\n          this._events = objectCreate(null);\n          this._eventsCount = 0;\n        } else if (events[type]) {\n          if (--this._eventsCount === 0)\n            this._events = objectCreate(null);\n          else\n            delete events[type];\n        }\n        return this;\n      }\n\n      // emit removeListener for all listeners on all events\n      if (arguments.length === 0) {\n        var keys = objectKeys(events);\n        var key;\n        for (i = 0; i < keys.length; ++i) {\n          key = keys[i];\n          if (key === 'removeListener') continue;\n          this.removeAllListeners(key);\n        }\n        this.removeAllListeners('removeListener');\n        this._events = objectCreate(null);\n        this._eventsCount = 0;\n        return this;\n      }\n\n      listeners = events[type];\n\n      if (typeof listeners === 'function') {\n        this.removeListener(type, listeners);\n      } else if (listeners) {\n        // LIFO order\n        for (i = listeners.length - 1; i >= 0; i--) {\n          this.removeListener(type, listeners[i]);\n        }\n      }\n\n      return this;\n    };\n\nfunction _listeners(target, type, unwrap) {\n  var events = target._events;\n\n  if (!events)\n    return [];\n\n  var evlistener = events[type];\n  if (!evlistener)\n    return [];\n\n  if (typeof evlistener === 'function')\n    return unwrap ? [evlistener.listener || evlistener] : [evlistener];\n\n  return unwrap ? unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);\n}\n\nEventEmitter.prototype.listeners = function listeners(type) {\n  return _listeners(this, type, true);\n};\n\nEventEmitter.prototype.rawListeners = function rawListeners(type) {\n  return _listeners(this, type, false);\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  if (typeof emitter.listenerCount === 'function') {\n    return emitter.listenerCount(type);\n  } else {\n    return listenerCount.call(emitter, type);\n  }\n};\n\nEventEmitter.prototype.listenerCount = listenerCount;\nfunction listenerCount(type) {\n  var events = this._events;\n\n  if (events) {\n    var evlistener = events[type];\n\n    if (typeof evlistener === 'function') {\n      return 1;\n    } else if (evlistener) {\n      return evlistener.length;\n    }\n  }\n\n  return 0;\n}\n\nEventEmitter.prototype.eventNames = function eventNames() {\n  return this._eventsCount > 0 ? Reflect.ownKeys(this._events) : [];\n};\n\n// About 1.5x faster than the two-arg version of Array#splice().\nfunction spliceOne(list, index) {\n  for (var i = index, k = i + 1, n = list.length; k < n; i += 1, k += 1)\n    list[i] = list[k];\n  list.pop();\n}\n\nfunction arrayClone(arr, n) {\n  var copy = new Array(n);\n  for (var i = 0; i < n; ++i)\n    copy[i] = arr[i];\n  return copy;\n}\n\nfunction unwrapListeners(arr) {\n  var ret = new Array(arr.length);\n  for (var i = 0; i < ret.length; ++i) {\n    ret[i] = arr[i].listener || arr[i];\n  }\n  return ret;\n}\n\nfunction objectCreatePolyfill(proto) {\n  var F = function() {};\n  F.prototype = proto;\n  return new F;\n}\nfunction objectKeysPolyfill(obj) {\n  var keys = [];\n  for (var k in obj) if (Object.prototype.hasOwnProperty.call(obj, k)) {\n    keys.push(k);\n  }\n  return k;\n}\nfunction functionBindPolyfill(context) {\n  var fn = this;\n  return function () {\n    return fn.apply(context, arguments);\n  };\n}\n","/**\n * Lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright JS Foundation and other contributors <https://js.foundation/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as the size to enable large array optimizations. */\nvar LARGE_ARRAY_SIZE = 200;\n\n/** Used to stand-in for `undefined` hash values. */\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n/** Used to compose bitmasks for value comparisons. */\nvar COMPARE_PARTIAL_FLAG = 1,\n    COMPARE_UNORDERED_FLAG = 2;\n\n/** Used as references for various `Number` constants. */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    arrayTag = '[object Array]',\n    asyncTag = '[object AsyncFunction]',\n    boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    errorTag = '[object Error]',\n    funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    nullTag = '[object Null]',\n    objectTag = '[object Object]',\n    promiseTag = '[object Promise]',\n    proxyTag = '[object Proxy]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    symbolTag = '[object Symbol]',\n    undefinedTag = '[object Undefined]',\n    weakMapTag = '[object WeakMap]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]',\n    float32Tag = '[object Float32Array]',\n    float64Tag = '[object Float64Array]',\n    int8Tag = '[object Int8Array]',\n    int16Tag = '[object Int16Array]',\n    int32Tag = '[object Int32Array]',\n    uint8Tag = '[object Uint8Array]',\n    uint8ClampedTag = '[object Uint8ClampedArray]',\n    uint16Tag = '[object Uint16Array]',\n    uint32Tag = '[object Uint32Array]';\n\n/**\n * Used to match `RegExp`\n * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n */\nvar reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\n\n/** Used to detect host constructors (Safari). */\nvar reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n/** Used to detect unsigned integer values. */\nvar reIsUint = /^(?:0|[1-9]\\d*)$/;\n\n/** Used to identify `toStringTag` values of typed arrays. */\nvar typedArrayTags = {};\ntypedArrayTags[float32Tag] = typedArrayTags[float64Tag] =\ntypedArrayTags[int8Tag] = typedArrayTags[int16Tag] =\ntypedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =\ntypedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =\ntypedArrayTags[uint32Tag] = true;\ntypedArrayTags[argsTag] = typedArrayTags[arrayTag] =\ntypedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =\ntypedArrayTags[dataViewTag] = typedArrayTags[dateTag] =\ntypedArrayTags[errorTag] = typedArrayTags[funcTag] =\ntypedArrayTags[mapTag] = typedArrayTags[numberTag] =\ntypedArrayTags[objectTag] = typedArrayTags[regexpTag] =\ntypedArrayTags[setTag] = typedArrayTags[stringTag] =\ntypedArrayTags[weakMapTag] = false;\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\n/** Detect free variable `exports`. */\nvar freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;\n\n/** Detect free variable `module`. */\nvar freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n\n/** Detect the popular CommonJS extension `module.exports`. */\nvar moduleExports = freeModule && freeModule.exports === freeExports;\n\n/** Detect free variable `process` from Node.js. */\nvar freeProcess = moduleExports && freeGlobal.process;\n\n/** Used to access faster Node.js helpers. */\nvar nodeUtil = (function() {\n  try {\n    return freeProcess && freeProcess.binding && freeProcess.binding('util');\n  } catch (e) {}\n}());\n\n/* Node.js helper references. */\nvar nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;\n\n/**\n * A specialized version of `_.filter` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {Array} Returns the new filtered array.\n */\nfunction arrayFilter(array, predicate) {\n  var index = -1,\n      length = array == null ? 0 : array.length,\n      resIndex = 0,\n      result = [];\n\n  while (++index < length) {\n    var value = array[index];\n    if (predicate(value, index, array)) {\n      result[resIndex++] = value;\n    }\n  }\n  return result;\n}\n\n/**\n * Appends the elements of `values` to `array`.\n *\n * @private\n * @param {Array} array The array to modify.\n * @param {Array} values The values to append.\n * @returns {Array} Returns `array`.\n */\nfunction arrayPush(array, values) {\n  var index = -1,\n      length = values.length,\n      offset = array.length;\n\n  while (++index < length) {\n    array[offset + index] = values[index];\n  }\n  return array;\n}\n\n/**\n * A specialized version of `_.some` for arrays without support for iteratee\n * shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {boolean} Returns `true` if any element passes the predicate check,\n *  else `false`.\n */\nfunction arraySome(array, predicate) {\n  var index = -1,\n      length = array == null ? 0 : array.length;\n\n  while (++index < length) {\n    if (predicate(array[index], index, array)) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * The base implementation of `_.times` without support for iteratee shorthands\n * or max array length checks.\n *\n * @private\n * @param {number} n The number of times to invoke `iteratee`.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the array of results.\n */\nfunction baseTimes(n, iteratee) {\n  var index = -1,\n      result = Array(n);\n\n  while (++index < n) {\n    result[index] = iteratee(index);\n  }\n  return result;\n}\n\n/**\n * The base implementation of `_.unary` without support for storing metadata.\n *\n * @private\n * @param {Function} func The function to cap arguments for.\n * @returns {Function} Returns the new capped function.\n */\nfunction baseUnary(func) {\n  return function(value) {\n    return func(value);\n  };\n}\n\n/**\n * Checks if a `cache` value for `key` exists.\n *\n * @private\n * @param {Object} cache The cache to query.\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction cacheHas(cache, key) {\n  return cache.has(key);\n}\n\n/**\n * Gets the value at `key` of `object`.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {string} key The key of the property to get.\n * @returns {*} Returns the property value.\n */\nfunction getValue(object, key) {\n  return object == null ? undefined : object[key];\n}\n\n/**\n * Converts `map` to its key-value pairs.\n *\n * @private\n * @param {Object} map The map to convert.\n * @returns {Array} Returns the key-value pairs.\n */\nfunction mapToArray(map) {\n  var index = -1,\n      result = Array(map.size);\n\n  map.forEach(function(value, key) {\n    result[++index] = [key, value];\n  });\n  return result;\n}\n\n/**\n * Creates a unary function that invokes `func` with its argument transformed.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {Function} transform The argument transform.\n * @returns {Function} Returns the new function.\n */\nfunction overArg(func, transform) {\n  return function(arg) {\n    return func(transform(arg));\n  };\n}\n\n/**\n * Converts `set` to an array of its values.\n *\n * @private\n * @param {Object} set The set to convert.\n * @returns {Array} Returns the values.\n */\nfunction setToArray(set) {\n  var index = -1,\n      result = Array(set.size);\n\n  set.forEach(function(value) {\n    result[++index] = value;\n  });\n  return result;\n}\n\n/** Used for built-in method references. */\nvar arrayProto = Array.prototype,\n    funcProto = Function.prototype,\n    objectProto = Object.prototype;\n\n/** Used to detect overreaching core-js shims. */\nvar coreJsData = root['__core-js_shared__'];\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/** Used to detect methods masquerading as native. */\nvar maskSrcKey = (function() {\n  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\n  return uid ? ('Symbol(src)_1.' + uid) : '';\n}());\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar nativeObjectToString = objectProto.toString;\n\n/** Used to detect if a method is native. */\nvar reIsNative = RegExp('^' +\n  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')\n  .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n);\n\n/** Built-in value references. */\nvar Buffer = moduleExports ? root.Buffer : undefined,\n    Symbol = root.Symbol,\n    Uint8Array = root.Uint8Array,\n    propertyIsEnumerable = objectProto.propertyIsEnumerable,\n    splice = arrayProto.splice,\n    symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeGetSymbols = Object.getOwnPropertySymbols,\n    nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,\n    nativeKeys = overArg(Object.keys, Object);\n\n/* Built-in method references that are verified to be native. */\nvar DataView = getNative(root, 'DataView'),\n    Map = getNative(root, 'Map'),\n    Promise = getNative(root, 'Promise'),\n    Set = getNative(root, 'Set'),\n    WeakMap = getNative(root, 'WeakMap'),\n    nativeCreate = getNative(Object, 'create');\n\n/** Used to detect maps, sets, and weakmaps. */\nvar dataViewCtorString = toSource(DataView),\n    mapCtorString = toSource(Map),\n    promiseCtorString = toSource(Promise),\n    setCtorString = toSource(Set),\n    weakMapCtorString = toSource(WeakMap);\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;\n\n/**\n * Creates a hash object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Hash(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the hash.\n *\n * @private\n * @name clear\n * @memberOf Hash\n */\nfunction hashClear() {\n  this.__data__ = nativeCreate ? nativeCreate(null) : {};\n  this.size = 0;\n}\n\n/**\n * Removes `key` and its value from the hash.\n *\n * @private\n * @name delete\n * @memberOf Hash\n * @param {Object} hash The hash to modify.\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction hashDelete(key) {\n  var result = this.has(key) && delete this.__data__[key];\n  this.size -= result ? 1 : 0;\n  return result;\n}\n\n/**\n * Gets the hash value for `key`.\n *\n * @private\n * @name get\n * @memberOf Hash\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction hashGet(key) {\n  var data = this.__data__;\n  if (nativeCreate) {\n    var result = data[key];\n    return result === HASH_UNDEFINED ? undefined : result;\n  }\n  return hasOwnProperty.call(data, key) ? data[key] : undefined;\n}\n\n/**\n * Checks if a hash value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Hash\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction hashHas(key) {\n  var data = this.__data__;\n  return nativeCreate ? (data[key] !== undefined) : hasOwnProperty.call(data, key);\n}\n\n/**\n * Sets the hash `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Hash\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the hash instance.\n */\nfunction hashSet(key, value) {\n  var data = this.__data__;\n  this.size += this.has(key) ? 0 : 1;\n  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;\n  return this;\n}\n\n// Add methods to `Hash`.\nHash.prototype.clear = hashClear;\nHash.prototype['delete'] = hashDelete;\nHash.prototype.get = hashGet;\nHash.prototype.has = hashHas;\nHash.prototype.set = hashSet;\n\n/**\n * Creates an list cache object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction ListCache(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the list cache.\n *\n * @private\n * @name clear\n * @memberOf ListCache\n */\nfunction listCacheClear() {\n  this.__data__ = [];\n  this.size = 0;\n}\n\n/**\n * Removes `key` and its value from the list cache.\n *\n * @private\n * @name delete\n * @memberOf ListCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction listCacheDelete(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    return false;\n  }\n  var lastIndex = data.length - 1;\n  if (index == lastIndex) {\n    data.pop();\n  } else {\n    splice.call(data, index, 1);\n  }\n  --this.size;\n  return true;\n}\n\n/**\n * Gets the list cache value for `key`.\n *\n * @private\n * @name get\n * @memberOf ListCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction listCacheGet(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  return index < 0 ? undefined : data[index][1];\n}\n\n/**\n * Checks if a list cache value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf ListCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction listCacheHas(key) {\n  return assocIndexOf(this.__data__, key) > -1;\n}\n\n/**\n * Sets the list cache `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf ListCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the list cache instance.\n */\nfunction listCacheSet(key, value) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    ++this.size;\n    data.push([key, value]);\n  } else {\n    data[index][1] = value;\n  }\n  return this;\n}\n\n// Add methods to `ListCache`.\nListCache.prototype.clear = listCacheClear;\nListCache.prototype['delete'] = listCacheDelete;\nListCache.prototype.get = listCacheGet;\nListCache.prototype.has = listCacheHas;\nListCache.prototype.set = listCacheSet;\n\n/**\n * Creates a map cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction MapCache(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the map.\n *\n * @private\n * @name clear\n * @memberOf MapCache\n */\nfunction mapCacheClear() {\n  this.size = 0;\n  this.__data__ = {\n    'hash': new Hash,\n    'map': new (Map || ListCache),\n    'string': new Hash\n  };\n}\n\n/**\n * Removes `key` and its value from the map.\n *\n * @private\n * @name delete\n * @memberOf MapCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction mapCacheDelete(key) {\n  var result = getMapData(this, key)['delete'](key);\n  this.size -= result ? 1 : 0;\n  return result;\n}\n\n/**\n * Gets the map value for `key`.\n *\n * @private\n * @name get\n * @memberOf MapCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction mapCacheGet(key) {\n  return getMapData(this, key).get(key);\n}\n\n/**\n * Checks if a map value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf MapCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction mapCacheHas(key) {\n  return getMapData(this, key).has(key);\n}\n\n/**\n * Sets the map `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf MapCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the map cache instance.\n */\nfunction mapCacheSet(key, value) {\n  var data = getMapData(this, key),\n      size = data.size;\n\n  data.set(key, value);\n  this.size += data.size == size ? 0 : 1;\n  return this;\n}\n\n// Add methods to `MapCache`.\nMapCache.prototype.clear = mapCacheClear;\nMapCache.prototype['delete'] = mapCacheDelete;\nMapCache.prototype.get = mapCacheGet;\nMapCache.prototype.has = mapCacheHas;\nMapCache.prototype.set = mapCacheSet;\n\n/**\n *\n * Creates an array cache object to store unique values.\n *\n * @private\n * @constructor\n * @param {Array} [values] The values to cache.\n */\nfunction SetCache(values) {\n  var index = -1,\n      length = values == null ? 0 : values.length;\n\n  this.__data__ = new MapCache;\n  while (++index < length) {\n    this.add(values[index]);\n  }\n}\n\n/**\n * Adds `value` to the array cache.\n *\n * @private\n * @name add\n * @memberOf SetCache\n * @alias push\n * @param {*} value The value to cache.\n * @returns {Object} Returns the cache instance.\n */\nfunction setCacheAdd(value) {\n  this.__data__.set(value, HASH_UNDEFINED);\n  return this;\n}\n\n/**\n * Checks if `value` is in the array cache.\n *\n * @private\n * @name has\n * @memberOf SetCache\n * @param {*} value The value to search for.\n * @returns {number} Returns `true` if `value` is found, else `false`.\n */\nfunction setCacheHas(value) {\n  return this.__data__.has(value);\n}\n\n// Add methods to `SetCache`.\nSetCache.prototype.add = SetCache.prototype.push = setCacheAdd;\nSetCache.prototype.has = setCacheHas;\n\n/**\n * Creates a stack cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Stack(entries) {\n  var data = this.__data__ = new ListCache(entries);\n  this.size = data.size;\n}\n\n/**\n * Removes all key-value entries from the stack.\n *\n * @private\n * @name clear\n * @memberOf Stack\n */\nfunction stackClear() {\n  this.__data__ = new ListCache;\n  this.size = 0;\n}\n\n/**\n * Removes `key` and its value from the stack.\n *\n * @private\n * @name delete\n * @memberOf Stack\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction stackDelete(key) {\n  var data = this.__data__,\n      result = data['delete'](key);\n\n  this.size = data.size;\n  return result;\n}\n\n/**\n * Gets the stack value for `key`.\n *\n * @private\n * @name get\n * @memberOf Stack\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction stackGet(key) {\n  return this.__data__.get(key);\n}\n\n/**\n * Checks if a stack value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Stack\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction stackHas(key) {\n  return this.__data__.has(key);\n}\n\n/**\n * Sets the stack `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Stack\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the stack cache instance.\n */\nfunction stackSet(key, value) {\n  var data = this.__data__;\n  if (data instanceof ListCache) {\n    var pairs = data.__data__;\n    if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {\n      pairs.push([key, value]);\n      this.size = ++data.size;\n      return this;\n    }\n    data = this.__data__ = new MapCache(pairs);\n  }\n  data.set(key, value);\n  this.size = data.size;\n  return this;\n}\n\n// Add methods to `Stack`.\nStack.prototype.clear = stackClear;\nStack.prototype['delete'] = stackDelete;\nStack.prototype.get = stackGet;\nStack.prototype.has = stackHas;\nStack.prototype.set = stackSet;\n\n/**\n * Creates an array of the enumerable property names of the array-like `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @param {boolean} inherited Specify returning inherited property names.\n * @returns {Array} Returns the array of property names.\n */\nfunction arrayLikeKeys(value, inherited) {\n  var isArr = isArray(value),\n      isArg = !isArr && isArguments(value),\n      isBuff = !isArr && !isArg && isBuffer(value),\n      isType = !isArr && !isArg && !isBuff && isTypedArray(value),\n      skipIndexes = isArr || isArg || isBuff || isType,\n      result = skipIndexes ? baseTimes(value.length, String) : [],\n      length = result.length;\n\n  for (var key in value) {\n    if ((inherited || hasOwnProperty.call(value, key)) &&\n        !(skipIndexes && (\n           // Safari 9 has enumerable `arguments.length` in strict mode.\n           key == 'length' ||\n           // Node.js 0.10 has enumerable non-index properties on buffers.\n           (isBuff && (key == 'offset' || key == 'parent')) ||\n           // PhantomJS 2 has enumerable non-index properties on typed arrays.\n           (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||\n           // Skip index properties.\n           isIndex(key, length)\n        ))) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * Gets the index at which the `key` is found in `array` of key-value pairs.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} key The key to search for.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction assocIndexOf(array, key) {\n  var length = array.length;\n  while (length--) {\n    if (eq(array[length][0], key)) {\n      return length;\n    }\n  }\n  return -1;\n}\n\n/**\n * The base implementation of `getAllKeys` and `getAllKeysIn` which uses\n * `keysFunc` and `symbolsFunc` to get the enumerable property names and\n * symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Function} keysFunc The function to get the keys of `object`.\n * @param {Function} symbolsFunc The function to get the symbols of `object`.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction baseGetAllKeys(object, keysFunc, symbolsFunc) {\n  var result = keysFunc(object);\n  return isArray(object) ? result : arrayPush(result, symbolsFunc(object));\n}\n\n/**\n * The base implementation of `getTag` without fallbacks for buggy environments.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nfunction baseGetTag(value) {\n  if (value == null) {\n    return value === undefined ? undefinedTag : nullTag;\n  }\n  return (symToStringTag && symToStringTag in Object(value))\n    ? getRawTag(value)\n    : objectToString(value);\n}\n\n/**\n * The base implementation of `_.isArguments`.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n */\nfunction baseIsArguments(value) {\n  return isObjectLike(value) && baseGetTag(value) == argsTag;\n}\n\n/**\n * The base implementation of `_.isEqual` which supports partial comparisons\n * and tracks traversed objects.\n *\n * @private\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @param {boolean} bitmask The bitmask flags.\n *  1 - Unordered comparison\n *  2 - Partial comparison\n * @param {Function} [customizer] The function to customize comparisons.\n * @param {Object} [stack] Tracks traversed `value` and `other` objects.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n */\nfunction baseIsEqual(value, other, bitmask, customizer, stack) {\n  if (value === other) {\n    return true;\n  }\n  if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {\n    return value !== value && other !== other;\n  }\n  return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);\n}\n\n/**\n * A specialized version of `baseIsEqual` for arrays and objects which performs\n * deep comparisons and tracks traversed objects enabling objects with circular\n * references to be compared.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} [stack] Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {\n  var objIsArr = isArray(object),\n      othIsArr = isArray(other),\n      objTag = objIsArr ? arrayTag : getTag(object),\n      othTag = othIsArr ? arrayTag : getTag(other);\n\n  objTag = objTag == argsTag ? objectTag : objTag;\n  othTag = othTag == argsTag ? objectTag : othTag;\n\n  var objIsObj = objTag == objectTag,\n      othIsObj = othTag == objectTag,\n      isSameTag = objTag == othTag;\n\n  if (isSameTag && isBuffer(object)) {\n    if (!isBuffer(other)) {\n      return false;\n    }\n    objIsArr = true;\n    objIsObj = false;\n  }\n  if (isSameTag && !objIsObj) {\n    stack || (stack = new Stack);\n    return (objIsArr || isTypedArray(object))\n      ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)\n      : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);\n  }\n  if (!(bitmask & COMPARE_PARTIAL_FLAG)) {\n    var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),\n        othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');\n\n    if (objIsWrapped || othIsWrapped) {\n      var objUnwrapped = objIsWrapped ? object.value() : object,\n          othUnwrapped = othIsWrapped ? other.value() : other;\n\n      stack || (stack = new Stack);\n      return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);\n    }\n  }\n  if (!isSameTag) {\n    return false;\n  }\n  stack || (stack = new Stack);\n  return equalObjects(object, other, bitmask, customizer, equalFunc, stack);\n}\n\n/**\n * The base implementation of `_.isNative` without bad shim checks.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a native function,\n *  else `false`.\n */\nfunction baseIsNative(value) {\n  if (!isObject(value) || isMasked(value)) {\n    return false;\n  }\n  var pattern = isFunction(value) ? reIsNative : reIsHostCtor;\n  return pattern.test(toSource(value));\n}\n\n/**\n * The base implementation of `_.isTypedArray` without Node.js optimizations.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n */\nfunction baseIsTypedArray(value) {\n  return isObjectLike(value) &&\n    isLength(value.length) && !!typedArrayTags[baseGetTag(value)];\n}\n\n/**\n * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction baseKeys(object) {\n  if (!isPrototype(object)) {\n    return nativeKeys(object);\n  }\n  var result = [];\n  for (var key in Object(object)) {\n    if (hasOwnProperty.call(object, key) && key != 'constructor') {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * A specialized version of `baseIsEqualDeep` for arrays with support for\n * partial deep comparisons.\n *\n * @private\n * @param {Array} array The array to compare.\n * @param {Array} other The other array to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `array` and `other` objects.\n * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.\n */\nfunction equalArrays(array, other, bitmask, customizer, equalFunc, stack) {\n  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\n      arrLength = array.length,\n      othLength = other.length;\n\n  if (arrLength != othLength && !(isPartial && othLength > arrLength)) {\n    return false;\n  }\n  // Assume cyclic values are equal.\n  var stacked = stack.get(array);\n  if (stacked && stack.get(other)) {\n    return stacked == other;\n  }\n  var index = -1,\n      result = true,\n      seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;\n\n  stack.set(array, other);\n  stack.set(other, array);\n\n  // Ignore non-index properties.\n  while (++index < arrLength) {\n    var arrValue = array[index],\n        othValue = other[index];\n\n    if (customizer) {\n      var compared = isPartial\n        ? customizer(othValue, arrValue, index, other, array, stack)\n        : customizer(arrValue, othValue, index, array, other, stack);\n    }\n    if (compared !== undefined) {\n      if (compared) {\n        continue;\n      }\n      result = false;\n      break;\n    }\n    // Recursively compare arrays (susceptible to call stack limits).\n    if (seen) {\n      if (!arraySome(other, function(othValue, othIndex) {\n            if (!cacheHas(seen, othIndex) &&\n                (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {\n              return seen.push(othIndex);\n            }\n          })) {\n        result = false;\n        break;\n      }\n    } else if (!(\n          arrValue === othValue ||\n            equalFunc(arrValue, othValue, bitmask, customizer, stack)\n        )) {\n      result = false;\n      break;\n    }\n  }\n  stack['delete'](array);\n  stack['delete'](other);\n  return result;\n}\n\n/**\n * A specialized version of `baseIsEqualDeep` for comparing objects of\n * the same `toStringTag`.\n *\n * **Note:** This function only supports comparing values with tags of\n * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {string} tag The `toStringTag` of the objects to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {\n  switch (tag) {\n    case dataViewTag:\n      if ((object.byteLength != other.byteLength) ||\n          (object.byteOffset != other.byteOffset)) {\n        return false;\n      }\n      object = object.buffer;\n      other = other.buffer;\n\n    case arrayBufferTag:\n      if ((object.byteLength != other.byteLength) ||\n          !equalFunc(new Uint8Array(object), new Uint8Array(other))) {\n        return false;\n      }\n      return true;\n\n    case boolTag:\n    case dateTag:\n    case numberTag:\n      // Coerce booleans to `1` or `0` and dates to milliseconds.\n      // Invalid dates are coerced to `NaN`.\n      return eq(+object, +other);\n\n    case errorTag:\n      return object.name == other.name && object.message == other.message;\n\n    case regexpTag:\n    case stringTag:\n      // Coerce regexes to strings and treat strings, primitives and objects,\n      // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring\n      // for more details.\n      return object == (other + '');\n\n    case mapTag:\n      var convert = mapToArray;\n\n    case setTag:\n      var isPartial = bitmask & COMPARE_PARTIAL_FLAG;\n      convert || (convert = setToArray);\n\n      if (object.size != other.size && !isPartial) {\n        return false;\n      }\n      // Assume cyclic values are equal.\n      var stacked = stack.get(object);\n      if (stacked) {\n        return stacked == other;\n      }\n      bitmask |= COMPARE_UNORDERED_FLAG;\n\n      // Recursively compare objects (susceptible to call stack limits).\n      stack.set(object, other);\n      var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);\n      stack['delete'](object);\n      return result;\n\n    case symbolTag:\n      if (symbolValueOf) {\n        return symbolValueOf.call(object) == symbolValueOf.call(other);\n      }\n  }\n  return false;\n}\n\n/**\n * A specialized version of `baseIsEqualDeep` for objects with support for\n * partial deep comparisons.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction equalObjects(object, other, bitmask, customizer, equalFunc, stack) {\n  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\n      objProps = getAllKeys(object),\n      objLength = objProps.length,\n      othProps = getAllKeys(other),\n      othLength = othProps.length;\n\n  if (objLength != othLength && !isPartial) {\n    return false;\n  }\n  var index = objLength;\n  while (index--) {\n    var key = objProps[index];\n    if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {\n      return false;\n    }\n  }\n  // Assume cyclic values are equal.\n  var stacked = stack.get(object);\n  if (stacked && stack.get(other)) {\n    return stacked == other;\n  }\n  var result = true;\n  stack.set(object, other);\n  stack.set(other, object);\n\n  var skipCtor = isPartial;\n  while (++index < objLength) {\n    key = objProps[index];\n    var objValue = object[key],\n        othValue = other[key];\n\n    if (customizer) {\n      var compared = isPartial\n        ? customizer(othValue, objValue, key, other, object, stack)\n        : customizer(objValue, othValue, key, object, other, stack);\n    }\n    // Recursively compare objects (susceptible to call stack limits).\n    if (!(compared === undefined\n          ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))\n          : compared\n        )) {\n      result = false;\n      break;\n    }\n    skipCtor || (skipCtor = key == 'constructor');\n  }\n  if (result && !skipCtor) {\n    var objCtor = object.constructor,\n        othCtor = other.constructor;\n\n    // Non `Object` object instances with different constructors are not equal.\n    if (objCtor != othCtor &&\n        ('constructor' in object && 'constructor' in other) &&\n        !(typeof objCtor == 'function' && objCtor instanceof objCtor &&\n          typeof othCtor == 'function' && othCtor instanceof othCtor)) {\n      result = false;\n    }\n  }\n  stack['delete'](object);\n  stack['delete'](other);\n  return result;\n}\n\n/**\n * Creates an array of own enumerable property names and symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction getAllKeys(object) {\n  return baseGetAllKeys(object, keys, getSymbols);\n}\n\n/**\n * Gets the data for `map`.\n *\n * @private\n * @param {Object} map The map to query.\n * @param {string} key The reference key.\n * @returns {*} Returns the map data.\n */\nfunction getMapData(map, key) {\n  var data = map.__data__;\n  return isKeyable(key)\n    ? data[typeof key == 'string' ? 'string' : 'hash']\n    : data.map;\n}\n\n/**\n * Gets the native function at `key` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the method to get.\n * @returns {*} Returns the function if it's native, else `undefined`.\n */\nfunction getNative(object, key) {\n  var value = getValue(object, key);\n  return baseIsNative(value) ? value : undefined;\n}\n\n/**\n * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the raw `toStringTag`.\n */\nfunction getRawTag(value) {\n  var isOwn = hasOwnProperty.call(value, symToStringTag),\n      tag = value[symToStringTag];\n\n  try {\n    value[symToStringTag] = undefined;\n    var unmasked = true;\n  } catch (e) {}\n\n  var result = nativeObjectToString.call(value);\n  if (unmasked) {\n    if (isOwn) {\n      value[symToStringTag] = tag;\n    } else {\n      delete value[symToStringTag];\n    }\n  }\n  return result;\n}\n\n/**\n * Creates an array of the own enumerable symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of symbols.\n */\nvar getSymbols = !nativeGetSymbols ? stubArray : function(object) {\n  if (object == null) {\n    return [];\n  }\n  object = Object(object);\n  return arrayFilter(nativeGetSymbols(object), function(symbol) {\n    return propertyIsEnumerable.call(object, symbol);\n  });\n};\n\n/**\n * Gets the `toStringTag` of `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nvar getTag = baseGetTag;\n\n// Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.\nif ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||\n    (Map && getTag(new Map) != mapTag) ||\n    (Promise && getTag(Promise.resolve()) != promiseTag) ||\n    (Set && getTag(new Set) != setTag) ||\n    (WeakMap && getTag(new WeakMap) != weakMapTag)) {\n  getTag = function(value) {\n    var result = baseGetTag(value),\n        Ctor = result == objectTag ? value.constructor : undefined,\n        ctorString = Ctor ? toSource(Ctor) : '';\n\n    if (ctorString) {\n      switch (ctorString) {\n        case dataViewCtorString: return dataViewTag;\n        case mapCtorString: return mapTag;\n        case promiseCtorString: return promiseTag;\n        case setCtorString: return setTag;\n        case weakMapCtorString: return weakMapTag;\n      }\n    }\n    return result;\n  };\n}\n\n/**\n * Checks if `value` is a valid array-like index.\n *\n * @private\n * @param {*} value The value to check.\n * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n */\nfunction isIndex(value, length) {\n  length = length == null ? MAX_SAFE_INTEGER : length;\n  return !!length &&\n    (typeof value == 'number' || reIsUint.test(value)) &&\n    (value > -1 && value % 1 == 0 && value < length);\n}\n\n/**\n * Checks if `value` is suitable for use as unique object key.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n */\nfunction isKeyable(value) {\n  var type = typeof value;\n  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')\n    ? (value !== '__proto__')\n    : (value === null);\n}\n\n/**\n * Checks if `func` has its source masked.\n *\n * @private\n * @param {Function} func The function to check.\n * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n */\nfunction isMasked(func) {\n  return !!maskSrcKey && (maskSrcKey in func);\n}\n\n/**\n * Checks if `value` is likely a prototype object.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n */\nfunction isPrototype(value) {\n  var Ctor = value && value.constructor,\n      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;\n\n  return value === proto;\n}\n\n/**\n * Converts `value` to a string using `Object.prototype.toString`.\n *\n * @private\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n */\nfunction objectToString(value) {\n  return nativeObjectToString.call(value);\n}\n\n/**\n * Converts `func` to its source code.\n *\n * @private\n * @param {Function} func The function to convert.\n * @returns {string} Returns the source code.\n */\nfunction toSource(func) {\n  if (func != null) {\n    try {\n      return funcToString.call(func);\n    } catch (e) {}\n    try {\n      return (func + '');\n    } catch (e) {}\n  }\n  return '';\n}\n\n/**\n * Performs a\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * comparison between two values to determine if they are equivalent.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.eq(object, object);\n * // => true\n *\n * _.eq(object, other);\n * // => false\n *\n * _.eq('a', 'a');\n * // => true\n *\n * _.eq('a', Object('a'));\n * // => false\n *\n * _.eq(NaN, NaN);\n * // => true\n */\nfunction eq(value, other) {\n  return value === other || (value !== value && other !== other);\n}\n\n/**\n * Checks if `value` is likely an `arguments` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n *  else `false`.\n * @example\n *\n * _.isArguments(function() { return arguments; }());\n * // => true\n *\n * _.isArguments([1, 2, 3]);\n * // => false\n */\nvar isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {\n  return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&\n    !propertyIsEnumerable.call(value, 'callee');\n};\n\n/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\n/**\n * Checks if `value` is array-like. A value is considered array-like if it's\n * not a function and has a `value.length` that's an integer greater than or\n * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n * @example\n *\n * _.isArrayLike([1, 2, 3]);\n * // => true\n *\n * _.isArrayLike(document.body.children);\n * // => true\n *\n * _.isArrayLike('abc');\n * // => true\n *\n * _.isArrayLike(_.noop);\n * // => false\n */\nfunction isArrayLike(value) {\n  return value != null && isLength(value.length) && !isFunction(value);\n}\n\n/**\n * Checks if `value` is a buffer.\n *\n * @static\n * @memberOf _\n * @since 4.3.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.\n * @example\n *\n * _.isBuffer(new Buffer(2));\n * // => true\n *\n * _.isBuffer(new Uint8Array(2));\n * // => false\n */\nvar isBuffer = nativeIsBuffer || stubFalse;\n\n/**\n * Performs a deep comparison between two values to determine if they are\n * equivalent.\n *\n * **Note:** This method supports comparing arrays, array buffers, booleans,\n * date objects, error objects, maps, numbers, `Object` objects, regexes,\n * sets, strings, symbols, and typed arrays. `Object` objects are compared\n * by their own, not inherited, enumerable properties. Functions and DOM\n * nodes are compared by strict equality, i.e. `===`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.isEqual(object, other);\n * // => true\n *\n * object === other;\n * // => false\n */\nfunction isEqual(value, other) {\n  return baseIsEqual(value, other);\n}\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n  if (!isObject(value)) {\n    return false;\n  }\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in Safari 9 which returns 'object' for typed arrays and other constructors.\n  var tag = baseGetTag(value);\n  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;\n}\n\n/**\n * Checks if `value` is a valid array-like length.\n *\n * **Note:** This method is loosely based on\n * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n * @example\n *\n * _.isLength(3);\n * // => true\n *\n * _.isLength(Number.MIN_VALUE);\n * // => false\n *\n * _.isLength(Infinity);\n * // => false\n *\n * _.isLength('3');\n * // => false\n */\nfunction isLength(value) {\n  return typeof value == 'number' &&\n    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n}\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return value != null && (type == 'object' || type == 'function');\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return value != null && typeof value == 'object';\n}\n\n/**\n * Checks if `value` is classified as a typed array.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n * @example\n *\n * _.isTypedArray(new Uint8Array);\n * // => true\n *\n * _.isTypedArray([]);\n * // => false\n */\nvar isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;\n\n/**\n * Creates an array of the own enumerable property names of `object`.\n *\n * **Note:** Non-object values are coerced to objects. See the\n * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n * for more details.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.keys(new Foo);\n * // => ['a', 'b'] (iteration order is not guaranteed)\n *\n * _.keys('hi');\n * // => ['0', '1']\n */\nfunction keys(object) {\n  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);\n}\n\n/**\n * This method returns a new empty array.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {Array} Returns the new empty array.\n * @example\n *\n * var arrays = _.times(2, _.stubArray);\n *\n * console.log(arrays);\n * // => [[], []]\n *\n * console.log(arrays[0] === arrays[1]);\n * // => false\n */\nfunction stubArray() {\n  return [];\n}\n\n/**\n * This method returns `false`.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {boolean} Returns `false`.\n * @example\n *\n * _.times(2, _.stubFalse);\n * // => [false, false]\n */\nfunction stubFalse() {\n  return false;\n}\n\nmodule.exports = isEqual;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=expression.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst tslib_1 = require(\"tslib\");\ntslib_1.__exportStar(require(\"./expression\"), exports);\ntslib_1.__exportStar(require(\"./resolvedTimeline\"), exports);\ntslib_1.__exportStar(require(\"./resolver\"), exports);\ntslib_1.__exportStar(require(\"./state\"), exports);\ntslib_1.__exportStar(require(\"./timeline\"), exports);\ntslib_1.__exportStar(require(\"./types\"), exports);\n//# sourceMappingURL=index.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.EventType = void 0;\nvar EventType;\n(function (EventType) {\n    EventType[EventType[\"START\"] = 0] = \"START\";\n    EventType[EventType[\"END\"] = 1] = \"END\";\n    EventType[EventType[\"KEYFRAME\"] = 2] = \"KEYFRAME\";\n})(EventType = exports.EventType || (exports.EventType = {}));\n//# sourceMappingURL=resolvedTimeline.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=resolver.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=state.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=timeline.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=types.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.onCloseCleanup = exports.validateExpression = exports.wrapInnerExpressions = exports.simplifyExpression = exports.interpretExpression = exports.applyKeyframeContent = exports.validateReferenceString = exports.validateKeyframe = exports.validateObject = exports.validateTimeline = exports.getResolvedState = exports.resolveTimeline = void 0;\nconst tslib_1 = require(\"tslib\");\ntslib_1.__exportStar(require(\"./api\"), exports);\nconst StateHandler_1 = require(\"./resolver/StateHandler\");\nconst ExpressionHandler_1 = require(\"./resolver/ExpressionHandler\");\nconst ResolverHandler_1 = require(\"./resolver/ResolverHandler\");\nconst TimelineValidator_1 = require(\"./resolver/TimelineValidator\");\n/**\n * Resolves a timeline, i.e. resolves the references between objects\n * and calculates the absolute times for all objects in the timeline.\n */\nfunction resolveTimeline(timeline, options) {\n    const resolverInstance = new ResolverHandler_1.ResolverHandler(options);\n    return resolverInstance.resolveTimeline(timeline);\n}\nexports.resolveTimeline = resolveTimeline;\n/**\n * Retrieve the state for a certain point in time.\n * The state contains all objects that are active at that point in time.\n * @param resolvedTimeline\n * @param time\n * @param eventLimit\n */\nfunction getResolvedState(resolvedTimeline, time, eventLimit = 0) {\n    const stateHandler = new StateHandler_1.StateHandler();\n    return stateHandler.getState(resolvedTimeline, time, eventLimit);\n}\nexports.getResolvedState = getResolvedState;\n/**\n * Validates all objects in the timeline. Throws an error if something's wrong\n * @param timeline The timeline to validate\n * @param strict Set to true to enable some optional strict rules. Set this to true to increase future compatibility.\n */\nfunction validateTimeline(timeline, strict) {\n    const validator = new TimelineValidator_1.TimelineValidator();\n    validator.validateTimeline(timeline, strict);\n}\nexports.validateTimeline = validateTimeline;\n/**\n * Validates a Timeline-object. Throws an error if something's wrong\n * @param timeline The timeline to validate\n * @param strict Set to true to enable some optional strict rules. Set this to true to increase future compatibility.\n */\nfunction validateObject(obj, strict) {\n    const validator = new TimelineValidator_1.TimelineValidator();\n    validator.validateObject(obj, strict);\n}\nexports.validateObject = validateObject;\n/**\n * Validates a Timeline-keyframe. Throws an error if something's wrong\n * @param timeline The timeline to validate\n * @param strict Set to true to enable some optional strict rules. Set this to true to increase future compatibility.\n */\nfunction validateKeyframe(keyframe, strict) {\n    const validator = new TimelineValidator_1.TimelineValidator();\n    validator.validateKeyframe(keyframe, strict);\n}\nexports.validateKeyframe = validateKeyframe;\n/**\n * Validates a string that is used in Timeline as a reference (an id, a class or layer)\n * @param str The string to validate\n * @param strict Set to true to enable some optional strict rules. Set this to true to increase future compatibility.\n */\nfunction validateReferenceString(str, strict) {\n    TimelineValidator_1.TimelineValidator.validateReferenceString(str, strict);\n}\nexports.validateReferenceString = validateReferenceString;\n/**\n * Apply keyframe content onto its parent content.\n * The keyframe content is deeply-applied onto the parent content.\n * Note: This function mutates the parentContent.\n */\nfunction applyKeyframeContent(parentContent, keyframeContent) {\n    StateHandler_1.StateHandler.applyKeyframeContent(parentContent, keyframeContent);\n}\nexports.applyKeyframeContent = applyKeyframeContent;\nlet expressionHandler = undefined;\nfunction getExpressionHandler() {\n    if (!expressionHandler)\n        expressionHandler = new ExpressionHandler_1.ExpressionHandler(true);\n    return expressionHandler;\n}\nfunction interpretExpression(expression) {\n    return getExpressionHandler().interpretExpression(expression);\n}\nexports.interpretExpression = interpretExpression;\nfunction simplifyExpression(expr0) {\n    return getExpressionHandler().simplifyExpression(expr0);\n}\nexports.simplifyExpression = simplifyExpression;\nfunction wrapInnerExpressions(words) {\n    return getExpressionHandler().wrapInnerExpressions(words);\n}\nexports.wrapInnerExpressions = wrapInnerExpressions;\nfunction validateExpression(operatorList, expr0, breadcrumbs) {\n    return getExpressionHandler().validateExpression(operatorList, expr0, breadcrumbs);\n}\nexports.validateExpression = validateExpression;\n/**\n * If you have called any of the manual expression-functions, such as interpretExpression(),\n * you could call this to manually clean up an internal cache, to ensure your application quits cleanly.\n */\nfunction onCloseCleanup() {\n    if (expressionHandler)\n        expressionHandler.clearCache();\n}\nexports.onCloseCleanup = onCloseCleanup;\n//# sourceMappingURL=index.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.hashTimelineObject = exports.CacheHandler = void 0;\nconst lib_1 = require(\"./lib/lib\");\nconst performance_1 = require(\"./lib/performance\");\nconst reference_1 = require(\"./lib/reference\");\nconst timeline_1 = require(\"./lib/timeline\");\nclass CacheHandler {\n    constructor(cache, resolvedTimeline) {\n        this.resolvedTimeline = resolvedTimeline;\n        if (!cache.objHashes)\n            cache.objHashes = {};\n        if (!cache.objects)\n            cache.objects = {};\n        if (!cache.canBeUsed) {\n            // Reset the cache:\n            cache.objHashes = {};\n            cache.objects = {};\n            this.canUseIncomingCache = false;\n        }\n        else {\n            this.canUseIncomingCache = true;\n        }\n        // cache.canBeUsed will be set in this.persistData()\n        cache.canBeUsed = false;\n        this.cache = cache;\n    }\n    debug(...args) {\n        if (this.resolvedTimeline.options.debug)\n            console.log(...args);\n    }\n    determineChangedObjects() {\n        const toc = (0, performance_1.tic)('  cache.determineChangedObjects');\n        // Go through all new objects, and determine whether they have changed:\n        const allNewObjects = {};\n        const changedReferences = {};\n        const addChangedObject = (obj) => {\n            const references = this.getAllReferencesThisObjectAffects(obj);\n            for (const ref of references) {\n                changedReferences[ref] = true;\n            }\n        };\n        for (const obj of this.resolvedTimeline.objectsMap.values()) {\n            const oldHash = this.cache.objHashes[obj.id];\n            const newHash = hashTimelineObject(obj);\n            allNewObjects[obj.id] = true;\n            if (!oldHash)\n                this.debug(`Cache: Object \"${obj.id}\" is new`);\n            else if (oldHash !== newHash)\n                this.debug(`Cache: Object \"${obj.id}\" has changed`);\n            if (\n            // Object is new:\n            !oldHash ||\n                // Object has changed:\n                oldHash !== newHash) {\n                this.cache.objHashes[obj.id] = newHash;\n                addChangedObject(obj);\n                const oldObj = this.cache.objects[obj.id];\n                if (oldObj)\n                    addChangedObject(oldObj);\n            }\n            else {\n                // No timing-affecting changes detected\n                /* istanbul ignore if */\n                if (!oldHash)\n                    this.debug(`Cache: Object \"${obj.id}\" is similar`);\n                // Even though the timeline-properties hasn't changed,\n                // the content (and other properties) might have:\n                const oldObj = this.cache.objects[obj.id];\n                /* istanbul ignore if */\n                if (!oldObj) {\n                    console.error('oldHash', oldHash);\n                    console.error('ids', Object.keys(this.cache.objects));\n                    throw new Error(`Internal Error: obj \"${obj.id}\" not found in cache, even though hashes match!`);\n                }\n                this.cache.objects[obj.id] = {\n                    ...obj,\n                    resolved: oldObj.resolved,\n                };\n            }\n        }\n        if (this.canUseIncomingCache) {\n            // Go through all old hashes, removing the ones that doesn't exist anymore\n            for (const objId in this.cache.objects) {\n                if (!allNewObjects[objId]) {\n                    const obj = this.cache.objects[objId];\n                    delete this.cache.objHashes[objId];\n                    addChangedObject(obj);\n                }\n            }\n            // Invalidate objects, by gradually removing the invalidated ones from validObjects\n            // Prepare validObjects:\n            const validObjects = {};\n            for (const obj of this.resolvedTimeline.objectsMap.values()) {\n                validObjects[obj.id] = obj;\n            }\n            /** All references that depend on another reference (ie objects, classs or layers): */\n            const affectReferenceMap = {};\n            for (const obj of this.resolvedTimeline.objectsMap.values()) {\n                // Add everything that this object affects:\n                const cachedObj = this.cache.objects[obj.id];\n                let affectedReferences = this.getAllReferencesThisObjectAffects(obj);\n                if (cachedObj) {\n                    affectedReferences = (0, reference_1.joinReferences)(affectedReferences, this.getAllReferencesThisObjectAffects(cachedObj));\n                }\n                for (let i = 0; i < affectedReferences.length; i++) {\n                    const ref = affectedReferences[i];\n                    const objRef = `#${obj.id}`;\n                    if (ref !== objRef) {\n                        if (!affectReferenceMap[objRef])\n                            affectReferenceMap[objRef] = [];\n                        affectReferenceMap[objRef].push(ref);\n                    }\n                }\n                // Add everything that this object is affected by:\n                if (changedReferences[`#${obj.id}`]) {\n                    // The object is directly said to be invalid, no need to add it to referencingObjects,\n                    // since it'll be easily invalidated anyway later\n                }\n                else {\n                    // Note: we only have to check for the OLD object, since if the old and the new object differs,\n                    // that would mean it'll be directly invalidated anyway.\n                    if (cachedObj) {\n                        // Fetch all references for the object from the last time it was resolved.\n                        // Note: This can be done, since _if_ the object was changed in any way since last resolve\n                        // it'll be invalidated anyway\n                        const dependOnReferences = cachedObj.resolved.directReferences;\n                        for (let i = 0; i < dependOnReferences.length; i++) {\n                            const ref = dependOnReferences[i];\n                            if (!affectReferenceMap[ref])\n                                affectReferenceMap[ref] = [];\n                            affectReferenceMap[ref].push(`#${obj.id}`);\n                        }\n                    }\n                }\n            }\n            // Invalidate all changed objects, and recursively invalidate all objects that reference those objects:\n            const handledReferences = {};\n            for (const reference of Object.keys(changedReferences)) {\n                this.invalidateObjectsWithReference(handledReferences, reference, affectReferenceMap, validObjects);\n            }\n            // The objects that are left in validObjects at this point are still valid.\n            // We can reuse the old resolving for those:\n            for (const obj of Object.values(validObjects)) {\n                if (!this.cache.objects[obj.id])\n                    /* istanbul ignore next */\n                    throw new Error(`Something went wrong: \"${obj.id}\" does not exist in cache.resolvedTimeline.objects`);\n                this.resolvedTimeline.objectsMap.set(obj.id, this.cache.objects[obj.id]);\n            }\n        }\n        toc();\n    }\n    persistData() {\n        const toc = (0, performance_1.tic)('  cache.persistData');\n        if (this.resolvedTimeline.resolveError) {\n            // If there was a resolve error, clear the cache:\n            this.cache.objHashes = {};\n            this.cache.objects = {};\n            this.cache.canBeUsed = false;\n        }\n        else {\n            this.cache.objects = (0, lib_1.mapToObject)(this.resolvedTimeline.objectsMap);\n            this.cache.canBeUsed = true;\n        }\n        toc();\n    }\n    getAllReferencesThisObjectAffects(newObj) {\n        const references = [`#${newObj.id}`];\n        if (newObj.classes) {\n            for (const className of newObj.classes) {\n                references.push(`.${className}`);\n            }\n        }\n        if ((0, timeline_1.objHasLayer)(newObj))\n            references.push(`$${newObj.layer}`);\n        if (newObj.children) {\n            for (const child of newObj.children) {\n                references.push(`#${child.id}`);\n            }\n        }\n        return references;\n    }\n    /** Invalidate all changed objects, and recursively invalidate all objects that reference those objects */\n    invalidateObjectsWithReference(handledReferences, reference, affectReferenceMap, validObjects) {\n        if (handledReferences[reference])\n            return; // to avoid infinite loops\n        handledReferences[reference] = true;\n        if ((0, reference_1.isObjectReference)(reference)) {\n            const objId = (0, reference_1.getRefObjectId)(reference);\n            if (validObjects[objId]) {\n                delete validObjects[objId];\n            }\n        }\n        // Invalidate all objects that depend on any of the references that this reference affects:\n        const affectedReferences = affectReferenceMap[reference];\n        if (affectedReferences) {\n            for (let i = 0; i < affectedReferences.length; i++) {\n                const referencingReference = affectedReferences[i];\n                this.invalidateObjectsWithReference(handledReferences, referencingReference, affectReferenceMap, validObjects);\n            }\n        }\n    }\n}\nexports.CacheHandler = CacheHandler;\n/** Return a \"hash-string\" which changes whenever anything that affects timing of a timeline-object has changed. */\nfunction hashTimelineObject(obj) {\n    /*\n    Note: The following properties are ignored, as they don't affect timing or resolving:\n     * id\n     * children\n     * keyframes\n     * isGroup\n     * content\n     */\n    return `${JSON.stringify(obj.enable)},${+!!obj.disabled},${obj.priority}',${obj.resolved.parentId},${+obj.resolved\n        .isKeyframe},${obj.classes ? obj.classes.join('.') : ''},${obj.layer},${+!!obj.seamless}`;\n}\nexports.hashTimelineObject = hashTimelineObject;\n//# sourceMappingURL=CacheHandler.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ExpressionHandler = exports.REGEXP_OPERATORS = exports.OPERATORS = void 0;\nconst lib_1 = require(\"./lib/lib\");\nconst cache_1 = require(\"./lib/cache\");\nconst expression_1 = require(\"./lib/expression\");\nexports.OPERATORS = ['&', '|', '+', '-', '*', '/', '%', '!'];\nexports.REGEXP_OPERATORS = new RegExp('([' + exports.OPERATORS.map((o) => '\\\\' + o).join('') + '\\\\(\\\\)])', 'g');\nclass ExpressionHandler {\n    constructor(autoClearCache, skipValidation) {\n        this.skipValidation = skipValidation;\n        this.cache = new cache_1.Cache(autoClearCache);\n    }\n    interpretExpression(expression) {\n        if ((0, expression_1.isNumericExpr)(expression)) {\n            return parseFloat(expression);\n        }\n        else if (typeof expression === 'string') {\n            const expressionString = expression;\n            return this.cache.cacheResult(expressionString, () => {\n                const expr = expressionString.replace(exports.REGEXP_OPERATORS, ' $1 '); // Make sure there's a space between every operator & operand\n                const words = (0, lib_1.compact)(expr.split(' '));\n                if (words.length === 0)\n                    return null; // empty expression\n                // Fix special case: a + - b\n                for (let i = words.length - 2; i >= 1; i--) {\n                    if ((words[i] === '-' || words[i] === '+') && wordIsOperator(exports.OPERATORS, words[i - 1])) {\n                        words[i] = words[i] + words[i + 1];\n                        words.splice(i + 1, 1);\n                    }\n                }\n                const innerExpression = this.wrapInnerExpressions(words);\n                if (innerExpression.rest.length)\n                    throw new Error(`interpretExpression: syntax error: parentheses don't add up in \"${expr}\".`);\n                if (innerExpression.inner.length % 2 !== 1) {\n                    throw new Error(`interpretExpression: operands & operators don't add up: \"${innerExpression.inner.join(' ')}\".`);\n                }\n                const returnExpression = this.words2Expression(exports.OPERATORS, innerExpression.inner);\n                if (!this.skipValidation)\n                    this.validateExpression(exports.OPERATORS, returnExpression);\n                return returnExpression;\n            }, 60 * 60 * 1000 // 1 hour\n            );\n        }\n        else {\n            return expression;\n        }\n    }\n    /** Try to simplify an expression, this includes:\n     * * Combine constant operands, using arithmetic operators\n     * ...more to come?\n     */\n    simplifyExpression(expr0) {\n        const expr = typeof expr0 === 'string' ? this.interpretExpression(expr0) : expr0;\n        if (!expr)\n            return expr;\n        if (isExpressionObject(expr)) {\n            const l = this.simplifyExpression(expr.l);\n            const o = expr.o;\n            const r = this.simplifyExpression(expr.r);\n            if (typeof l === 'number' && typeof r === 'number') {\n                // The operands can be combined:\n                switch (o) {\n                    case '+':\n                        return l + r;\n                    case '-':\n                        return l - r;\n                    case '*':\n                        return l * r;\n                    case '/':\n                        return l / r;\n                    case '%':\n                        return l % r;\n                    default:\n                        return { l, o, r };\n                }\n            }\n            return { l, o, r };\n        }\n        return expr;\n    }\n    // Turns ['a', '(', 'b', 'c', ')'] into ['a', ['b', 'c']]\n    // or ['a', '&', '!', 'b'] into ['a', '&', ['', '!', 'b']]\n    wrapInnerExpressions(words) {\n        for (let i = 0; i < words.length; i++) {\n            switch (words[i]) {\n                case '(': {\n                    const tmp = this.wrapInnerExpressions(words.slice(i + 1));\n                    // insert inner expression and remove tha\n                    words[i] = tmp.inner;\n                    words.splice(i + 1, 99999, ...tmp.rest);\n                    break;\n                }\n                case ')':\n                    return {\n                        inner: words.slice(0, i),\n                        rest: words.slice(i + 1),\n                    };\n                case '!': {\n                    const tmp = this.wrapInnerExpressions(words.slice(i + 1));\n                    // insert inner expression after the '!'\n                    words[i] = ['', '!'].concat(tmp.inner);\n                    words.splice(i + 1, 99999, ...tmp.rest);\n                    break;\n                }\n            }\n        }\n        return {\n            inner: words,\n            rest: [],\n        };\n    }\n    /** Validates an expression. Returns true on success, throws error if not */\n    validateExpression(operatorList, expr0, breadcrumbs) {\n        if (!breadcrumbs)\n            breadcrumbs = 'ROOT';\n        if ((0, lib_1.isObject)(expr0) && !(0, lib_1.isArray)(expr0)) {\n            const expr = expr0;\n            if (expr.l === undefined)\n                throw new Error(`validateExpression: ${breadcrumbs}.l missing in ${JSON.stringify(expr)}`);\n            if (expr.o === undefined)\n                throw new Error(`validateExpression: ${breadcrumbs}.o missing in ${JSON.stringify(expr)}`);\n            if (expr.r === undefined)\n                throw new Error(`validateExpression: ${breadcrumbs}.r missing in ${JSON.stringify(expr)}`);\n            if (typeof expr.o !== 'string')\n                throw new Error(`validateExpression: ${breadcrumbs}.o not a string`);\n            if (!wordIsOperator(operatorList, expr.o))\n                throw new Error(breadcrumbs + '.o not valid: \"' + expr.o + '\"');\n            return (this.validateExpression(operatorList, expr.l, breadcrumbs + '.l') &&\n                this.validateExpression(operatorList, expr.r, breadcrumbs + '.r'));\n        }\n        else if (expr0 !== null && typeof expr0 !== 'string' && typeof expr0 !== 'number') {\n            throw new Error(`validateExpression: ${breadcrumbs} is of invalid type`);\n        }\n        return true;\n    }\n    clearCache() {\n        this.cache.clear();\n    }\n    words2Expression(operatorList, words) {\n        /* istanbul ignore if */\n        if (!words?.length)\n            throw new Error('words2Expression: syntax error: unbalanced expression');\n        while (words.length === 1 && words[0] !== null && (0, lib_1.isArray)(words[0]))\n            words = words[0];\n        if (words.length === 1)\n            return words[0];\n        // Find the operator with the highest priority:\n        let operatorI = -1;\n        for (let i = 0; i < operatorList.length; i++) {\n            const operator = operatorList[i];\n            if (operatorI === -1) {\n                operatorI = words.lastIndexOf(operator);\n            }\n        }\n        if (operatorI !== -1) {\n            const l = words.slice(0, operatorI);\n            const r = words.slice(operatorI + 1);\n            const expr = {\n                l: this.words2Expression(operatorList, l),\n                o: words[operatorI],\n                r: this.words2Expression(operatorList, r),\n            };\n            return expr;\n        }\n        else\n            throw new Error('words2Expression: syntax error: operator not found: \"' + words.join(' ') + '\"');\n    }\n}\nexports.ExpressionHandler = ExpressionHandler;\nfunction isExpressionObject(expr) {\n    return (typeof expr === 'object' &&\n        expr !== null &&\n        expr.l !== undefined &&\n        expr.o !== undefined &&\n        expr.r !== undefined);\n}\nfunction wordIsOperator(operatorList, word) {\n    if (operatorList.indexOf(word) !== -1)\n        return true;\n    return false;\n}\n//# sourceMappingURL=ExpressionHandler.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.InstanceHandler = void 0;\nconst cap_1 = require(\"./lib/cap\");\nconst event_1 = require(\"./lib/event\");\nconst instance_1 = require(\"./lib/instance\");\nconst lib_1 = require(\"./lib/lib\");\nconst reference_1 = require(\"./lib/reference\");\nclass InstanceHandler {\n    constructor(resolvedTimeline) {\n        this.resolvedTimeline = resolvedTimeline;\n    }\n    invertInstances(instances) {\n        if (instances.length) {\n            instances = this.cleanInstances(instances, true, true);\n            const invertedInstances = [];\n            if (instances[0].start !== 0) {\n                invertedInstances.push({\n                    id: this.resolvedTimeline.getInstanceId(),\n                    isFirst: true,\n                    start: 0,\n                    end: null,\n                    references: (0, reference_1.joinReferences)(instances[0].references, `@${instances[0].id}`),\n                });\n            }\n            for (let i = 0; i < instances.length; i++) {\n                const instance = instances[i];\n                const lastInstance = (0, lib_1.last)(invertedInstances);\n                if (lastInstance) {\n                    lastInstance.end = instance.start;\n                }\n                if (instance.end !== null) {\n                    invertedInstances.push({\n                        id: this.resolvedTimeline.getInstanceId(),\n                        start: instance.end,\n                        end: null,\n                        references: (0, reference_1.joinReferences)(instance.references, `@${instance.id}`),\n                        caps: instance.caps,\n                    });\n                }\n            }\n            return invertedInstances;\n        }\n        else {\n            return [\n                {\n                    id: this.resolvedTimeline.getInstanceId(),\n                    isFirst: true,\n                    start: 0,\n                    end: null,\n                    references: [],\n                },\n            ];\n        }\n    }\n    /**\n     * Converts a list of events into a list of instances.\n     * @param events The list of start- and end- events\n     * @param allowMerge If true, will merge instances that overlap into one.\n     * @param allowZeroGaps If true, allows zero-length gaps between instances. If false, will combine the two into one instance.\n     * @param omitOriginalStartEnd Of true, will not keep .originalStart and .originalEnd of the instances\n     */\n    convertEventsToInstances(events, allowMerge, allowZeroGaps = false, omitOriginalStartEnd = false) {\n        (0, event_1.sortEvents)(events);\n        const activeInstances = {};\n        let activeInstanceId = null;\n        let previousActive = false;\n        const negativeInstances = {};\n        let previousNegative = false;\n        let negativeInstanceId = null;\n        const returnInstances = [];\n        for (let i = 0; i < events.length; i++) {\n            const event = events[i];\n            const eventId = event.data.id ?? event.data.instance.id;\n            const lastInstance = returnInstances[returnInstances.length - 1];\n            if (event.value) {\n                // Start-event\n                activeInstances[eventId] = event;\n                delete negativeInstances[eventId];\n            }\n            else {\n                // End-event\n                delete activeInstances[eventId];\n                negativeInstances[eventId] = event;\n            }\n            if (Object.keys(activeInstances).length) {\n                // There is an active instance\n                if (!allowMerge && !allowZeroGaps && lastInstance && previousNegative) {\n                    // There is previously an inActive (negative) instance\n                    lastInstance.start = event.time;\n                }\n                else {\n                    const o = this.handleActiveInstances(event, lastInstance, activeInstanceId, eventId, activeInstances, allowMerge, allowZeroGaps);\n                    activeInstanceId = o.activeInstanceId;\n                    if (o.returnInstance) {\n                        let newInstance = o.returnInstance;\n                        if (omitOriginalStartEnd) {\n                            newInstance = { ...newInstance };\n                            newInstance.originalStart = undefined;\n                            newInstance.originalEnd = undefined;\n                        }\n                        returnInstances.push(newInstance);\n                    }\n                }\n                previousActive = true;\n                previousNegative = false;\n            }\n            else {\n                // No instances are active\n                if (lastInstance && previousActive) {\n                    lastInstance.end = event.time;\n                }\n                else if (Object.keys(negativeInstances).length && !event.data.notANegativeInstance) {\n                    // There is a negative instance running\n                    const o = this.handleActiveInstances(event, lastInstance, negativeInstanceId, eventId, negativeInstances, allowMerge, allowZeroGaps);\n                    negativeInstanceId = o.activeInstanceId;\n                    if (o.returnInstance) {\n                        const newInstance = {\n                            ...o.returnInstance,\n                            start: o.returnInstance.end ?? 0,\n                            end: o.returnInstance.start,\n                        };\n                        if (omitOriginalStartEnd) {\n                            newInstance.originalStart = undefined;\n                            newInstance.originalEnd = undefined;\n                        }\n                        returnInstances.push(newInstance);\n                    }\n                    previousNegative = true;\n                }\n                previousActive = false;\n            }\n        }\n        for (const instance of returnInstances) {\n            if (instance.end !== null && instance.end < instance.start) {\n                // Don't allow negative durations, set it to zero instead:\n                instance.end = instance.start;\n            }\n        }\n        return returnInstances;\n    }\n    handleActiveInstances(event, lastInstance, activeInstanceId, eventId, activeInstances, allowMerge, allowZeroGaps = false) {\n        let returnInstance = null;\n        if (!allowMerge &&\n            event.value &&\n            lastInstance &&\n            lastInstance.end === null &&\n            activeInstanceId !== null &&\n            activeInstanceId !== eventId) {\n            // Start a new instance:\n            lastInstance.end = event.time;\n            returnInstance = {\n                id: this.resolvedTimeline.getInstanceId(),\n                start: event.time,\n                end: null,\n                references: event.references,\n                originalEnd: event.data.instance.originalEnd,\n                originalStart: event.data.instance.originalStart,\n            };\n            activeInstanceId = eventId;\n        }\n        else if (!allowMerge && !event.value && lastInstance && activeInstanceId === eventId) {\n            // The active instance stopped playing, but another is still playing\n            const latestInstance = (0, lib_1.reduceObj)(activeInstances, (memo, instanceEvent, id) => {\n                if (memo === null || memo.event.time < instanceEvent.time) {\n                    return {\n                        event: instanceEvent,\n                        id: id,\n                    };\n                }\n                return memo;\n            }, null);\n            if (latestInstance) {\n                // Restart that instance now:\n                lastInstance.end = event.time;\n                returnInstance = {\n                    id: (0, instance_1.isInstanceId)(eventId)\n                        ? `${eventId}_${this.resolvedTimeline.getInstanceId()}`\n                        : `@${eventId}_${this.resolvedTimeline.getInstanceId()}`,\n                    start: event.time,\n                    end: null,\n                    references: latestInstance.event.references,\n                    originalEnd: event.data.instance.originalEnd,\n                    originalStart: event.data.instance.originalStart,\n                };\n                activeInstanceId = latestInstance.id;\n            }\n        }\n        else if (allowMerge && !allowZeroGaps && lastInstance && lastInstance.end === event.time) {\n            // The previously running ended just now\n            // resume previous instance:\n            lastInstance.end = null;\n            lastInstance.references = (0, reference_1.joinReferences)(lastInstance.references, event.references);\n            (0, cap_1.addCapsToResuming)(lastInstance, event.data.instance.caps);\n        }\n        else if (!lastInstance || lastInstance.end !== null) {\n            // There is no previously running instance\n            // Start a new instance:\n            returnInstance = {\n                id: (0, instance_1.isInstanceId)(eventId) ? eventId : `@${eventId}`,\n                start: event.time,\n                end: null,\n                references: event.references,\n                caps: event.data.instance.caps,\n                originalEnd: event.data.instance.originalEnd,\n                originalStart: event.data.instance.originalStart,\n            };\n            activeInstanceId = eventId;\n        }\n        else {\n            // There is already a running instance\n            lastInstance.references = (0, reference_1.joinReferences)(lastInstance.references, event.references);\n            (0, cap_1.addCapsToResuming)(lastInstance, event.data.instance.caps);\n        }\n        if (lastInstance?.caps && !lastInstance.caps.length)\n            delete lastInstance.caps;\n        if (returnInstance &&\n            lastInstance &&\n            lastInstance.start === lastInstance.end &&\n            lastInstance.end === returnInstance.start) {\n            // replace the previous zero-length with this one instead\n            lastInstance.id = returnInstance.id;\n            lastInstance.start = returnInstance.start;\n            lastInstance.end = returnInstance.end;\n            lastInstance.references = returnInstance.references;\n            lastInstance.caps = returnInstance.caps;\n            lastInstance.originalStart = returnInstance.originalStart;\n            lastInstance.originalEnd = returnInstance.originalEnd;\n            returnInstance = null;\n        }\n        return {\n            activeInstanceId,\n            returnInstance,\n        };\n    }\n    /**\n     * Clean up instances, join overlapping etc..\n     * @param instances\n     */\n    cleanInstances(instances, allowMerge, allowZeroGaps = false) {\n        // First, optimize for certain common situations:\n        if (instances.length === 0)\n            return [];\n        if (instances.length === 1)\n            return instances;\n        const events = [];\n        for (const instance of instances) {\n            events.push({\n                time: instance.start,\n                value: true,\n                data: { instance: instance },\n                references: instance.references,\n            });\n            if (instance.end !== null) {\n                events.push({\n                    time: instance.end,\n                    value: false,\n                    data: { instance: instance },\n                    references: instance.references,\n                });\n            }\n        }\n        return this.convertEventsToInstances(events, allowMerge, allowZeroGaps);\n    }\n    /**\n     * Cap instances so that they are within their parentInstances\n     * @param instances\n     * @param cappingInstances\n     */\n    capInstances(instances, cappingInstances, allowZeroGaps = true) {\n        if ((0, reference_1.isReference)(cappingInstances) || cappingInstances === null)\n            return instances;\n        let returnInstances = [];\n        for (let i = 0; i < instances.length; i++) {\n            const instanceOrg = instances[i];\n            const addedInstanceTimes = new Set();\n            for (let j = 0; j < cappingInstances.length; j++) {\n                const capInstance = cappingInstances[j];\n                // First, check if the instance crosses the parent at all:\n                if (instanceOrg.start <= (capInstance.end ?? Infinity) &&\n                    (instanceOrg.end ?? Infinity) >= capInstance.start) {\n                    const instance = this.capInstance(instanceOrg, capInstance);\n                    if (instance.start >= capInstance.start &&\n                        (instance.end ?? Infinity) <= (capInstance.end ?? Infinity)) {\n                        // The instance is within the parent\n                        if (instance.start === instance.end && addedInstanceTimes.has(instance.start)) {\n                            // Don't add zero-length instances if there are already is instances covering that time\n                        }\n                        else {\n                            instance.references = (0, reference_1.joinReferences)(instance.references, capInstance.references);\n                            returnInstances.push(instance);\n                            addedInstanceTimes.add(instance.start);\n                            if (instance.end)\n                                addedInstanceTimes.add(instance.end);\n                        }\n                    }\n                }\n            }\n        }\n        returnInstances.sort((a, b) => a.start - b.start);\n        // Ensure unique ids:\n        const ids = {};\n        for (const instance of returnInstances) {\n            // tslint:disable-next-line\n            if (ids[instance.id] !== undefined) {\n                instance.id = `${instance.id}${++ids[instance.id]}`;\n            }\n            else {\n                ids[instance.id] = 0;\n            }\n        }\n        // Clean up the instances, to remove duplicates\n        returnInstances = this.cleanInstances(returnInstances, true, allowZeroGaps);\n        return returnInstances;\n    }\n    capInstance(instanceOrg, capInstance) {\n        const instance = { ...instanceOrg };\n        // Cap start\n        if (instance.start < capInstance.start) {\n            this.setInstanceStartTime(instance, capInstance.start);\n        }\n        // Cap end\n        if ((instance.end ?? Infinity) > (capInstance.end ?? Infinity)) {\n            this.setInstanceEndTime(instance, capInstance.end);\n        }\n        return instance;\n    }\n    setInstanceEndTime(instance, endTime) {\n        instance.originalEnd = instance.originalEnd ?? instance.end;\n        instance.end = endTime;\n    }\n    setInstanceStartTime(instance, startTime) {\n        instance.originalStart = instance.originalStart ?? instance.start;\n        instance.start = startTime;\n    }\n    applyRepeatingInstances(instances, repeatTime0) {\n        if (repeatTime0 === null || !repeatTime0.value)\n            return instances;\n        const options = this.resolvedTimeline.options;\n        const repeatTime = repeatTime0.value;\n        const repeatedInstances = [];\n        for (const instance of instances) {\n            let startTime = Math.max(options.time - ((options.time - instance.start) % repeatTime), instance.start);\n            let endTime = instance.end === null ? null : instance.end + (startTime - instance.start);\n            const cap = (instance.caps\n                ? instance.caps.find((cap) => instance.references.indexOf(`@${cap.id}`) !== -1)\n                : null) ?? null;\n            const limit = options.limitCount ?? 2;\n            for (let i = 0; i < limit; i++) {\n                if (options.limitTime && startTime >= options.limitTime)\n                    break;\n                const cappedStartTime = cap ? Math.max(cap.start, startTime) : startTime;\n                const cappedEndTime = cap && cap.end !== null && endTime !== null ? Math.min(cap.end, endTime) : endTime;\n                if ((cappedEndTime ?? Infinity) > cappedStartTime) {\n                    repeatedInstances.push({\n                        id: this.resolvedTimeline.getInstanceId(),\n                        start: cappedStartTime,\n                        end: cappedEndTime,\n                        references: (0, reference_1.joinReferences)(instance.references, repeatTime0.references, `@${instance.id}`),\n                    });\n                }\n                startTime += repeatTime;\n                if (endTime !== null)\n                    endTime += repeatTime;\n            }\n        }\n        return this.cleanInstances(repeatedInstances, false);\n    }\n}\nexports.InstanceHandler = InstanceHandler;\n//# sourceMappingURL=InstanceHandler.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.LayerStateHandler = void 0;\nconst lib_1 = require(\"./lib/lib\");\nconst performance_1 = require(\"./lib/performance\");\n/**\n * LayerStateHandler instances are short-lived.\n * They are initialized, .resolveConflicts() is called and then discarded\n */\nclass LayerStateHandler {\n    constructor(resolvedTimeline, instance, layer) {\n        this.resolvedTimeline = resolvedTimeline;\n        this.instance = instance;\n        this.layer = layer;\n        this.pointsInTime = {};\n        this.objectsOnLayer = [];\n        this.objectIdsOnLayer = this.resolvedTimeline.getLayerObjects(layer);\n    }\n    debug(...args) {\n        if (this.resolvedTimeline.options.debug)\n            console.log(...args);\n    }\n    /** Resolve conflicts between objects on the layer. */\n    resolveConflicts() {\n        const toc = (0, performance_1.tic)('       resolveConflicts');\n        /*\n            This algoritm basically works like this:\n\n            1. Collect all instances start- and end-times as points-of-interest\n            2. Sweep through the points-of-interest and determine which instance is the \"winning one\" at every point in time\n        */\n        // Populate this.objectsOnLayer:\n        for (const objId of this.objectIdsOnLayer) {\n            this.objectsOnLayer.push(this.resolvedTimeline.getObject(objId));\n        }\n        // Fast-path: if there's only one object on the layer, it can't conflict with anything\n        if (this.objectsOnLayer.length === 1) {\n            for (const obj of this.objectsOnLayer) {\n                obj.resolved.resolvedConflicts = true;\n                for (const instance of obj.resolved.instances) {\n                    instance.originalStart = instance.originalStart ?? instance.start;\n                    instance.originalEnd = instance.originalEnd ?? instance.end;\n                }\n            }\n            return;\n        }\n        this.debug(`======= resolveConflicts \"${this.layer}\" (${this.objectsOnLayer.length} objects)`);\n        // Sort to make sure parent groups are evaluated before their children:\n        this.objectsOnLayer.sort(compareObjectsOnLayer);\n        // Step 1: Collect all points-of-interest (which points in time we want to evaluate)\n        // and which instances that are interesting\n        for (const obj of this.objectsOnLayer) {\n            // Notes:\n            // Since keyframes can't be placed on a layer, we assume that the object is not a keyframe\n            // We also assume that the object has a layer\n            for (const instance of obj.resolved.instances) {\n                const timeEvents = [];\n                timeEvents.push({ time: instance.start, enable: true });\n                if (instance.end)\n                    timeEvents.push({ time: instance.end, enable: false });\n                // Save a reference to this instance on all points in time that could affect it:\n                for (const timeEvent of timeEvents) {\n                    if (timeEvent.enable) {\n                        this.addPointInTime(timeEvent.time, 'start', obj, instance);\n                    }\n                    else {\n                        this.addPointInTime(timeEvent.time, 'end', obj, instance);\n                    }\n                }\n            }\n            obj.resolved.resolvedConflicts = true;\n            obj.resolved.instances.splice(0); // clear the instances, so new instances can be re-added later\n        }\n        // Step 2: Resolve the state for the points-of-interest\n        // This is done by sweeping the points-of-interest chronologically,\n        // determining the state for every point in time by adding & removing objects from aspiringInstances\n        // Then sorting it to determine who takes precedence\n        let currentState = undefined;\n        const activeObjIds = {};\n        /** The objects in aspiringInstances  */\n        let aspiringInstances = [];\n        const times = Object.keys(this.pointsInTime)\n            .map((time) => parseFloat(time))\n            // Sort chronologically:\n            .sort((a, b) => a - b);\n        // Iterate through all points-of-interest times:\n        for (const time of times) {\n            this.debug(`-------------- time: ${time}`);\n            /** A set of identifiers for which instance-events have been check at this point in time. Used to avoid looking at the same object twice. */\n            const checkedThisTime = new Set();\n            /** List of the instances to check at this point in time. */\n            const instancesToCheck = this.pointsInTime[time];\n            instancesToCheck.sort(compareInstancesToCheck);\n            for (let j = 0; j < instancesToCheck.length; j++) {\n                const o = instancesToCheck[j];\n                const obj = o.obj;\n                const instance = o.instance;\n                let toBeEnabled;\n                if (instance.start === time && instance.end === time) {\n                    // Handle zero-length instances:\n                    if (o.instanceEvent === 'start')\n                        toBeEnabled = true; // Start a zero-length instance\n                    else\n                        toBeEnabled = false; // End a zero-length instance\n                }\n                else {\n                    toBeEnabled = (instance.start || 0) <= time && (instance.end ?? Infinity) > time;\n                }\n                const identifier = `${obj.id}_${instance.id}_${o.instanceEvent}`;\n                if (!checkedThisTime.has(identifier)) {\n                    // Only check each object and event-type once for every point in time\n                    checkedThisTime.add(identifier);\n                    if (toBeEnabled) {\n                        // The instance wants to be enabled (is starting)\n                        // Add to aspiringInstances:\n                        aspiringInstances.push({ obj, instance });\n                    }\n                    else {\n                        // The instance doesn't want to be enabled (is ending)\n                        // Remove from aspiringInstances:\n                        aspiringInstances = removeFromAspiringInstances(aspiringInstances, obj.id);\n                    }\n                    // Sort the instances on layer to determine who is the active one:\n                    aspiringInstances.sort(compareAspiringInstances);\n                    // At this point, the first instance in aspiringInstances is the active one.\n                    const instanceOnTopOfLayer = aspiringInstances[0];\n                    // Update current state:\n                    const prevObjInstance = currentState;\n                    const replaceOld = instanceOnTopOfLayer &&\n                        (!prevObjInstance ||\n                            prevObjInstance.id !== instanceOnTopOfLayer.obj.id ||\n                            !prevObjInstance.instance.id.startsWith(`${instanceOnTopOfLayer.instance.id}`));\n                    const removeOld = !instanceOnTopOfLayer && prevObjInstance;\n                    if (replaceOld || removeOld) {\n                        if (prevObjInstance) {\n                            // Cap the old instance, so it'll end at this point in time:\n                            this.instance.setInstanceEndTime(prevObjInstance.instance, time);\n                            this.debug(`${prevObjInstance.id} stop`);\n                            // Update activeObjIds:\n                            delete activeObjIds[prevObjInstance.id];\n                        }\n                    }\n                    if (replaceOld) {\n                        // Set the new objectInstance to be the current one:\n                        const currentObj = instanceOnTopOfLayer.obj;\n                        this.debug(`${currentObj.id} play`);\n                        const newInstance = {\n                            ...instanceOnTopOfLayer.instance,\n                            // We're setting new start & end times so they match up with the state:\n                            start: time,\n                            end: null,\n                            fromInstanceId: instanceOnTopOfLayer.instance.id,\n                            originalEnd: instanceOnTopOfLayer.instance.originalEnd ?? instanceOnTopOfLayer.instance.end,\n                            originalStart: instanceOnTopOfLayer.instance.originalStart ?? instanceOnTopOfLayer.instance.start,\n                        };\n                        // Make the instance id unique:\n                        for (let i = 0; i < currentObj.resolved.instances.length; i++) {\n                            if (currentObj.resolved.instances[i].id === newInstance.id) {\n                                newInstance.id = `${newInstance.id}_$${currentObj.resolved.instances.length}`;\n                            }\n                        }\n                        currentObj.resolved.instances.push(newInstance);\n                        const newObjInstance = {\n                            ...currentObj,\n                            instance: newInstance,\n                        };\n                        // Save to current state:\n                        currentState = newObjInstance;\n                        // Update activeObjIds:\n                        activeObjIds[newObjInstance.id] = newObjInstance;\n                    }\n                    else if (removeOld) {\n                        // Remove from current state:\n                        currentState = undefined;\n                    }\n                }\n            }\n        }\n        // At this point, the instances of all objects are calculated,\n        // taking into account priorities, clashes etc.\n        // Cap children inside their parents:\n        // Functionally, this isn't needed since this is done in ResolvedTimelineHandler.resolveTimelineObj() anyway.\n        // However by capping children here some re-evaluating iterations can be avoided, so this increases performance.\n        {\n            const allChildren = this.objectsOnLayer\n                .filter((obj) => !!obj.resolved.parentId)\n                // Sort, so that the outermost are handled first:\n                .sort((a, b) => {\n                return a.resolved.levelDeep - b.resolved.levelDeep;\n            });\n            for (const obj of allChildren) {\n                if (obj.resolved.parentId) {\n                    const parent = this.resolvedTimeline.getObject(obj.resolved.parentId);\n                    if (parent) {\n                        obj.resolved.instances = this.instance.cleanInstances(this.instance.capInstances(obj.resolved.instances, parent.resolved.instances), false, false);\n                    }\n                }\n            }\n        }\n        this.debug('==== resolveConflicts done');\n        toc();\n    }\n    /** Add an instance and event to a certain point-in-time */\n    addPointInTime(time, instanceEvent, obj, instance) {\n        // Note on order: Ending events come before starting events\n        this.debug('addPointInTime', time, instanceEvent, instance);\n        if (!this.pointsInTime[time + ''])\n            this.pointsInTime[time + ''] = [];\n        this.pointsInTime[time + ''].push({ obj, instance, instanceEvent });\n    }\n}\nexports.LayerStateHandler = LayerStateHandler;\nfunction compareObjectsOnLayer(a, b) {\n    // Sort to make sure parent groups are evaluated before their children:\n    return a.resolved.levelDeep - b.resolved.levelDeep || (0, lib_1.compareStrings)(a.id, b.id);\n}\nfunction compareInstancesToCheck(a, b) {\n    // Note: we assume that there are no keyframes here. (if there where, they would be sorted first)\n    if (a.instance.id === b.instance.id && a.instance.start === b.instance.start && a.instance.end === b.instance.end) {\n        // A & B are the same instance, it is a zero-length instance!\n        // In this case, put the start before the end:\n        if (a.instanceEvent === 'start' && b.instanceEvent === 'end')\n            return -1;\n        if (a.instanceEvent === 'end' && b.instanceEvent === 'start')\n            return 1;\n    }\n    // Handle ending instances first:\n    if (a.instanceEvent === 'start' && b.instanceEvent === 'end')\n        return 1;\n    if (a.instanceEvent === 'end' && b.instanceEvent === 'start')\n        return -1;\n    if (a.instance.start === a.instance.end || b.instance.start === b.instance.end) {\n        // Put later-ending instances last (in the case of zero-length vs non-zero-length instance):\n        const difference = (a.instance.end ?? Infinity) - (b.instance.end ?? Infinity);\n        if (difference)\n            return difference;\n    }\n    if (a.obj.resolved && b.obj.resolved) {\n        // Deeper objects (children in groups) comes later, we want to check the parent groups first:\n        const difference = a.obj.resolved.levelDeep - b.obj.resolved.levelDeep;\n        if (difference)\n            return difference;\n    }\n    // Last resort, sort by id to make it deterministic:\n    return (0, lib_1.compareStrings)(a.obj.id, b.obj.id) || (0, lib_1.compareStrings)(a.instance.id, b.instance.id);\n}\nconst removeFromAspiringInstances = (aspiringInstances, objId) => {\n    const returnInstances = [];\n    for (let i = 0; i < aspiringInstances.length; i++) {\n        if (aspiringInstances[i].obj.id !== objId)\n            returnInstances.push(aspiringInstances[i]);\n    }\n    return returnInstances;\n};\nfunction compareAspiringInstances(a, b) {\n    // Determine who takes precedence:\n    return ((b.obj.priority || 0) - (a.obj.priority || 0) || // First, sort using priority\n        b.instance.start - a.instance.start || // Then, sort using the start time\n        (0, lib_1.compareStrings)(a.obj.id, b.obj.id) || // Last resort, sort by id to make it deterministic\n        (0, lib_1.compareStrings)(a.instance.id, b.instance.id));\n}\n//# sourceMappingURL=LayerStateHandler.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ReferenceHandler = void 0;\nconst lib_1 = require(\"./lib/lib\");\nconst cap_1 = require(\"./lib/cap\");\nconst event_1 = require(\"./lib/event\");\nconst reference_1 = require(\"./lib/reference\");\nconst expression_1 = require(\"./lib/expression\");\nclass ReferenceHandler {\n    constructor(resolvedTimeline, instance) {\n        this.resolvedTimeline = resolvedTimeline;\n        this.instance = instance;\n        this.operateApplyParentInstance = (a, b) => {\n            if (a === null || b === null)\n                return null;\n            return {\n                value: a.value + b.value,\n                references: (0, reference_1.joinReferences)(a.references, b.references),\n            };\n        };\n    }\n    /**\n     * Look up a reference on the timeline\n     * Return values:\n     * TimelineObjectInstance[]: Instances on the timeline where the reference expression is true\n     * ValueWithReference: A singular value which can be combined arithmetically with Instances\n     * null: Means \"something is invalid\", an null-value will always return null when combined with other values\n     *\n     * @param obj\n     * @param expr\n     * @param context\n     */\n    lookupExpression(obj, expr, context) {\n        if (expr === null)\n            return { result: null, allReferences: [] };\n        if (typeof expr === 'string' && (0, expression_1.isNumericExpr)(expr)) {\n            return {\n                result: {\n                    value: parseFloat(expr),\n                    references: [],\n                },\n                allReferences: [],\n            };\n        }\n        else if (typeof expr === 'number') {\n            return {\n                result: {\n                    value: expr,\n                    references: [],\n                },\n                allReferences: [],\n            };\n        }\n        else if (typeof expr === 'string') {\n            expr = expr.trim();\n            const exprLower = expr.toLowerCase();\n            if (exprLower === 'true') {\n                return {\n                    result: {\n                        value: 0,\n                        references: [],\n                    },\n                    allReferences: [],\n                };\n            }\n            else if (exprLower === 'false') {\n                return {\n                    result: null,\n                    allReferences: [],\n                };\n            }\n            // Look up string\n            let referencedObjs = [];\n            let ref = context;\n            let rest = '';\n            let objIdsToReference = [];\n            const allReferences = [];\n            let referenceIsOk = false;\n            // Match id, example: \"#objectId.start\"\n            const m = /^\\W*#([^.]+)(.*)/.exec(expr);\n            if (m) {\n                const id = m[1];\n                rest = m[2];\n                referenceIsOk = true;\n                objIdsToReference = [id];\n                allReferences.push(`#${id}`);\n            }\n            else {\n                // Match class, example: \".className.start\"\n                const m = /^\\W*\\.([^.]+)(.*)/.exec(expr);\n                if (m) {\n                    const className = m[1];\n                    rest = m[2];\n                    referenceIsOk = true;\n                    objIdsToReference = this.resolvedTimeline.getClassObjects(className) ?? [];\n                    allReferences.push(`.${className}`);\n                }\n                else {\n                    // Match layer, example: \"$layer\"\n                    const m = /^\\W*\\$([^.]+)(.*)/.exec(expr);\n                    if (m) {\n                        const layer = m[1];\n                        rest = m[2];\n                        referenceIsOk = true;\n                        objIdsToReference = this.resolvedTimeline.getLayerObjects(layer) ?? [];\n                        allReferences.push(`$${layer}`);\n                    }\n                }\n            }\n            for (let i = 0; i < objIdsToReference.length; i++) {\n                const refObjId = objIdsToReference[i];\n                if (refObjId === obj.id) {\n                    // Looks like the object is referencing itself!\n                    if (obj.resolved.resolving) {\n                        obj.resolved.isSelfReferencing = true;\n                    }\n                }\n                else {\n                    const refObj = this.resolvedTimeline.getObject(refObjId);\n                    if (refObj)\n                        referencedObjs.push(refObj);\n                }\n            }\n            if (!referenceIsOk) {\n                return { result: null, allReferences: [] };\n            }\n            if (obj.resolved.isSelfReferencing) {\n                // Exclude any self-referencing objects:\n                referencedObjs = referencedObjs.filter((refObj) => {\n                    return !refObj.resolved.isSelfReferencing;\n                });\n            }\n            if (referencedObjs.length) {\n                if (/start/.exec(rest))\n                    ref = 'start';\n                else if (/end/.exec(rest))\n                    ref = 'end';\n                else if (/duration/.exec(rest))\n                    ref = 'duration';\n                if (ref === 'duration') {\n                    // Duration refers to the first object on the resolved timeline\n                    return this.lookupReferencedObjsDuration(obj, referencedObjs, allReferences);\n                }\n                else if (ref === 'start') {\n                    return this.lookupReferencedObjs(obj, referencedObjs, allReferences, false, false);\n                }\n                else if (ref === 'end') {\n                    return this.lookupReferencedObjs(obj, referencedObjs, allReferences, true, true);\n                }\n                else {\n                    /* istanbul ignore next */\n                    (0, lib_1.assertNever)(ref);\n                }\n            }\n            return { result: [], allReferences: allReferences };\n        }\n        else if (!expr) {\n            return { result: null, allReferences: [] };\n        }\n        else {\n            // expr is an expressionObj\n            return this.lookupExpressionObj(obj, context, expr);\n        }\n    }\n    applyParentInstances(parentInstances, value) {\n        return this.operateOnArrays(parentInstances, value, this.operateApplyParentInstance);\n    }\n    /**\n     * Perform an action on 2 arrays. Behaves somewhat like the \".*\"-operator in Matlab\n     * @param array0\n     * @param array1\n     * @param operate\n     */\n    operateOnArrays(array0, array1, operate) {\n        if (array0 === null || array1 === null)\n            return null;\n        if ((0, reference_1.isReference)(array0) && (0, reference_1.isReference)(array1)) {\n            return operate(array0, array1);\n        }\n        const result = [];\n        const minLength = Math.min((0, lib_1.isArray)(array0) ? array0.length : Infinity, (0, lib_1.isArray)(array1) ? array1.length : Infinity);\n        for (let i = 0; i < minLength; i++) {\n            const a = (0, lib_1.isArray)(array0)\n                ? array0[i]\n                : { id: '@', start: array0.value, end: array0.value, references: array0.references };\n            const b = (0, lib_1.isArray)(array1)\n                ? array1[i]\n                : { id: '@', start: array1.value, end: array1.value, references: array1.references };\n            const start = a.isFirst\n                ? { value: a.start, references: a.references }\n                : b.isFirst\n                    ? { value: b.start, references: b.references }\n                    : operate({ value: a.start, references: (0, reference_1.joinReferences)(a.references, a.id === '@' ? [] : `@${a.id}`) }, { value: b.start, references: (0, reference_1.joinReferences)(b.references, b.id === '@' ? [] : `@${b.id}`) });\n            const end = a.isFirst\n                ? a.end !== null\n                    ? { value: a.end, references: a.references }\n                    : null\n                : b.isFirst\n                    ? b.end !== null\n                        ? { value: b.end, references: b.references }\n                        : null\n                    : operate(a.end !== null\n                        ? {\n                            value: a.end,\n                            references: (0, reference_1.joinReferences)(a.references, a.id === '@' ? [] : `@${a.id}`),\n                        }\n                        : null, b.end !== null\n                        ? {\n                            value: b.end,\n                            references: (0, reference_1.joinReferences)(b.references, b.id === '@' ? [] : `@${b.id}`),\n                        }\n                        : null);\n            if (start !== null) {\n                result.push({\n                    id: this.resolvedTimeline.getInstanceId(),\n                    start: start.value,\n                    end: end === null ? null : end.value,\n                    references: (0, reference_1.joinReferences)(start.references, end !== null ? end.references : []),\n                    caps: (0, cap_1.joinCaps)(a.caps, b.caps),\n                });\n            }\n        }\n        return this.instance.cleanInstances(result, false);\n    }\n    /**\n     * Look up the referenced objects (in the context of a duration-reference)\n     */\n    lookupReferencedObjsDuration(obj, referencedObjs, allReferences) {\n        const instanceDurations = [];\n        for (let i = 0; i < referencedObjs.length; i++) {\n            const referencedObj = referencedObjs[i];\n            // Ensure that the referenced object is resolved.\n            // Note: This is where referenced object(s) are recursively resolved\n            this.resolvedTimeline.resolveTimelineObj(referencedObj);\n            if (referencedObj.resolved.resolvedReferences) {\n                if (obj.resolved.isSelfReferencing && referencedObj.resolved.isSelfReferencing) {\n                    // If the querying object is self-referencing, exclude any other self-referencing objects,\n                    // ignore the object\n                }\n                else {\n                    const firstInstance = referencedObj.resolved.instances[0];\n                    if (firstInstance) {\n                        const duration = firstInstance.end !== null ? firstInstance.end - firstInstance.start : null;\n                        if (duration !== null) {\n                            instanceDurations.push({\n                                value: duration,\n                                references: (0, reference_1.joinReferences)([`#${referencedObj.id}`], firstInstance.references),\n                            });\n                        }\n                    }\n                }\n            }\n        }\n        let firstDuration = null;\n        for (let i = 0; i < instanceDurations.length; i++) {\n            const d = instanceDurations[i];\n            if (firstDuration === null || d.value < firstDuration.value)\n                firstDuration = d;\n        }\n        return { result: firstDuration, allReferences: allReferences };\n    }\n    /**\n     * Look up the referenced objects\n     */\n    lookupReferencedObjs(obj, referencedObjs, allReferences, invert, ignoreFirstIfZero) {\n        let referencedInstances = [];\n        for (let i = 0; i < referencedObjs.length; i++) {\n            const referencedObj = referencedObjs[i];\n            // Ensure that the referenced object is resolved.\n            // Note: This is where referenced object(s) are recursively resolved\n            this.resolvedTimeline.resolveTimelineObj(referencedObj);\n            if (referencedObj.resolved.resolvedReferences) {\n                if (obj.resolved.isSelfReferencing && referencedObj.resolved.isSelfReferencing) {\n                    // If the querying object is self-referencing, exclude any other self-referencing objects,\n                    // ignore the object\n                }\n                else {\n                    referencedInstances = referencedInstances.concat(referencedObj.resolved.instances);\n                }\n            }\n        }\n        if (referencedInstances.length) {\n            if (invert) {\n                referencedInstances = this.instance.invertInstances(referencedInstances);\n            }\n            else {\n                referencedInstances = this.instance.cleanInstances(referencedInstances, true, true);\n            }\n            if (ignoreFirstIfZero) {\n                const first = referencedInstances[0];\n                if (first && first.start === 0) {\n                    referencedInstances.splice(0, 1);\n                }\n            }\n            return { result: referencedInstances, allReferences: allReferences };\n        }\n        else {\n            return { result: [], allReferences: allReferences };\n        }\n    }\n    /**\n     * Look up an ExpressionObj\n     */\n    lookupExpressionObj(obj, context, expr) {\n        const l = this.lookupExpression(obj, expr.l, context);\n        const r = this.lookupExpression(obj, expr.r, context);\n        const lookupExpr = {\n            l: l.result,\n            o: expr.o,\n            r: r.result,\n        };\n        const allReferences = l.allReferences.concat(r.allReferences);\n        if (lookupExpr.o === '!') {\n            // Invert, ie discard l, invert and return r:\n            if (lookupExpr.r && (0, lib_1.isArray)(lookupExpr.r)) {\n                return {\n                    result: this.instance.invertInstances(lookupExpr.r),\n                    allReferences: allReferences,\n                };\n            }\n            else {\n                // We can't invert a value\n                return {\n                    result: lookupExpr.r,\n                    allReferences: allReferences,\n                };\n            }\n        }\n        else if (lookupExpr.l === null || lookupExpr.r === null) {\n            return { result: null, allReferences: allReferences };\n        }\n        else if (lookupExpr.o === '&' || lookupExpr.o === '|') {\n            const combiner = new ReferenceAndOrCombiner(this.resolvedTimeline, lookupExpr.l, lookupExpr.r, lookupExpr.o);\n            const instances = combiner.calculateResult();\n            return { result: instances, allReferences: allReferences };\n        }\n        else {\n            const operate = Operators.get(lookupExpr.o);\n            const result = this.operateOnArrays(lookupExpr.l, lookupExpr.r, operate);\n            return { result: result, allReferences: allReferences };\n        }\n    }\n}\nexports.ReferenceHandler = ReferenceHandler;\n/** Helper class that deals with an And ('&') or an Or ('|') expression */\nclass ReferenceAndOrCombiner {\n    constructor(resolvedTimeline, leftOperand, rightOperand, operator) {\n        this.resolvedTimeline = resolvedTimeline;\n        this.leftOperand = leftOperand;\n        this.rightOperand = rightOperand;\n        this.events = [];\n        this.instances = [];\n        if (operator === '&') {\n            this.calcResult = (left, right) => !!(left && right);\n        }\n        else if (operator === '|') {\n            this.calcResult = (left, right) => !!(left || right);\n        }\n        else {\n            /* istanbul ignore next */\n            (0, lib_1.assertNever)(operator);\n            /* istanbul ignore next */\n            this.calcResult = () => false;\n        }\n        if ((0, lib_1.isArray)(leftOperand))\n            this._addInstanceEvents(leftOperand, true);\n        if ((0, lib_1.isArray)(rightOperand))\n            this._addInstanceEvents(rightOperand, false);\n        this.events = (0, event_1.sortEvents)(this.events);\n    }\n    _addInstanceEvents(instances, left) {\n        for (let i = 0; i < instances.length; i++) {\n            const instance = instances[i];\n            if (instance.start !== instance.end) {\n                // event doesn't actually exist...\n                this.events.push({\n                    left: left,\n                    time: instance.start,\n                    value: true,\n                    references: [],\n                    data: true,\n                    instance: instance,\n                });\n                if (instance.end !== null) {\n                    this.events.push({\n                        left: left,\n                        time: instance.end,\n                        value: false,\n                        references: [],\n                        data: false,\n                        instance: instance,\n                    });\n                }\n            }\n        }\n    }\n    calculateResult() {\n        let leftValue = (0, reference_1.isReference)(this.leftOperand) ? !!this.leftOperand.value : false;\n        let rightValue = (0, reference_1.isReference)(this.rightOperand) ? !!this.rightOperand.value : false;\n        let leftInstance = null;\n        let rightInstance = null;\n        let resultValue = this.calcResult(leftValue, rightValue);\n        this.updateInstance(0, resultValue, (0, reference_1.joinReferences)((0, reference_1.isReference)(this.leftOperand) ? this.leftOperand.references : [], (0, reference_1.isReference)(this.rightOperand) ? this.rightOperand.references : []), []);\n        for (let i = 0; i < this.events.length; i++) {\n            const e = this.events[i];\n            const next = this.events[i + 1];\n            if (e.left) {\n                leftValue = e.value;\n                leftInstance = e.instance;\n            }\n            else {\n                rightValue = e.value;\n                rightInstance = e.instance;\n            }\n            if (!next || next.time !== e.time) {\n                const newResultValue = this.calcResult(leftValue, rightValue);\n                const resultCaps = (leftInstance ? leftInstance.caps ?? [] : []).concat(rightInstance ? rightInstance.caps ?? [] : []);\n                if (newResultValue !== resultValue) {\n                    this.updateInstance(e.time, newResultValue, (0, reference_1.joinReferences)(leftInstance ? leftInstance.references : [], rightInstance ? rightInstance.references : []), resultCaps);\n                    resultValue = newResultValue;\n                }\n            }\n        }\n        return this.instances;\n    }\n    updateInstance(time, value, references, caps) {\n        if (value) {\n            this.instances.push({\n                id: this.resolvedTimeline.getInstanceId(),\n                start: time,\n                end: null,\n                references: references,\n                caps: caps,\n            });\n        }\n        else {\n            const lastInstance = (0, lib_1.last)(this.instances);\n            if (lastInstance) {\n                lastInstance.end = time;\n                // don't update reference on end\n            }\n        }\n    }\n}\n/** Helper class for various operators */\nclass Operators {\n    static get(operator) {\n        switch (operator) {\n            case '+':\n                return Operators.Add;\n            case '-':\n                return Operators.Subtract;\n            case '*':\n                return Operators.Multiply;\n            case '/':\n                return Operators.Divide;\n            case '%':\n                return Operators.Modulo;\n            default: {\n                (0, lib_1.assertNever)(operator);\n                return Operators.Null;\n            }\n        }\n    }\n}\nOperators.Add = (a, b) => {\n    if (a === null || b === null)\n        return null;\n    return {\n        value: a.value + b.value,\n        references: (0, reference_1.joinReferences)(a.references, b.references),\n    };\n};\nOperators.Subtract = (a, b) => {\n    if (a === null || b === null)\n        return null;\n    return {\n        value: a.value - b.value,\n        references: (0, reference_1.joinReferences)(a.references, b.references),\n    };\n};\nOperators.Multiply = (a, b) => {\n    if (a === null || b === null)\n        return null;\n    return {\n        value: a.value * b.value,\n        references: (0, reference_1.joinReferences)(a.references, b.references),\n    };\n};\nOperators.Divide = (a, b) => {\n    if (a === null || b === null)\n        return null;\n    return {\n        value: a.value / b.value,\n        references: (0, reference_1.joinReferences)(a.references, b.references),\n    };\n};\nOperators.Modulo = (a, b) => {\n    if (a === null || b === null)\n        return null;\n    return {\n        value: a.value % b.value,\n        references: (0, reference_1.joinReferences)(a.references, b.references),\n    };\n};\nOperators.Null = () => {\n    return null;\n};\n//# sourceMappingURL=ReferenceHandler.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ResolvedTimelineHandler = void 0;\nconst ExpressionHandler_1 = require(\"./ExpressionHandler\");\nconst ReferenceHandler_1 = require(\"./ReferenceHandler\");\nconst lib_1 = require(\"./lib/lib\");\nconst InstanceHandler_1 = require(\"./InstanceHandler\");\nconst reference_1 = require(\"./lib/reference\");\nconst event_1 = require(\"./lib/event\");\nconst instance_1 = require(\"./lib/instance\");\nconst timeline_1 = require(\"./lib/timeline\");\nconst LayerStateHandler_1 = require(\"./LayerStateHandler\");\nconst expression_1 = require(\"./lib/expression\");\nconst performance_1 = require(\"./lib/performance\");\nconst CacheHandler_1 = require(\"./CacheHandler\");\n/**\n * A ResolvedTimelineHandler instance is short-lived and used to resolve a timeline.\n * Intended usage:\n * 1. const resolver = new ResolvedTimelineHandler(options)\n * 2. timelineObjects.forEach(obj => resolver.addTimelineObject(obj))\n * 3. resolver.resolveAllTimelineObjs()\n */\nclass ResolvedTimelineHandler {\n    constructor(options) {\n        this.options = options;\n        /** Maps object id to object */\n        this.objectsMap = new Map();\n        /** Maps className to a list of object ids  */\n        this.classesMap = new Map();\n        /** Maps layer to a list of object ids  */\n        this.layersMap = new Map();\n        /**\n         * Maps an array of object ids to an object id (objects that directly reference an reference).\n         */\n        this.directReferenceMap = new Map();\n        /** How many objects that was actually resolved (is affected when using cache) */\n        this.statisticResolvingObjectCount = 0;\n        /** How many times an object where resolved. (is affected when using cache) */\n        this.statisticResolvingCount = 0;\n        /**\n         * A Map of strings (instance hashes) that is used to determine if an objects instances have changed.\n         * Maps objectId -> instancesHash\n         */\n        this.resolvedObjInstancesHash = new Map();\n        /**\n         * List of explanations fow why an object changed during a resolve iteration.\n         * Used for debugging and Errors\n         */\n        this.changedObjIdsExplanations = [];\n        /**\n         * A Map that contains the objects that needs to resolve again.\n         * Object are added into this after this.resolveConflictsForLayer()\n         */\n        this.objectsToReResolve = new Map();\n        /** Counter that increases during resolving, for every object that might need re-resolving*/\n        this.objectResolveCount = 0;\n        /** Error message, is set when an error is encountered and this.options.dontThrowOnError is set */\n        this._resolveError = undefined;\n        this._idCount = 0;\n        this.expression = new ExpressionHandler_1.ExpressionHandler(false, this.options.skipValidation);\n        this.instance = new InstanceHandler_1.InstanceHandler(this);\n        this.reference = new ReferenceHandler_1.ReferenceHandler(this, this.instance);\n        this.debug = this.options.debug ?? false;\n    }\n    get resolveError() {\n        return this._resolveError;\n    }\n    /** Populate ResolvedTimelineHandler with a timeline-object. */\n    addTimelineObject(obj) {\n        this._addTimelineObject(obj, 0, undefined, false);\n    }\n    /** Resolve the timeline. */\n    resolveAllTimelineObjs() {\n        const toc = (0, performance_1.tic)('  resolveAllTimelineObjs');\n        this.debugTrace('=================================== resolveAllTimelineObjs');\n        // Step 0: Preparations:\n        /** Number of objects in timeline */\n        const objectCount = this.objectsMap.size;\n        /** Max allowed number of iterations over objects */\n        const objectResolveCountMax = objectCount * (this.options.conflictMaxDepth ?? 5);\n        /*\n            The resolving algorithm basically works like this:\n\n            1a: Resolve all objects\n            1b: Resolve conflicts for all layers\n                Also determine which objects depend on changed objects due to conflicts\n\n            2: Loop, until there are no more changed objects:\n                2a: Resolve objects that depend on changed objects\n                2b: Resolve conflicts for affected layers in 2a\n                    Also determine which objects depend on changed objects due to conflicts\n        */\n        // Step 1a: Resolve all objects:\n        for (const obj of this.objectsMap.values()) {\n            this.resolveTimelineObj(obj);\n            // Populate this.resolvedObjInstancesHash now, so that only changes to the timeline instances\n            // in this.resolveConflictsForObjs() will be detected later:\n            this.resolvedObjInstancesHash.set(obj.id, (0, instance_1.getInstancesHash)(obj.resolved.instances));\n        }\n        if (this._resolveError)\n            return; // Abort on error\n        // Step 1b: Resolve conflicts for all objects:\n        this.resolveConflictsForObjs(null);\n        if (this._resolveError)\n            return; // Abort on error\n        // Step 2: re-resolve all changed objects, until no more changes are detected:\n        while (this.objectsToReResolve.size > 0) {\n            if (this.objectResolveCount >= objectResolveCountMax) {\n                const error = new Error(`Maximum conflict iteration reached (${this.objectResolveCount}). This is due to a circular dependency in the timeline. Latest changes:\\n${this.changedObjIdsExplanations.join('Next iteration -------------------------\\n')}`);\n                if (this.options.dontThrowOnError) {\n                    this._resolveError = error;\n                    return;\n                }\n                else {\n                    throw error;\n                }\n            }\n            /* istanbul ignore if */\n            if (this.debug) {\n                this.debugTrace(`---------------------------------`);\n                this.debugTrace(`objectsToReResolve: [${Array.from(this.objectsToReResolve.entries())}]`);\n                this.debugTrace(`directReferences: [${Array.from(this.directReferenceMap.entries()).map(([key, value]) => `${key}: [${value}]`)}]`);\n            }\n            // Collect and reset all objects that depend on previously changed objects\n            const conflictObjectsToResolve = [];\n            for (const obj of this.objectsToReResolve.values()) {\n                this.objectResolveCount++;\n                // Force a new resolve, since the referenced objects might have changed (due to conflicts):\n                let needsConflictResolve = false;\n                if (!obj.resolved.resolvedReferences) {\n                    this.resolveTimelineObj(obj);\n                    needsConflictResolve = true;\n                }\n                if (!obj.resolved.resolvedConflicts) {\n                    needsConflictResolve = true;\n                }\n                if (needsConflictResolve) {\n                    conflictObjectsToResolve.push(obj);\n                }\n            }\n            if (this._resolveError)\n                return; // Abort on error\n            // Resolve conflicts for objects that depend on previously changed objects:\n            this.resolveConflictsForObjs(conflictObjectsToResolve);\n        }\n        toc();\n    }\n    /**\n     * Resolve a timeline-object.\n     * The Resolve algorithm works like this:\n     * 1. Go through the .enable expression(s) and look up all referenced objects.\n     * \t  1.5 For each referenced object, recursively resolve it first if not already resolved.\n     * 2. Collect the resolved instances and calculate the resulting list of resulting instances.\n     */\n    resolveTimelineObj(obj) {\n        if (obj.resolved.resolving) {\n            // Circular dependency\n            const error = Error(`Circular dependency when trying to resolve \"${obj.id}\"`);\n            if (this.options.dontThrowOnError) {\n                this._resolveError = error;\n                obj.resolved.firstResolved = true;\n                obj.resolved.resolvedReferences = true;\n                obj.resolved.resolving = false;\n                obj.resolved.instances = [];\n                return;\n            }\n            else {\n                throw error;\n            }\n        }\n        if (obj.resolved.resolvedReferences)\n            return; // already resolved\n        const toc = (0, performance_1.tic)('     resolveTimelineObj');\n        obj.resolved.resolving = true;\n        this.statisticResolvingCount++;\n        if (!obj.resolved.firstResolved) {\n            this.statisticResolvingObjectCount++;\n        }\n        this.debugTrace(`============ resolving \"${obj.id}\"`);\n        const directReferences = [];\n        let resultingInstances = [];\n        if (obj.disabled) {\n            resultingInstances = [];\n        }\n        else {\n            // Loop up references to the parent:\n            let parentInstances = null;\n            let hasParent = false;\n            let parentRef = undefined;\n            if (obj.resolved.parentId) {\n                hasParent = true;\n                parentRef = `#${obj.resolved.parentId}`;\n                const parentLookup = this.reference.lookupExpression(obj, this.expression.interpretExpression(parentRef), 'start');\n                // pushToArray(directReferences, parentLookup.allReferences)\n                parentInstances = parentLookup.result; // a start-reference will always return an array, or null\n                if (parentInstances !== null) {\n                    // Ensure that the parentInstances references the parent:\n                    for (const parentInstance of parentInstances) {\n                        parentInstance.references = (0, reference_1.joinReferences)(parentInstance.references, parentRef);\n                    }\n                }\n            }\n            const enables = (0, lib_1.ensureArray)(obj.enable);\n            for (let i = 0; i < enables.length; i++) {\n                const enable = enables[i];\n                // Resolve the the enable.repeating expression:\n                const lookupRepeating = enable.repeating !== undefined\n                    ? this.lookupExpression(obj, directReferences, enable.repeating, 'duration')\n                    : { result: null };\n                let lookedupRepeating;\n                if (lookupRepeating.result === null) {\n                    // Do nothing\n                    lookedupRepeating = null;\n                }\n                else if ((0, lib_1.isArray)(lookupRepeating.result)) {\n                    if (lookupRepeating.result.length === 0) {\n                        lookedupRepeating = null;\n                    }\n                    else if (lookupRepeating.result.length === 1) {\n                        lookedupRepeating = (0, lib_1.literal)({\n                            value: lookupRepeating.result[0].start,\n                            references: lookupRepeating.result[0].references,\n                        });\n                    }\n                    else {\n                        // The lookup for repeating returned multiple instances.\n                        // Not supported at the moment, perhaps this could be supported in the future.\n                        /* istanbul ignore next */\n                        throw new Error(`lookupExpression should never return an array for .duration lookup`);\n                    }\n                }\n                else {\n                    lookedupRepeating = lookupRepeating.result;\n                }\n                /** Array of instances this enable-expression resulted in */\n                let enableInstances;\n                if (enable.while !== undefined) {\n                    const whileExpr = \n                    // Handle special case \"1\", 1:\n                    enable.while === '1' || enable.while === 1\n                        ? 'true'\n                        : // Handle special case \"0\", 0:\n                            enable.while === '0' || enable.while === 0\n                                ? 'false'\n                                : enable.while;\n                    // Note: a lookup for 'while' works the same as for 'start'\n                    const lookupWhile = this.lookupExpression(obj, directReferences, whileExpr, 'start');\n                    if (lookupWhile.result === null) {\n                        // Do nothing\n                        enableInstances = [];\n                    }\n                    else if ((0, lib_1.isArray)(lookupWhile.result)) {\n                        enableInstances = lookupWhile.result;\n                    }\n                    else if (lookupWhile.result !== null) {\n                        enableInstances = [\n                            {\n                                id: this.getInstanceId(),\n                                start: lookupWhile.result.value,\n                                end: null,\n                                references: lookupWhile.result.references,\n                            },\n                        ];\n                    }\n                    else {\n                        enableInstances = [];\n                    }\n                }\n                else if (enable.start !== undefined) {\n                    const lookupStart = this.lookupExpression(obj, directReferences, enable.start, 'start');\n                    const lookedupStarts = lookupStart.refersToParent\n                        ? this.reference.applyParentInstances(parentInstances, lookupStart.result)\n                        : lookupStart.result;\n                    const events = [];\n                    // const endEvents: EventForInstance[] = []\n                    let iStart = 0;\n                    let iEnd = 0;\n                    if (lookedupStarts === null) {\n                        // Do nothing\n                    }\n                    else if ((0, lib_1.isArray)(lookedupStarts)) {\n                        // Use the start-times of the instances and add them to the list of events:\n                        // (The end-times are irrelevant)\n                        for (let i = 0; i < lookedupStarts.length; i++) {\n                            const instance = lookedupStarts[i];\n                            const eventId = `${obj.id}_${iStart++}`;\n                            events.push({\n                                time: instance.start,\n                                value: true,\n                                data: { instance: instance, id: eventId },\n                                references: instance.references,\n                            });\n                        }\n                    }\n                    else {\n                        events.push({\n                            time: lookedupStarts.value,\n                            value: true,\n                            data: {\n                                instance: {\n                                    id: this.getInstanceId(),\n                                    start: lookedupStarts.value,\n                                    end: null,\n                                    references: lookedupStarts.references,\n                                },\n                                id: `${obj.id}_${iStart++}`,\n                            },\n                            references: lookedupStarts.references,\n                        });\n                    }\n                    if (enable.end !== undefined) {\n                        const lookupEnd = this.lookupExpression(obj, directReferences, enable.end, 'end');\n                        /** Contains an inverted list of instances. Therefore .start means an end */\n                        const lookedupEnds = !lookupEnd\n                            ? null\n                            : lookupEnd.refersToParent\n                                ? this.reference.applyParentInstances(parentInstances, lookupEnd.result)\n                                : lookupEnd.result;\n                        if (lookedupEnds === null) {\n                            // Do nothing\n                        }\n                        else if ((0, lib_1.isArray)(lookedupEnds)) {\n                            // Use the start-times of the instances and add them (as end-events) to the list:\n                            // (The end-times are irrelevant)\n                            for (let i = 0; i < lookedupEnds.length; i++) {\n                                const instance = lookedupEnds[i];\n                                events.push({\n                                    time: instance.start,\n                                    value: false,\n                                    data: { instance: instance, id: `${obj.id}_${iEnd++}` },\n                                    references: instance.references,\n                                });\n                            }\n                        }\n                        else if (lookedupEnds) {\n                            events.push({\n                                time: lookedupEnds.value,\n                                value: false,\n                                data: {\n                                    instance: {\n                                        id: this.getInstanceId(),\n                                        start: lookedupEnds.value,\n                                        end: null,\n                                        references: lookedupEnds.references,\n                                    },\n                                    id: `${obj.id}_${iEnd++}`,\n                                },\n                                references: lookedupEnds.references,\n                            });\n                        }\n                    }\n                    else if (enable.duration !== undefined) {\n                        const lookupDuration = this.lookupExpression(obj, directReferences, enable.duration, 'duration');\n                        let lookedupDuration = lookupDuration.result;\n                        if (lookedupDuration === null) {\n                            // Do nothing\n                        }\n                        else if ((0, lib_1.isArray)(lookedupDuration)) {\n                            if (lookedupDuration.length === 1) {\n                                lookedupDuration = (0, lib_1.literal)({\n                                    value: lookedupDuration[0].start,\n                                    references: lookedupDuration[0].references,\n                                });\n                            }\n                            else if (lookedupDuration.length === 0) {\n                                lookedupDuration = null;\n                            }\n                            else {\n                                // Lookup rendeded multiple durations.\n                                // This is unsupported at the moment, but could possibly be added in the future.\n                                /* istanbul ignore next */\n                                throw new Error(`lookedupDuration should never return an array for .duration lookup`);\n                            }\n                        }\n                        if (lookedupDuration !== null) {\n                            if (lookedupRepeating !== null && lookedupDuration.value > lookedupRepeating.value) {\n                                // Cap duration to repeating duration\n                                lookedupDuration.value = lookedupRepeating.value;\n                            }\n                            // Go through all pre-existing start-events, and add end-events for each of them.\n                            for (let i = 0; i < events.length; i++) {\n                                const startEvent = events[i];\n                                if (startEvent.value) {\n                                    // Is a start-event\n                                    const time = startEvent.time + lookedupDuration.value;\n                                    const references = (0, reference_1.joinReferences)(startEvent.references, lookedupDuration.references);\n                                    events.push({\n                                        time: time,\n                                        value: false,\n                                        data: {\n                                            id: startEvent.data.id,\n                                            instance: {\n                                                id: startEvent.data.instance.id,\n                                                start: time,\n                                                end: null,\n                                                references: references,\n                                            },\n                                        },\n                                        references: references,\n                                    });\n                                }\n                            }\n                        }\n                    }\n                    enableInstances = this.instance.convertEventsToInstances(events, false, false, \n                    // Omit the referenced originalStart/End when using enable.start:\n                    true);\n                    // Cap those instances to the parent instances:\n                    if (parentRef && parentInstances !== null) {\n                        const parentInstanceMap = new Map();\n                        for (const instance of parentInstances) {\n                            parentInstanceMap.set(instance.id, instance);\n                        }\n                        const cappedEnableInstances = [];\n                        for (const instance of enableInstances) {\n                            let matchedParentInstance = undefined;\n                            // Go through the references in reverse, because sometimes there are multiple matches, and the last one is probably the one we want to use.\n                            for (let i = instance.references.length - 1; i >= 0; i--) {\n                                const ref = instance.references[i];\n                                if ((0, reference_1.isInstanceReference)(ref)) {\n                                    matchedParentInstance = parentInstanceMap.get((0, reference_1.getRefInstanceId)(ref));\n                                    if (matchedParentInstance)\n                                        break;\n                                }\n                            }\n                            if (matchedParentInstance) {\n                                const cappedInstance = this.instance.capInstance(instance, matchedParentInstance);\n                                if (!cappedInstance.caps)\n                                    cappedInstance.caps = [];\n                                cappedInstance.caps.push((0, lib_1.literal)({\n                                    id: matchedParentInstance.id,\n                                    start: matchedParentInstance.start,\n                                    end: matchedParentInstance.end,\n                                }));\n                                cappedEnableInstances.push(cappedInstance);\n                            }\n                            else {\n                                cappedEnableInstances.push(instance);\n                            }\n                        }\n                        enableInstances = cappedEnableInstances;\n                    }\n                }\n                else {\n                    enableInstances = [];\n                }\n                enableInstances = this.instance.applyRepeatingInstances(enableInstances, lookedupRepeating);\n                // Add the instances resulting from this enable-expression to the list:\n                (0, lib_1.pushToArray)(resultingInstances, enableInstances);\n            }\n            // Cap the instances to the parent instances:\n            if (hasParent) {\n                resultingInstances = this.capInstancesToParentInstances({\n                    instances: resultingInstances,\n                    parentInstances,\n                });\n            }\n        }\n        // Make the instance ids unique:\n        const idSet = new Set();\n        for (const instance of resultingInstances) {\n            if (idSet.has(instance.id)) {\n                instance.id = `${instance.id}_${this.getInstanceId()}`;\n            }\n            idSet.add(instance.id);\n        }\n        if (obj.seamless && resultingInstances.length > 1) {\n            resultingInstances = this.instance.cleanInstances(resultingInstances, true, false);\n        }\n        if (obj.resolved.parentId) {\n            directReferences.push(`#${obj.resolved.parentId}`);\n        }\n        if (!obj.resolved.firstResolved) {\n            // This only needs to be done upon first resolve:\n            this.updateDirectReferenceMap(obj, directReferences);\n        }\n        obj.resolved.firstResolved = true;\n        obj.resolved.resolvedReferences = true;\n        obj.resolved.resolving = false;\n        obj.resolved.instances = resultingInstances;\n        if (this.debug) {\n            this.debugTrace(`directReferences \"${obj.id}\": ${JSON.stringify(directReferences)}`);\n            this.debugTrace(`resolved \"${obj.id}\": ${JSON.stringify(obj.resolved.instances)}`);\n        }\n        // Finally:\n        obj.resolved.resolving = false;\n        toc();\n    }\n    getStatistics() {\n        const toc = (0, performance_1.tic)('  getStatistics');\n        if (this.options.skipStatistics) {\n            return {\n                totalCount: 0,\n                resolvedInstanceCount: 0,\n                resolvedObjectCount: 0,\n                resolvedGroupCount: 0,\n                resolvedKeyframeCount: 0,\n                resolvingObjectCount: 0,\n                resolvingCount: 0,\n            };\n        }\n        const statistics = {\n            totalCount: 0,\n            resolvedInstanceCount: 0,\n            resolvedObjectCount: 0,\n            resolvedGroupCount: 0,\n            resolvedKeyframeCount: 0,\n            resolvingObjectCount: this.statisticResolvingObjectCount,\n            resolvingCount: this.statisticResolvingCount,\n        };\n        for (const obj of this.objectsMap.values()) {\n            statistics.totalCount += 1;\n            if (obj.isGroup) {\n                statistics.resolvedGroupCount += 1;\n            }\n            if (obj.resolved.isKeyframe) {\n                statistics.resolvedKeyframeCount += 1;\n            }\n            else {\n                statistics.resolvedObjectCount += 1;\n            }\n            statistics.resolvedInstanceCount += obj.resolved.instances.length;\n        }\n        toc();\n        return statistics;\n    }\n    initializeCache(cacheObj) {\n        this.cache = new CacheHandler_1.CacheHandler(cacheObj, this);\n        return this.cache;\n    }\n    /**\n     * Returns an object.\n     * type-wise, assumes you know what object you're looking for\n     */\n    getObject(objId) {\n        return this.objectsMap.get(objId);\n    }\n    /**\n     * Returns object ids on a layer\n     * type-wise, assumes you know what layer you're looking for\n     */\n    getLayerObjects(layer) {\n        return this.layersMap.get(layer);\n    }\n    /**\n     * Returns object ids on a layer\n     * type-wise, assumes you know what className you're looking for\n     */\n    getClassObjects(className) {\n        return this.classesMap.get(className);\n    }\n    capInstancesToParentInstances(arg) {\n        if (!arg.parentInstances)\n            return [];\n        const events = [];\n        for (const instance of arg.instances) {\n            events.push({\n                time: instance.start,\n                value: true,\n                references: instance.references,\n                data: { instance, isParent: false },\n            });\n            if (instance.end !== null) {\n                events.push({\n                    time: instance.end,\n                    value: false,\n                    references: instance.references,\n                    data: { instance, isParent: false },\n                });\n            }\n        }\n        for (const instance of arg.parentInstances) {\n            events.push({\n                time: instance.start,\n                value: true,\n                references: instance.references,\n                data: { instance, isParent: true },\n            });\n            if (instance.end !== null) {\n                events.push({\n                    time: instance.end,\n                    value: false,\n                    references: instance.references,\n                    data: { instance, isParent: true },\n                });\n            }\n        }\n        (0, event_1.sortEvents)(events, compareEvents);\n        const parentActiveInstances = [];\n        const childActiveInstances = [];\n        let currentActive = undefined;\n        const cappedInstances = [];\n        function finalizeCurrentActive() {\n            if (currentActive) {\n                cappedInstances.push(currentActive.instance);\n                currentActive = undefined;\n            }\n        }\n        for (const event of events) {\n            if (event.data.isParent) {\n                // Parent instance\n                if (event.value) {\n                    parentActiveInstances.push(event.data.instance);\n                }\n                else {\n                    (0, instance_1.spliceInstances)(parentActiveInstances, (i) => (i === event.data.instance ? undefined : i));\n                }\n            }\n            else {\n                // Child instance\n                if (event.value) {\n                    childActiveInstances.push(event.data.instance);\n                }\n                else {\n                    (0, instance_1.spliceInstances)(childActiveInstances, (i) => (i === event.data.instance ? undefined : i));\n                }\n            }\n            const childInstance = childActiveInstances[childActiveInstances.length - 1];\n            const parentInstance = parentActiveInstances[parentActiveInstances.length - 1];\n            /** If there is an active child instance */\n            const toBeEnabled = Boolean(childInstance && parentInstance);\n            if (toBeEnabled) {\n                if (currentActive) {\n                    if (\n                    // Check if instance is still the same:\n                    childInstance.id !== currentActive.instance.id ||\n                        (parentInstance !== currentActive.parent &&\n                            // Check if parent still is active:\n                            !parentActiveInstances.includes(currentActive.parent))) {\n                        // parent isn't active anymore, stop and start a new instance:\n                        // Stop instance:\n                        currentActive.instance.end = event.time;\n                        currentActive.instance.originalEnd = currentActive.instance.originalEnd ?? event.time;\n                        currentActive.instance.references = (0, reference_1.joinReferences)(currentActive.instance.references, event.data.instance.references);\n                        finalizeCurrentActive();\n                    }\n                    else {\n                        // Continue an active instance\n                        if (currentActive.instance.id !== childInstance.id) {\n                            currentActive.instance.references = (0, reference_1.joinReferences)(currentActive.instance.references, childInstance.references);\n                        }\n                    }\n                }\n                if (!currentActive) {\n                    // Start a new instance:\n                    currentActive = {\n                        instance: {\n                            ...childInstance,\n                            start: event.time,\n                            end: null,\n                            // originalStart: childInstance.originalStart ?? event.time,\n                            // originalEnd: childInstance.originalEnd ?? null, // set later\n                            originalStart: childInstance.originalStart ?? childInstance.start,\n                            originalEnd: childInstance.originalEnd ?? childInstance.end ?? null,\n                            references: (0, reference_1.joinReferences)(childInstance.references, ...parentActiveInstances.map((i) => i.references)),\n                        },\n                        parent: parentInstance,\n                    };\n                }\n            }\n            else {\n                if (currentActive) {\n                    // Stop instance:\n                    currentActive.instance.end = event.time;\n                    currentActive.instance.originalEnd = currentActive.instance.originalEnd ?? event.time;\n                    currentActive.instance.references = (0, reference_1.joinReferences)(currentActive.instance.references, event.data.instance.references);\n                    finalizeCurrentActive();\n                }\n            }\n        }\n        finalizeCurrentActive();\n        return cappedInstances;\n    }\n    updateDirectReferenceMap(obj, directReferences) {\n        obj.resolved.directReferences = directReferences;\n        for (const ref of directReferences) {\n            const objectsThisIsReferencing = [];\n            if ((0, reference_1.isObjectReference)(ref)) {\n                const objId = (0, reference_1.getRefObjectId)(ref);\n                objectsThisIsReferencing.push(objId);\n            }\n            else if ((0, reference_1.isClassReference)(ref)) {\n                const className = (0, reference_1.getRefClass)(ref);\n                for (const objId of this.getClassObjects(className) ?? []) {\n                    objectsThisIsReferencing.push(objId);\n                }\n            }\n            else if ((0, reference_1.isLayerReference)(ref)) {\n                const layer = (0, reference_1.getRefLayer)(ref);\n                for (const objId of this.getLayerObjects(layer) ?? []) {\n                    objectsThisIsReferencing.push(objId);\n                }\n            }\n            else if (\n            /* istanbul ignore next */\n            (0, reference_1.isInstanceReference)(ref)) {\n                // do nothing\n            }\n            else {\n                /* istanbul ignore next */\n                (0, lib_1.assertNever)(ref);\n            }\n            for (const refObjId of objectsThisIsReferencing) {\n                let refs = this.directReferenceMap.get(refObjId);\n                if (!refs) {\n                    refs = [];\n                    this.directReferenceMap.set(refObjId, refs);\n                }\n                refs.push(obj.id);\n            }\n        }\n    }\n    getObjectsLayers(objs) {\n        const layers = new Set();\n        for (const obj of objs) {\n            if ((0, timeline_1.objHasLayer)(obj)) {\n                layers.add(`${obj.layer}`);\n            }\n        }\n        return Array.from(layers.values());\n    }\n    /** Returns a list of all object's layers */\n    getAllObjectLayers() {\n        if (!this.allObjectLayersCache) {\n            // Cache this, since this won't change:\n            this.allObjectLayersCache = this.getObjectsLayers(this.objectsMap.values());\n        }\n        return this.allObjectLayersCache;\n    }\n    /** Look up an expression, update references and return it. */\n    lookupExpression(obj, directReferences, expr, context) {\n        const simplifiedExpression = this.expression.simplifyExpression(expr);\n        const lookupResult = this.reference.lookupExpression(obj, simplifiedExpression, context);\n        (0, lib_1.pushToArray)(directReferences, lookupResult.allReferences);\n        // If expression is a constant, it is assumed to be a time relative to its parent:\n        const refersToParent = obj.resolved.parentId && (0, expression_1.isConstantExpr)(simplifiedExpression);\n        return {\n            allReferences: lookupResult.allReferences,\n            result: lookupResult.result,\n            refersToParent,\n        };\n    }\n    _addTimelineObject(obj, \n    /** A number that increases the more levels inside of a group the objects is. 0 = no parent */\n    levelDeep, \n    /** ID of the parent object */\n    parentId, isKeyframe) {\n        const toc = (0, performance_1.tic)('  addTimelineObject');\n        // Is it already added?\n        if (!this.options.skipValidation) {\n            if (this.objectsMap.has(obj.id)) {\n                /* istanbul ignore next */\n                throw Error(`All timelineObjects must be unique! (duplicate: \"${obj.id}\")`);\n            }\n        }\n        // Add the object:\n        {\n            const o = {\n                ...obj,\n                resolved: {\n                    firstResolved: false,\n                    resolvedReferences: false,\n                    resolvedConflicts: false,\n                    resolving: false,\n                    instances: [],\n                    levelDeep: levelDeep,\n                    isSelfReferencing: false,\n                    directReferences: [],\n                    parentId: parentId,\n                    isKeyframe: isKeyframe,\n                },\n            };\n            this.objectsMap.set(obj.id, o);\n            if (obj.classes) {\n                for (let i = 0; i < obj.classes.length; i++) {\n                    const className = obj.classes[i];\n                    if (className) {\n                        let classList = this.classesMap.get(className);\n                        if (!classList) {\n                            classList = [];\n                            this.classesMap.set(className, classList);\n                        }\n                        classList.push(obj.id);\n                    }\n                }\n            }\n            if ((0, timeline_1.objHasLayer)(obj)) {\n                const layer = `${obj.layer}`;\n                let layerList = this.layersMap.get(layer);\n                if (!layerList) {\n                    layerList = [];\n                    this.layersMap.set(layer, layerList);\n                }\n                layerList.push(obj.id);\n            }\n        }\n        // Go through children and keyframes:\n        {\n            // Add children:\n            if (obj.isGroup && obj.children) {\n                for (let i = 0; i < obj.children.length; i++) {\n                    const child = obj.children[i];\n                    this._addTimelineObject(child, levelDeep + 1, obj.id, false);\n                }\n            }\n            // Add keyframes:\n            if (obj.keyframes) {\n                for (let i = 0; i < obj.keyframes.length; i++) {\n                    const keyframe = obj.keyframes[i];\n                    const kf2 = {\n                        ...keyframe,\n                        layer: '',\n                    };\n                    this._addTimelineObject(kf2, levelDeep + 1, obj.id, true);\n                }\n            }\n        }\n        toc();\n    }\n    /**\n     * Resolve conflicts for all layers of the provided objects\n     */\n    resolveConflictsForObjs(\n    /** null means all layers */\n    objs) {\n        const toc = (0, performance_1.tic)('     resolveConflictsForObjs');\n        // These need to be cleared,\n        // as they are populated during the this.updateObjectsToReResolve() below:\n        this.changedObjIdsExplanations = [];\n        this.objectsToReResolve.clear();\n        /** List of layers to resolve conflicts on */\n        let layers;\n        if (objs === null) {\n            layers = this.getAllObjectLayers();\n        }\n        else {\n            layers = this.getObjectsLayers(objs);\n        }\n        for (const layer of layers) {\n            const maybeChangedObjs = this.resolveConflictsForLayer(layer);\n            // run this.updateObjectsToReResolve() here (as opposed to outside the loop),\n            // to allow for a fast-path in resolveConflictsForLayer that skips resolving that layer if it contains\n            // objects that depend on already changed objects.\n            this.updateObjectsToReResolve(maybeChangedObjs);\n        }\n        toc();\n    }\n    /**\n     * Resolve conflicts for a layer\n     * @returns A list of objects on that layer\n     */\n    resolveConflictsForLayer(layer) {\n        const handler = new LayerStateHandler_1.LayerStateHandler(this, this.instance, layer);\n        // Fast path: If an object on this layer depends on an already changed object we should skip this layer, this iteration.\n        // Because the objects will likely change during the next resolve-iteration anyway.\n        for (const objId of handler.objectIdsOnLayer) {\n            if (this.objectsToReResolve.has(objId)) {\n                this.debugTrace(`optimization: Skipping \"${layer}\" since \"${objId}\" changed`);\n                return [];\n            }\n        }\n        handler.resolveConflicts();\n        return handler.objectsOnLayer;\n    }\n    /** Returns the next unique instance id */\n    getInstanceId() {\n        return `@${(this._idCount++).toString(36)}`;\n    }\n    updateObjectsToReResolve(maybeChangedObjs) {\n        const toc = (0, performance_1.tic)('     updateObjectsToReResolve');\n        const changedObjs = new Set();\n        for (const obj of maybeChangedObjs) {\n            // Check if the instances have changed:\n            const instancesHash = (0, instance_1.getInstancesHash)(obj.resolved.instances);\n            const prevHash = this.resolvedObjInstancesHash.get(obj.id) ?? 'not-found';\n            if (instancesHash !== prevHash) {\n                this.changedObjIdsExplanations.push(`\"${obj.id}\" changed from: \\n   ${prevHash}\\n   , to \\n   ${instancesHash}\\n`);\n                if (this.changedObjIdsExplanations.length > 2)\n                    this.changedObjIdsExplanations.shift();\n                this.debugTrace(`changed: ${obj.id}: \"${prevHash}\" -> \"${instancesHash}\"`);\n                changedObjs.add(obj.id);\n                this.resolvedObjInstancesHash.set(obj.id, instancesHash);\n            }\n        }\n        for (const changedObjId of changedObjs.values()) {\n            // Find all objects that depend on this:\n            const directReferences = this.directReferenceMap.get(changedObjId) ?? [];\n            for (const objId of directReferences) {\n                const obj = this.getObject(objId);\n                obj.resolved.resolvedReferences = false;\n                // Note: obj.resolved.resolvedConflicts will be set to false later when resolving references\n                this.objectsToReResolve.set(obj.id, obj);\n            }\n        }\n        toc();\n    }\n    debugTrace(...args) {\n        if (this.debug)\n            console.log(...args);\n    }\n}\nexports.ResolvedTimelineHandler = ResolvedTimelineHandler;\nfunction compareEvents(a, b) {\n    // start event be first:\n    const aValue = a.value;\n    const bValue = b.value;\n    if (aValue && !bValue)\n        return -1;\n    if (!aValue && bValue)\n        return 1;\n    const aIsParent = a.data.isParent;\n    const bIsParent = b.data.isParent;\n    if (aValue) {\n        // start: parents first:\n        if (aIsParent && !bIsParent)\n            return -1;\n        if (!aIsParent && bIsParent)\n            return 1;\n    }\n    else {\n        // end: parents last:\n        if (aIsParent && !bIsParent)\n            return 1;\n        if (!aIsParent && bIsParent)\n            return -1;\n    }\n    // parents first:\n    // if (a.data.isParent && !b.data.isParent) return -1\n    // if (!a.data.isParent && b.data.isParent) return 1\n    return 0;\n}\n//# sourceMappingURL=ResolvedTimelineHandler.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ResolverHandler = void 0;\nconst ResolvedTimelineHandler_1 = require(\"./ResolvedTimelineHandler\");\nconst resolvedTimeline_1 = require(\"../api/resolvedTimeline\");\nconst lib_1 = require(\"./lib/lib\");\nconst performance_1 = require(\"./lib/performance\");\nconst timeline_1 = require(\"./lib/timeline\");\nconst TimelineValidator_1 = require(\"./TimelineValidator\");\n/**\n * Note: A Resolver instance is short-lived and used to resolve a timeline.\n * Intended usage:\n * 1. const resolver = new Resolver(options)\n * 2. resolver.run(timeline)\n */\nclass ResolverHandler {\n    constructor(options) {\n        this.options = options;\n        this.hasRun = false;\n        this.nextEvents = [];\n        const toc = (0, performance_1.tic)('new Resolver');\n        this.resolvedTimeline = new ResolvedTimelineHandler_1.ResolvedTimelineHandler(this.options);\n        this.validator = new TimelineValidator_1.TimelineValidator();\n        toc();\n    }\n    /**\n     * Resolves a timeline, i.e. resolves the references between objects\n     * This method can only be run once per Resolver instance.\n     */\n    resolveTimeline(timeline) {\n        const toc = (0, performance_1.tic)('resolveTimeline');\n        /* istanbul ignore if */\n        if (this.hasRun)\n            throw new Error(`Resolver.resolveTimeline can only run once per instance!\nUsage:\nconst resolver = new Resolver(options);\nresolver.run(timeline);`);\n        this.hasRun = true;\n        // Step 0: Validate the timeline:\n        if (!this.options.skipValidation) {\n            this.validator.validateTimeline(timeline, false);\n        }\n        // Step 1: Populate ResolvedTimeline with the timeline:\n        for (const obj of timeline) {\n            this.resolvedTimeline.addTimelineObject(obj);\n        }\n        // Step 2: Use cache:\n        let cacheHandler;\n        if (this.options.cache) {\n            cacheHandler = this.resolvedTimeline.initializeCache(this.options.cache);\n            cacheHandler.determineChangedObjects();\n        }\n        // Step 3: Go through and resolve all objects:\n        this.resolvedTimeline.resolveAllTimelineObjs();\n        // Step 4: Populate nextEvents:\n        this.updateNextEvents();\n        // Step 5: persist cache\n        if (cacheHandler) {\n            cacheHandler.persistData();\n        }\n        const resolvedTimeline = (0, lib_1.literal)({\n            objects: (0, lib_1.mapToObject)(this.resolvedTimeline.objectsMap),\n            classes: (0, lib_1.mapToObject)(this.resolvedTimeline.classesMap),\n            layers: (0, lib_1.mapToObject)(this.resolvedTimeline.layersMap),\n            nextEvents: this.nextEvents,\n            statistics: this.resolvedTimeline.getStatistics(),\n            error: this.resolvedTimeline.resolveError,\n        });\n        toc();\n        return resolvedTimeline;\n    }\n    /** Update this.nextEvents */\n    updateNextEvents() {\n        const toc = (0, performance_1.tic)('  updateNextEvents');\n        this.nextEvents = [];\n        const allObjects = [];\n        const allKeyframes = [];\n        for (const obj of this.resolvedTimeline.objectsMap.values()) {\n            if (obj.resolved.isKeyframe) {\n                allKeyframes.push(obj);\n            }\n            else {\n                allObjects.push(obj);\n            }\n        }\n        /** Used to fast-track in cases where there are no keyframes */\n        const hasKeyframes = allKeyframes.length > 0;\n        const objectInstanceStartTimes = new Set();\n        const objectInstanceEndTimes = new Set();\n        // Go through keyframes last:\n        for (const obj of [...allObjects, ...allKeyframes]) {\n            if (!obj.resolved.isKeyframe) {\n                if (!(0, timeline_1.objHasLayer)(obj))\n                    continue; // transparent objects are omitted in NextEvents\n            }\n            else if (obj.resolved.parentId !== undefined) {\n                const parentObj = this.resolvedTimeline.getObject(obj.resolved.parentId);\n                if (parentObj) {\n                    /* istanbul ignore if */\n                    if (!(0, timeline_1.objHasLayer)(parentObj))\n                        continue; // Keyframes of transparent objects are omitted in NextEvents\n                }\n            }\n            for (let i = 0; i < obj.resolved.instances.length; i++) {\n                const instance = obj.resolved.instances[i];\n                if (instance.start > this.options.time && instance.start < (this.options.limitTime ?? Infinity)) {\n                    let useThis = true;\n                    if (hasKeyframes) {\n                        if (!obj.resolved.isKeyframe) {\n                            objectInstanceStartTimes.add(`${obj.id}_${instance.start}`);\n                        }\n                        else {\n                            // No need to put keyframe event if its parent starts at the same time:\n                            if (objectInstanceStartTimes.has(`${obj.resolved.parentId}_${instance.start}`)) {\n                                useThis = false;\n                            }\n                        }\n                    }\n                    if (useThis) {\n                        this.nextEvents.push({\n                            objId: obj.id,\n                            type: obj.resolved.isKeyframe ? resolvedTimeline_1.EventType.KEYFRAME : resolvedTimeline_1.EventType.START,\n                            time: instance.start,\n                        });\n                    }\n                }\n                if (instance.end !== null &&\n                    instance.end > this.options.time &&\n                    instance.end < (this.options.limitTime ?? Infinity)) {\n                    let useThis = true;\n                    if (hasKeyframes) {\n                        if (!obj.resolved.isKeyframe) {\n                            objectInstanceEndTimes.add(`${obj.id}_${instance.end}`);\n                        }\n                        else {\n                            // No need to put keyframe event if its parent ends at the same time:\n                            if (objectInstanceEndTimes.has(`${obj.resolved.parentId}_${instance.end}`)) {\n                                useThis = false;\n                            }\n                        }\n                    }\n                    if (useThis) {\n                        this.nextEvents.push({\n                            objId: obj.id,\n                            type: obj.resolved.isKeyframe ? resolvedTimeline_1.EventType.KEYFRAME : resolvedTimeline_1.EventType.END,\n                            time: instance.end,\n                        });\n                    }\n                }\n            }\n        }\n        this.nextEvents.sort(compareNextEvents);\n        toc();\n    }\n}\nexports.ResolverHandler = ResolverHandler;\nfunction compareNextEvents(a, b) {\n    return a.time - b.time || b.type - a.type || (0, lib_1.compareStrings)(a.objId, b.objId);\n}\n//# sourceMappingURL=ResolverHandler.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.StateHandler = void 0;\nconst instance_1 = require(\"./lib/instance\");\nconst lib_1 = require(\"./lib/lib\");\nconst performance_1 = require(\"./lib/performance\");\nconst timeline_1 = require(\"./lib/timeline\");\nclass StateHandler {\n    getState(resolvedTimeline, time, eventLimit = 0) {\n        const toc = (0, performance_1.tic)('getState');\n        const state = {\n            time: time,\n            layers: {},\n            nextEvents: resolvedTimeline.nextEvents.filter((e) => e.time > time),\n        };\n        if (eventLimit)\n            state.nextEvents = state.nextEvents.slice(0, eventLimit);\n        for (const obj of Object.values(resolvedTimeline.objects)) {\n            if (!(0, timeline_1.objHasLayer)(obj))\n                continue;\n            // Note: We can assume that it is not a keyframe here, because keyframes don't have layers\n            for (const instance of obj.resolved.instances) {\n                if ((0, instance_1.instanceIsActive)(instance, time)) {\n                    let contentIsOriginal = true;\n                    const objInstance = {\n                        ...obj,\n                        instance,\n                    };\n                    /* istanbul ignore if */\n                    if (state.layers[`${obj.layer}`]) {\n                        // There is already an object on this layer!\n                        console.error(state.layers[`${obj.layer}`]);\n                        console.error(objInstance);\n                        throw new Error(`Internal Error: There is already an object on layer \"${obj.layer}\"!`);\n                    }\n                    state.layers[`${obj.layer}`] = objInstance;\n                    // Now, apply keyframes:\n                    const objectKeyframes = obj.keyframes\n                        ? obj.keyframes.map((kf) => resolvedTimeline.objects[kf.id])\n                        : [];\n                    for (const keyframe of this.getActiveKeyframeInstances(objectKeyframes, time)) {\n                        if (contentIsOriginal) {\n                            // We don't want to modify the original content, so we deep-clone it before modifying it:\n                            objInstance.content = (0, lib_1.clone)(obj.content);\n                            contentIsOriginal = false;\n                        }\n                        StateHandler.applyKeyframeContent(objInstance.content, keyframe.content);\n                    }\n                }\n            }\n        }\n        toc();\n        return state;\n    }\n    /**\n     * Apply keyframe content onto its parent content.\n     * The keyframe content is deeply-applied onto the parent content.\n     */\n    static applyKeyframeContent(parentContent, keyframeContent) {\n        const toc = (0, performance_1.tic)('  applyKeyframeContent');\n        for (const [attr, value] of Object.entries(keyframeContent)) {\n            if ((0, lib_1.isObject)(value)) {\n                if ((0, lib_1.isArray)(value)) {\n                    // Value is an array\n                    if (!Array.isArray(parentContent[attr]))\n                        parentContent[attr] = [];\n                    this.applyKeyframeContent(parentContent[attr], value);\n                    parentContent[attr].splice(value.length, Infinity);\n                }\n                else {\n                    // Value is an object\n                    if (!(0, lib_1.isObject)(parentContent[attr]) || Array.isArray(parentContent[attr]))\n                        parentContent[attr] = {};\n                    this.applyKeyframeContent(parentContent[attr], value);\n                }\n            }\n            else {\n                parentContent[attr] = value;\n            }\n        }\n        toc();\n    }\n    getActiveKeyframeInstances(keyframes, time) {\n        const keyframeInstances = [];\n        for (const keyframe of keyframes) {\n            for (const instance of keyframe.resolved.instances) {\n                if ((0, instance_1.instanceIsActive)(instance, time)) {\n                    keyframeInstances.push({\n                        ...keyframe,\n                        instance,\n                    });\n                }\n            }\n        }\n        keyframeInstances.sort((a, b) => {\n            // Highest priority is applied last:\n            const aPriority = a.priority ?? 0;\n            const bPriority = b.priority ?? 0;\n            if (aPriority < bPriority)\n                return -1;\n            if (aPriority > bPriority)\n                return 1;\n            // Last start time is applied last:\n            if (a.instance.start < b.instance.start)\n                return -1;\n            if (a.instance.start > b.instance.start)\n                return 1;\n            /* istanbul ignore next */\n            return 0;\n        });\n        return keyframeInstances;\n    }\n}\nexports.StateHandler = StateHandler;\n//# sourceMappingURL=StateHandler.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.TimelineValidator = void 0;\nconst ExpressionHandler_1 = require(\"./ExpressionHandler\");\nconst lib_1 = require(\"./lib/lib\");\nconst performance_1 = require(\"./lib/performance\");\n/** These characters are reserved and cannot be used in ids, etc */\nconst RESERVED_CHARACTERS = /[#.$]/g;\n/** These characters are reserved for possible future use and cannot be used in ids, etc */\nconst FUTURE_RESERVED_CHARACTERS = /[=?@{}[\\]^§]/g;\n/**\n * Note: A TimelineValidator instance is short-lived and used to validate a timeline.\n * Intended usage:\n * 1. const validator = new TimelineValidator()\n * 2. validator.validateTimeline(timeline)\n * or:\n * 1. const validator = new TimelineValidator()\n * 2. validator.validateObject(obj)\n * or:\n * 1. const validator = new TimelineValidator()\n * 2. validator.validateKeyframe(obj)\n */\nclass TimelineValidator {\n    constructor() {\n        this.uniqueIds = {};\n    }\n    /** Validates all objects in the timeline. Throws an error if something's wrong. */\n    validateTimeline(\n    /** The timeline to validate */\n    timeline, \n    /** Set to true to enable some optional strict rules. Set this to true to increase future compatibility. */\n    strict) {\n        const toc = (0, performance_1.tic)('  validateTimeline');\n        for (let i = 0; i < timeline.length; i++) {\n            const obj = timeline[i];\n            this.validateObject(obj, strict);\n        }\n        toc();\n    }\n    /** Validates a simgle Timeline-object. Throws an error if something's wrong. */\n    validateObject(\n    /** The object to validate */\n    obj, \n    /** Set to true to enable some optional strict rules. Set this to true to increase future compatibility. */\n    strict) {\n        if (!obj)\n            throw new Error(`Object is undefined`);\n        if (typeof obj !== 'object')\n            throw new Error(`Object is not an object`);\n        try {\n            this.validateId(obj, strict);\n            this.validateLayer(obj, strict);\n            this.validateContent(obj);\n            this.validateEnable(obj, strict);\n            if (obj.keyframes) {\n                for (let i = 0; i < obj.keyframes.length; i++) {\n                    const keyframe = obj.keyframes[i];\n                    try {\n                        this.validateKeyframe(keyframe, strict);\n                    }\n                    catch (e) {\n                        throw new Error(`Keyframe[${i}]: ${e}`);\n                    }\n                }\n            }\n            this.validateClasses(obj, strict);\n            if (obj.children && !obj.isGroup)\n                throw new Error(`Attribute \"children\" is set but \"isGroup\" is not`);\n            if (obj.isGroup && !obj.children)\n                throw new Error(`Attribute \"isGroup\" is set but \"children\" missing`);\n            if (obj.children) {\n                for (let i = 0; i < obj.children.length; i++) {\n                    const child = obj.children[i];\n                    try {\n                        this.validateObject(child, strict);\n                    }\n                    catch (e) {\n                        throw new Error(`Child[${i}]: ${e}`);\n                    }\n                }\n            }\n            if (obj.priority !== undefined && typeof obj.priority !== 'number')\n                throw new Error(`Attribute \"priority\" is not a number`);\n        }\n        catch (err) {\n            if (err instanceof Error) {\n                const err2 = new Error(`Object \"${obj.id}\": ${err.message}`);\n                err2.stack = err.stack;\n                throw err;\n            }\n            else\n                throw err;\n        }\n    }\n    /** Validates a simgle Timeline-object. Throws an error if something's wrong. */\n    validateKeyframe(\n    /** The object to validate */\n    keyframe, \n    /** Set to true to enable some optional strict rules. Set this to true to increase future compatibility */\n    strict) {\n        if (!keyframe)\n            throw new Error(`Keyframe is undefined`);\n        if (typeof keyframe !== 'object')\n            throw new Error(`Keyframe is not an object`);\n        try {\n            this.validateId(keyframe, strict);\n            this.validateContent(keyframe);\n            this.validateEnable(keyframe, strict);\n            this.validateClasses(keyframe, strict);\n        }\n        catch (err) {\n            if (err instanceof Error) {\n                const err2 = new Error(`Keyframe \"${keyframe.id}\": ${err.message}`);\n                err2.stack = err.stack;\n                throw err;\n            }\n            else\n                throw err;\n        }\n    }\n    validateId(obj, strict) {\n        if (!obj.id)\n            throw new Error(`Object missing \"id\" attribute`);\n        if (typeof obj.id !== 'string')\n            throw new Error(`Object \"id\" attribute is not a string: \"${obj.id}\"`);\n        try {\n            TimelineValidator.validateReferenceString(obj.id, strict);\n        }\n        catch (err) {\n            throw new Error(`Object \"id\" attribute: ${err}`);\n        }\n        if (this.uniqueIds[obj.id])\n            throw new Error(`id \"${obj.id}\" is not unique`);\n        this.uniqueIds[obj.id] = true;\n    }\n    validateLayer(obj, strict) {\n        if (obj.layer === undefined)\n            throw new Error(`\"layer\" attribute is undefined. (If an object is to have no layer, set this to an empty string.)`);\n        try {\n            TimelineValidator.validateReferenceString(`${obj.layer}`, strict);\n        }\n        catch (err) {\n            throw new Error(`\"layer\" attribute: ${err}`);\n        }\n    }\n    validateContent(obj) {\n        if (!obj.content)\n            throw new Error(`\"content\" attribute must be set`);\n    }\n    validateEnable(obj, strict) {\n        if (!obj.enable)\n            throw new Error(`\"enable\" attribute must be set`);\n        const enables = (0, lib_1.ensureArray)(obj.enable);\n        for (let i = 0; i < enables.length; i++) {\n            const enable = enables[i];\n            if (enable.start !== undefined) {\n                if (strict && enable.while !== undefined)\n                    throw new Error(`\"enable.start\" and \"enable.while\" cannot be combined`);\n                if (strict && enable.end !== undefined && enable.duration !== undefined)\n                    throw new Error(`\"enable.end\" and \"enable.duration\" cannot be combined`);\n            }\n            else if (enable.while !== undefined) {\n                if (strict && enable.end !== undefined)\n                    throw new Error(`\"enable.while\" and \"enable.end\" cannot be combined`);\n                if (strict && enable.duration !== undefined)\n                    throw new Error(`\"enable.while\" and \"enable.duration\" cannot be combined`);\n            }\n            else\n                throw new Error(`\"enable.start\" or \"enable.while\" must be set`);\n        }\n    }\n    validateClasses(obj, strict) {\n        if (obj.classes) {\n            for (let i = 0; i < obj.classes.length; i++) {\n                const className = obj.classes[i];\n                if (className && typeof className !== 'string')\n                    throw new Error(`\"classes[${i}]\" is not a string`);\n                try {\n                    TimelineValidator.validateReferenceString(className, strict);\n                }\n                catch (err) {\n                    throw new Error(` \"classes[${i}]\": ${err}`);\n                }\n            }\n        }\n    }\n    /**\n     * Validates a string that is used in Timeline as a reference (an id, a class or layer)\n     * @param str The string to validate\n     * @param strict Set to true to enable some strict rules (rules that can possibly be ignored)\n     */\n    static validateReferenceString(str, strict) {\n        if (!str)\n            return;\n        const matchesOperators = ExpressionHandler_1.REGEXP_OPERATORS.test(str);\n        const matchesReserved = RESERVED_CHARACTERS.test(str);\n        const matchesFutureReserved = strict && FUTURE_RESERVED_CHARACTERS.test(str);\n        if (matchesOperators || matchesReserved || matchesFutureReserved) {\n            const matchOperators = str.match(ExpressionHandler_1.REGEXP_OPERATORS) ?? [];\n            const matchReserved = str.match(RESERVED_CHARACTERS) ?? [];\n            const matchFutureReserved = (strict && str.match(FUTURE_RESERVED_CHARACTERS)) || [];\n            throw new Error(`The string \"${str}\" contains characters which aren't allowed in Timeline: ${[\n                matchOperators.length > 0 && `${matchOperators.map((o) => `\"${o}\"`).join(', ')} (is an operator)`,\n                matchReserved.length > 0 &&\n                    `${matchReserved.map((o) => `\"${o}\"`).join(', ')} (is a reserved character)`,\n                matchFutureReserved.length > 0 &&\n                    `${matchFutureReserved\n                        .map((o) => `\"${o}\"`)\n                        .join(', ')} (is a strict reserved character and might be used in the future)`,\n            ]\n                .filter(Boolean)\n                .join(', ')}`);\n        }\n    }\n}\nexports.TimelineValidator = TimelineValidator;\n//# sourceMappingURL=TimelineValidator.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Cache = void 0;\nclass Cache {\n    constructor(autoCleanup = false) {\n        this.autoCleanup = autoCleanup;\n        this.cache = new Map();\n        this.clearTimeout = undefined;\n        this.timeToCueNewCleanup = false;\n        if (this.autoCleanup)\n            this.timeToCueNewCleanup = true;\n    }\n    /** Cache the result of function for a limited time */\n    cacheResult(key, fcn, limitTime) {\n        const cache = this.cache.get(key);\n        if (!cache || cache.ttl < Date.now()) {\n            const value = fcn();\n            this.cache.set(key, {\n                ttl: Date.now() + limitTime,\n                value: value,\n            });\n            if (this.timeToCueNewCleanup) {\n                this.timeToCueNewCleanup = false;\n                /* istanbul ignore next */\n                this.clearTimeout = setTimeout(() => {\n                    this.clearTimeout = undefined;\n                    this.timeToCueNewCleanup = true;\n                    this.cleanUp();\n                }, limitTime + 100);\n            }\n            return value;\n        }\n        else {\n            return cache.value;\n        }\n    }\n    /* istanbul ignore next */\n    cleanUp() {\n        const now = Date.now();\n        for (const [key, value] of this.cache.entries()) {\n            if (value.ttl < now)\n                this.cache.delete(key);\n        }\n    }\n    clear() {\n        this.cache.clear();\n        if (this.clearTimeout) {\n            clearTimeout(this.clearTimeout);\n            this.clearTimeout = undefined;\n            this.timeToCueNewCleanup = true;\n        }\n    }\n}\nexports.Cache = Cache;\n//# sourceMappingURL=cache.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.addCapsToResuming = exports.joinCaps = void 0;\nfunction joinCaps(...caps) {\n    const capMap = {};\n    for (let i = 0; i < caps.length; i++) {\n        const caps2 = caps[i];\n        if (caps2) {\n            for (let j = 0; j < caps2.length; j++) {\n                const cap2 = caps2[j];\n                capMap[cap2.id] = cap2;\n            }\n        }\n    }\n    return Object.values(capMap);\n}\nexports.joinCaps = joinCaps;\nfunction addCapsToResuming(instance, ...caps) {\n    const capsToAdd = [];\n    const joinedCaps = joinCaps(...caps);\n    for (let i = 0; i < joinedCaps.length; i++) {\n        const cap = joinedCaps[i];\n        if (cap.end !== null && instance.end !== null && cap.end > instance.end) {\n            capsToAdd.push({\n                id: cap.id,\n                start: 0,\n                end: cap.end,\n            });\n        }\n    }\n    instance.caps = joinCaps(instance.caps, capsToAdd);\n}\nexports.addCapsToResuming = addCapsToResuming;\n//# sourceMappingURL=cap.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.sortEvents = void 0;\nfunction sortEvents(events, additionalSortFcnBefore) {\n    return events.sort((a, b) => {\n        if (a.time > b.time)\n            return 1;\n        if (a.time < b.time)\n            return -1;\n        const result = additionalSortFcnBefore ? additionalSortFcnBefore(a, b) : 0;\n        if (result !== 0)\n            return result;\n        const aId = a.data && (a.data.id || a.data.instance?.id);\n        const bId = b.data && (b.data.id || b.data.instance?.id);\n        if (aId && bId && aId === bId) {\n            // If the events refer to the same instance id, let the start event be first,\n            // to handle zero-length instances.\n            if (a.value && !b.value)\n                return -1;\n            if (!a.value && b.value)\n                return 1;\n        }\n        else {\n            // ends events first:\n            if (a.value && !b.value)\n                return 1;\n            if (!a.value && b.value)\n                return -1;\n        }\n        return 0;\n    });\n}\nexports.sortEvents = sortEvents;\n//# sourceMappingURL=event.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.isNumericExpr = exports.isConstantExpr = void 0;\n/** Returns true if an expression is a constant (ie doesn't reference something else) */\nfunction isConstantExpr(str) {\n    if (isNumericExpr(str))\n        return true;\n    if (typeof str === 'string') {\n        const lStr = str.toLowerCase();\n        if (lStr === 'true')\n            return true;\n        if (lStr === 'false')\n            return true;\n    }\n    return false;\n}\nexports.isConstantExpr = isConstantExpr;\nfunction isNumericExpr(str) {\n    if (str === null)\n        return false;\n    if (typeof str === 'number')\n        return true;\n    if (typeof str === 'string')\n        return !!/^[-+]?[0-9.]+$/.exec(str) && !isNaN(parseFloat(str));\n    return false;\n}\nexports.isNumericExpr = isNumericExpr;\n//# sourceMappingURL=expression.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getInstanceHash = exports.getInstancesHash = exports.baseInstance = exports.baseInstances = exports.spliceInstances = exports.getInstanceIntersection = exports.instanceIsActive = exports.isInstanceId = void 0;\nconst lib_1 = require(\"./lib\");\nfunction isInstanceId(str) {\n    return str.startsWith('@');\n}\nexports.isInstanceId = isInstanceId;\nfunction instanceIsActive(instance, time) {\n    return instance.start <= time && (instance.end ?? Infinity) > time;\n}\nexports.instanceIsActive = instanceIsActive;\n/**\n * Returns the intersection of two instances.\n * Example: for (10-20) and (15-30), the intersection is (15-20).\n */\nfunction getInstanceIntersection(a, b) {\n    if (a.start < (b.end ?? Infinity) && (a.end ?? Infinity) > b.start) {\n        const start = Math.max(a.start, b.start);\n        const end = Math.min(a.end ?? Infinity, b.end ?? Infinity);\n        return {\n            start,\n            end: end === Infinity ? null : end,\n        };\n    }\n    return null;\n}\nexports.getInstanceIntersection = getInstanceIntersection;\n/**\n * Convenience function to splice an array of instances\n * @param instances The array of instances to splice\n * @param fcn Operator function.\n *   Is called for each instance in the array,\n *   and should return an instance (or an array of instances) to insert in place of the original instance,\n *   or undefined to remove the instance.\n *   (To leave the instance unchanged, return the original instance)\n */\nfunction spliceInstances(instances, fcn) {\n    for (let i = 0; i < instances.length; i++) {\n        const fcnResult = fcn(instances[i]);\n        const insertInstances = fcnResult === undefined ? [] : (0, lib_1.ensureArray)(fcnResult);\n        if (insertInstances.length === 0) {\n            instances.splice(i, 1);\n            i--;\n        }\n        else {\n            if (insertInstances[0] === instances[i])\n                continue;\n            // replace:\n            instances.splice(i, 1, ...insertInstances);\n            i += insertInstances.length - 1;\n        }\n    }\n}\nexports.spliceInstances = spliceInstances;\nfunction baseInstances(instances) {\n    return instances.map((instance) => baseInstance(instance));\n}\nexports.baseInstances = baseInstances;\nfunction baseInstance(instance) {\n    return {\n        start: instance.start,\n        end: instance.end,\n    };\n}\nexports.baseInstance = baseInstance;\n/** Returns a string hash that changes whenever any instance has changed in a significant way */\nfunction getInstancesHash(instances) {\n    const strs = [];\n    for (const instance of instances) {\n        strs.push(getInstanceHash(instance));\n    }\n    return strs.join(',');\n}\nexports.getInstancesHash = getInstancesHash;\n/** Returns a string hash that changes whenever an instance has changed in a significant way */\nfunction getInstanceHash(instance) {\n    const orgStart = instance.originalStart ?? instance.start;\n    const orgEnd = instance.originalEnd ?? instance.end;\n    return `${instance.start}_${instance.end ?? 'null'}(${orgStart}_${orgEnd ?? 'null'})`;\n}\nexports.getInstanceHash = getInstanceHash;\n//# sourceMappingURL=instance.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.compareStrings = exports.mapToObject = exports.assertNever = exports.isArray = exports.ensureArray = exports.isEmpty = exports.sortBy = exports.omit = exports.uniq = exports.clone = exports.pushToArray = exports.reduceObj = exports.isObject = exports.last = exports.compact = exports.literal = void 0;\nfunction literal(o) {\n    return o;\n}\nexports.literal = literal;\nfunction compact(arr) {\n    const returnValues = [];\n    for (let i = 0; i < arr.length; i++) {\n        const v = arr[i];\n        if (!!v || (v !== undefined && v !== null && v !== ''))\n            returnValues.push(v);\n    }\n    return returnValues;\n}\nexports.compact = compact;\nfunction last(arr) {\n    return arr[arr.length - 1];\n}\nexports.last = last;\n/** Returns true if argument is an object (or an array, but NOT null) */\nfunction isObject(o) {\n    return o !== null && typeof o === 'object';\n}\nexports.isObject = isObject;\nfunction reduceObj(objs, fcn, initialValue) {\n    return Object.entries(objs).reduce((memo, [key, value], index) => {\n        return fcn(memo, value, key, index);\n    }, initialValue);\n}\nexports.reduceObj = reduceObj;\n/**\n * Concatenate two arrays of values.\n * This is a convenience function used to ensure that the two arrays are of the same type.\n * @param arr0 The array of values to push into\n * @param arr1 An array of values to push into arr0\n */\nfunction pushToArray(arr0, arr1) {\n    for (const item of arr1) {\n        arr0.push(item);\n    }\n}\nexports.pushToArray = pushToArray;\nfunction clone(obj) {\n    return JSON.parse(JSON.stringify(obj));\n}\nexports.clone = clone;\nfunction uniq(arr) {\n    return Array.from(new Set(arr));\n}\nexports.uniq = uniq;\nfunction omit(obj, ...keys) {\n    const result = {};\n    for (const [key, value] of Object.entries(obj)) {\n        if (keys.some((k) => (Array.isArray(k) ? k.includes(key) : k === key)))\n            continue;\n        result[key] = value;\n    }\n    return result;\n}\nexports.omit = omit;\nfunction sortBy(arr, fcn) {\n    const sortArray = arr.map((item) => ({ item, value: fcn(item) }));\n    sortArray.sort((a, b) => {\n        if (a.value < b.value)\n            return -1;\n        if (a.value > b.value)\n            return 1;\n        return 0;\n    });\n    return sortArray.map((item) => item.item);\n}\nexports.sortBy = sortBy;\nfunction isEmpty(obj) {\n    return Object.keys(obj).length === 0;\n}\nexports.isEmpty = isEmpty;\nfunction ensureArray(value) {\n    return Array.isArray(value) ? value : [value];\n}\nexports.ensureArray = ensureArray;\n/**\n * Slightly faster than Array.isArray().\n * Note: Ensure that the value provided is not null!\n */\nfunction isArray(arg) {\n    // Fast-path optimization: checking for .length is faster than Array.isArray()\n    return arg.length !== undefined && Array.isArray(arg);\n}\nexports.isArray = isArray;\n/**\n * Helper function to simply assert that the value is of the type never.\n * Usage: at the end of if/else or switch, to ensure that there is no fallthrough.\n */\nfunction assertNever(_value) {\n    // does nothing\n}\nexports.assertNever = assertNever;\nfunction mapToObject(map) {\n    const o = {};\n    for (const [key, value] of map.entries()) {\n        o[key] = value;\n    }\n    return o;\n}\nexports.mapToObject = mapToObject;\nfunction compareStrings(a, b) {\n    return a > b ? 1 : a < b ? -1 : 0;\n}\nexports.compareStrings = compareStrings;\n//# sourceMappingURL=lib.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ticTocPrint = exports.tic = exports.activatePerformanceDebugging = void 0;\nconst perf_hooks_1 = require(\"perf_hooks\");\nlet durations = {};\nlet callCounts = {};\nlet firstStartTime = 0;\nlet active = false;\nfunction activatePerformanceDebugging(activate) {\n    active = activate;\n}\nexports.activatePerformanceDebugging = activatePerformanceDebugging;\nfunction noop() {\n    // nothing\n}\n/**\n * Used to measure performance.\n * Starts a measurement, returns a function that should be called when the measurement is done.\n */\nfunction tic(id) {\n    if (!active)\n        return noop;\n    if (!firstStartTime)\n        firstStartTime = perf_hooks_1.performance.now();\n    if (!durations[id])\n        durations[id] = 0;\n    if (!callCounts[id])\n        callCounts[id] = 0;\n    const startTime = perf_hooks_1.performance.now();\n    return () => {\n        const duration = perf_hooks_1.performance.now() - startTime;\n        durations[id] = durations[id] + duration;\n        callCounts[id]++;\n    };\n}\nexports.tic = tic;\nfunction ticTocPrint() {\n    if (!active)\n        return;\n    const totalDuration = perf_hooks_1.performance.now() - firstStartTime;\n    const maxKeyLength = Math.max(...Object.keys(durations).map((k) => k.length));\n    console.log('ticTocPrint\\n' +\n        padStr(`Total duration `, maxKeyLength + 2) +\n        `${Math.floor(totalDuration)}\\n` +\n        Object.entries(durations)\n            .map((d) => {\n            let str = padStr(`${d[0]} `, maxKeyLength + 2);\n            str += padStr(`${Math.floor(d[1] * 10) / 10}`, 8);\n            str += padStr(`${Math.floor((d[1] / totalDuration) * 1000) / 10}%`, 7);\n            str += `${callCounts[d[0]]}`;\n            return str;\n        })\n            .join('\\n'));\n    durations = {};\n    callCounts = {};\n}\nexports.ticTocPrint = ticTocPrint;\nfunction padStr(str, length) {\n    while (str.length < length)\n        str += ' ';\n    return str;\n}\n//# sourceMappingURL=performance.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.isReference = exports.joinReferences = exports.getRefInstanceId = exports.isInstanceReference = exports.getRefLayer = exports.isLayerReference = exports.getRefClass = exports.isClassReference = exports.getRefObjectId = exports.isObjectReference = void 0;\nconst lib_1 = require(\"./lib\");\nconst performance_1 = require(\"./performance\");\n/*\n * References are strings that are added to instances,\n * to indicate what objects, layers or classes they are derived from.\n */\nfunction isObjectReference(ref) {\n    return ref.startsWith('#');\n}\nexports.isObjectReference = isObjectReference;\nfunction getRefObjectId(ref) {\n    return ref.slice(1);\n}\nexports.getRefObjectId = getRefObjectId;\nfunction isClassReference(ref) {\n    return ref.startsWith('.');\n}\nexports.isClassReference = isClassReference;\nfunction getRefClass(ref) {\n    return ref.slice(1);\n}\nexports.getRefClass = getRefClass;\nfunction isLayerReference(ref) {\n    return ref.startsWith('$');\n}\nexports.isLayerReference = isLayerReference;\nfunction getRefLayer(ref) {\n    return ref.slice(1);\n}\nexports.getRefLayer = getRefLayer;\nfunction isInstanceReference(ref) {\n    return ref.startsWith('@');\n}\nexports.isInstanceReference = isInstanceReference;\nfunction getRefInstanceId(ref) {\n    return ref.slice(1);\n}\nexports.getRefInstanceId = getRefInstanceId;\n/** Add / join references Arrays. Returns a sorted list of unique references */\nfunction joinReferences(references, ...addReferences) {\n    const toc = (0, performance_1.tic)('     joinReferences');\n    // Fast path: When nothing is added, return the original references:\n    if (addReferences.length === 1 && typeof addReferences[0] !== 'string' && addReferences[0].length === 0) {\n        return [...references];\n    }\n    let fastPath = false;\n    let resultingRefs = [];\n    // Fast path: When a single ref is added\n    if (addReferences.length === 1 && typeof addReferences[0] === 'string') {\n        if (references.includes(addReferences[0])) {\n            // The value already exists, return the original references:\n            return [...references];\n        }\n        else {\n            // just quickly add the reference and jump forward to sorting of resultingRefs:\n            resultingRefs = [...references];\n            resultingRefs.push(addReferences[0]);\n            fastPath = true;\n        }\n    }\n    if (!fastPath) {\n        const refSet = new Set();\n        for (const ref of references) {\n            if (!refSet.has(ref)) {\n                refSet.add(ref);\n                resultingRefs.push(ref);\n            }\n        }\n        for (const addReference of addReferences) {\n            if (typeof addReference === 'string') {\n                if (!refSet.has(addReference)) {\n                    refSet.add(addReference);\n                    resultingRefs.push(addReference);\n                }\n            }\n            else {\n                for (const ref of addReference) {\n                    if (!refSet.has(ref)) {\n                        refSet.add(ref);\n                        resultingRefs.push(ref);\n                    }\n                }\n            }\n        }\n    }\n    resultingRefs.sort(lib_1.compareStrings);\n    toc();\n    return resultingRefs;\n}\nexports.joinReferences = joinReferences;\nfunction isReference(ref) {\n    return ref !== null && typeof ref.value === 'number';\n}\nexports.isReference = isReference;\n//# sourceMappingURL=reference.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.objHasLayer = void 0;\n/**\n * Returns true if object has a layer.\n * Note: Objects without a layer are called \"transparent objects\",\n * and won't be present in the resolved state.\n */\nfunction objHasLayer(obj) {\n    return obj.layer !== undefined && obj.layer !== '' && obj.layer !== null;\n}\nexports.objHasLayer = objHasLayer;\n//# sourceMappingURL=timeline.js.map","/******************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global global, define, Symbol, Reflect, Promise, SuppressedError */\r\nvar __extends;\r\nvar __assign;\r\nvar __rest;\r\nvar __decorate;\r\nvar __param;\r\nvar __esDecorate;\r\nvar __runInitializers;\r\nvar __propKey;\r\nvar __setFunctionName;\r\nvar __metadata;\r\nvar __awaiter;\r\nvar __generator;\r\nvar __exportStar;\r\nvar __values;\r\nvar __read;\r\nvar __spread;\r\nvar __spreadArrays;\r\nvar __spreadArray;\r\nvar __await;\r\nvar __asyncGenerator;\r\nvar __asyncDelegator;\r\nvar __asyncValues;\r\nvar __makeTemplateObject;\r\nvar __importStar;\r\nvar __importDefault;\r\nvar __classPrivateFieldGet;\r\nvar __classPrivateFieldSet;\r\nvar __classPrivateFieldIn;\r\nvar __createBinding;\r\nvar __addDisposableResource;\r\nvar __disposeResources;\r\n(function (factory) {\r\n    var root = typeof global === \"object\" ? global : typeof self === \"object\" ? self : typeof this === \"object\" ? this : {};\r\n    if (typeof define === \"function\" && define.amd) {\r\n        define(\"tslib\", [\"exports\"], function (exports) { factory(createExporter(root, createExporter(exports))); });\r\n    }\r\n    else if (typeof module === \"object\" && typeof module.exports === \"object\") {\r\n        factory(createExporter(root, createExporter(module.exports)));\r\n    }\r\n    else {\r\n        factory(createExporter(root));\r\n    }\r\n    function createExporter(exports, previous) {\r\n        if (exports !== root) {\r\n            if (typeof Object.create === \"function\") {\r\n                Object.defineProperty(exports, \"__esModule\", { value: true });\r\n            }\r\n            else {\r\n                exports.__esModule = true;\r\n            }\r\n        }\r\n        return function (id, v) { return exports[id] = previous ? previous(id, v) : v; };\r\n    }\r\n})\r\n(function (exporter) {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n\r\n    __extends = function (d, b) {\r\n        if (typeof b !== \"function\" && b !== null)\r\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n\r\n    __assign = Object.assign || function (t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    };\r\n\r\n    __rest = function (s, e) {\r\n        var t = {};\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n            t[p] = s[p];\r\n        if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                    t[p[i]] = s[p[i]];\r\n            }\r\n        return t;\r\n    };\r\n\r\n    __decorate = function (decorators, target, key, desc) {\r\n        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n        if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n        return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n    };\r\n\r\n    __param = function (paramIndex, decorator) {\r\n        return function (target, key) { decorator(target, key, paramIndex); }\r\n    };\r\n\r\n    __esDecorate = function (ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {\r\n        function accept(f) { if (f !== void 0 && typeof f !== \"function\") throw new TypeError(\"Function expected\"); return f; }\r\n        var kind = contextIn.kind, key = kind === \"getter\" ? \"get\" : kind === \"setter\" ? \"set\" : \"value\";\r\n        var target = !descriptorIn && ctor ? contextIn[\"static\"] ? ctor : ctor.prototype : null;\r\n        var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});\r\n        var _, done = false;\r\n        for (var i = decorators.length - 1; i >= 0; i--) {\r\n            var context = {};\r\n            for (var p in contextIn) context[p] = p === \"access\" ? {} : contextIn[p];\r\n            for (var p in contextIn.access) context.access[p] = contextIn.access[p];\r\n            context.addInitializer = function (f) { if (done) throw new TypeError(\"Cannot add initializers after decoration has completed\"); extraInitializers.push(accept(f || null)); };\r\n            var result = (0, decorators[i])(kind === \"accessor\" ? { get: descriptor.get, set: descriptor.set } : descriptor[key], context);\r\n            if (kind === \"accessor\") {\r\n                if (result === void 0) continue;\r\n                if (result === null || typeof result !== \"object\") throw new TypeError(\"Object expected\");\r\n                if (_ = accept(result.get)) descriptor.get = _;\r\n                if (_ = accept(result.set)) descriptor.set = _;\r\n                if (_ = accept(result.init)) initializers.unshift(_);\r\n            }\r\n            else if (_ = accept(result)) {\r\n                if (kind === \"field\") initializers.unshift(_);\r\n                else descriptor[key] = _;\r\n            }\r\n        }\r\n        if (target) Object.defineProperty(target, contextIn.name, descriptor);\r\n        done = true;\r\n    };\r\n\r\n    __runInitializers = function (thisArg, initializers, value) {\r\n        var useValue = arguments.length > 2;\r\n        for (var i = 0; i < initializers.length; i++) {\r\n            value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);\r\n        }\r\n        return useValue ? value : void 0;\r\n    };\r\n\r\n    __propKey = function (x) {\r\n        return typeof x === \"symbol\" ? x : \"\".concat(x);\r\n    };\r\n\r\n    __setFunctionName = function (f, name, prefix) {\r\n        if (typeof name === \"symbol\") name = name.description ? \"[\".concat(name.description, \"]\") : \"\";\r\n        return Object.defineProperty(f, \"name\", { configurable: true, value: prefix ? \"\".concat(prefix, \" \", name) : name });\r\n    };\r\n\r\n    __metadata = function (metadataKey, metadataValue) {\r\n        if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n    };\r\n\r\n    __awaiter = function (thisArg, _arguments, P, generator) {\r\n        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n        return new (P || (P = Promise))(function (resolve, reject) {\r\n            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n            function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n            step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n        });\r\n    };\r\n\r\n    __generator = function (thisArg, body) {\r\n        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n        return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n        function verb(n) { return function (v) { return step([n, v]); }; }\r\n        function step(op) {\r\n            if (f) throw new TypeError(\"Generator is already executing.\");\r\n            while (g && (g = 0, op[0] && (_ = 0)), _) try {\r\n                if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n                if (y = 0, t) op = [op[0] & 2, t.value];\r\n                switch (op[0]) {\r\n                    case 0: case 1: t = op; break;\r\n                    case 4: _.label++; return { value: op[1], done: false };\r\n                    case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                    case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                    default:\r\n                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                        if (t[2]) _.ops.pop();\r\n                        _.trys.pop(); continue;\r\n                }\r\n                op = body.call(thisArg, _);\r\n            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n        }\r\n    };\r\n\r\n    __exportStar = function(m, o) {\r\n        for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\r\n    };\r\n\r\n    __createBinding = Object.create ? (function(o, m, k, k2) {\r\n        if (k2 === undefined) k2 = k;\r\n        var desc = Object.getOwnPropertyDescriptor(m, k);\r\n        if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\r\n            desc = { enumerable: true, get: function() { return m[k]; } };\r\n        }\r\n        Object.defineProperty(o, k2, desc);\r\n    }) : (function(o, m, k, k2) {\r\n        if (k2 === undefined) k2 = k;\r\n        o[k2] = m[k];\r\n    });\r\n\r\n    __values = function (o) {\r\n        var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n        if (m) return m.call(o);\r\n        if (o && typeof o.length === \"number\") return {\r\n            next: function () {\r\n                if (o && i >= o.length) o = void 0;\r\n                return { value: o && o[i++], done: !o };\r\n            }\r\n        };\r\n        throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n    };\r\n\r\n    __read = function (o, n) {\r\n        var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n        if (!m) return o;\r\n        var i = m.call(o), r, ar = [], e;\r\n        try {\r\n            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n        }\r\n        catch (error) { e = { error: error }; }\r\n        finally {\r\n            try {\r\n                if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n            }\r\n            finally { if (e) throw e.error; }\r\n        }\r\n        return ar;\r\n    };\r\n\r\n    /** @deprecated */\r\n    __spread = function () {\r\n        for (var ar = [], i = 0; i < arguments.length; i++)\r\n            ar = ar.concat(__read(arguments[i]));\r\n        return ar;\r\n    };\r\n\r\n    /** @deprecated */\r\n    __spreadArrays = function () {\r\n        for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n        for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n                r[k] = a[j];\r\n        return r;\r\n    };\r\n\r\n    __spreadArray = function (to, from, pack) {\r\n        if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\r\n            if (ar || !(i in from)) {\r\n                if (!ar) ar = Array.prototype.slice.call(from, 0, i);\r\n                ar[i] = from[i];\r\n            }\r\n        }\r\n        return to.concat(ar || Array.prototype.slice.call(from));\r\n    };\r\n\r\n    __await = function (v) {\r\n        return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n    };\r\n\r\n    __asyncGenerator = function (thisArg, _arguments, generator) {\r\n        if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n        var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n        return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n        function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n        function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);  }\r\n        function fulfill(value) { resume(\"next\", value); }\r\n        function reject(value) { resume(\"throw\", value); }\r\n        function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n    };\r\n\r\n    __asyncDelegator = function (o) {\r\n        var i, p;\r\n        return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: false } : f ? f(v) : v; } : f; }\r\n    };\r\n\r\n    __asyncValues = function (o) {\r\n        if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n        var m = o[Symbol.asyncIterator], i;\r\n        return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n    };\r\n\r\n    __makeTemplateObject = function (cooked, raw) {\r\n        if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n        return cooked;\r\n    };\r\n\r\n    var __setModuleDefault = Object.create ? (function(o, v) {\r\n        Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n    }) : function(o, v) {\r\n        o[\"default\"] = v;\r\n    };\r\n\r\n    __importStar = function (mod) {\r\n        if (mod && mod.__esModule) return mod;\r\n        var result = {};\r\n        if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n        __setModuleDefault(result, mod);\r\n        return result;\r\n    };\r\n\r\n    __importDefault = function (mod) {\r\n        return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n    };\r\n\r\n    __classPrivateFieldGet = function (receiver, state, kind, f) {\r\n        if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\r\n        if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\r\n        return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\r\n    };\r\n\r\n    __classPrivateFieldSet = function (receiver, state, value, kind, f) {\r\n        if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\r\n        if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\r\n        if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\r\n        return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\r\n    };\r\n\r\n    __classPrivateFieldIn = function (state, receiver) {\r\n        if (receiver === null || (typeof receiver !== \"object\" && typeof receiver !== \"function\")) throw new TypeError(\"Cannot use 'in' operator on non-object\");\r\n        return typeof state === \"function\" ? receiver === state : state.has(receiver);\r\n    };\r\n\r\n    __addDisposableResource = function (env, value, async) {\r\n        if (value !== null && value !== void 0) {\r\n            if (typeof value !== \"object\" && typeof value !== \"function\") throw new TypeError(\"Object expected.\");\r\n            var dispose;\r\n            if (async) {\r\n                if (!Symbol.asyncDispose) throw new TypeError(\"Symbol.asyncDispose is not defined.\");\r\n                dispose = value[Symbol.asyncDispose];\r\n            }\r\n            if (dispose === void 0) {\r\n                if (!Symbol.dispose) throw new TypeError(\"Symbol.dispose is not defined.\");\r\n                dispose = value[Symbol.dispose];\r\n            }\r\n            if (typeof dispose !== \"function\") throw new TypeError(\"Object not disposable.\");\r\n            env.stack.push({ value: value, dispose: dispose, async: async });\r\n        }\r\n        else if (async) {\r\n            env.stack.push({ async: true });\r\n        }\r\n        return value;\r\n    };\r\n\r\n    var _SuppressedError = typeof SuppressedError === \"function\" ? SuppressedError : function (error, suppressed, message) {\r\n        var e = new Error(message);\r\n        return e.name = \"SuppressedError\", e.error = error, e.suppressed = suppressed, e;\r\n    };\r\n\r\n    __disposeResources = function (env) {\r\n        function fail(e) {\r\n            env.error = env.hasError ? new _SuppressedError(e, env.error, \"An error was suppressed during disposal.\") : e;\r\n            env.hasError = true;\r\n        }\r\n        function next() {\r\n            while (env.stack.length) {\r\n                var rec = env.stack.pop();\r\n                try {\r\n                    var result = rec.dispose && rec.dispose.call(rec.value);\r\n                    if (rec.async) return Promise.resolve(result).then(next, function(e) { fail(e); return next(); });\r\n                }\r\n                catch (e) {\r\n                    fail(e);\r\n                }\r\n            }\r\n            if (env.hasError) throw env.error;\r\n        }\r\n        return next();\r\n    };\r\n\r\n    exporter(\"__extends\", __extends);\r\n    exporter(\"__assign\", __assign);\r\n    exporter(\"__rest\", __rest);\r\n    exporter(\"__decorate\", __decorate);\r\n    exporter(\"__param\", __param);\r\n    exporter(\"__esDecorate\", __esDecorate);\r\n    exporter(\"__runInitializers\", __runInitializers);\r\n    exporter(\"__propKey\", __propKey);\r\n    exporter(\"__setFunctionName\", __setFunctionName);\r\n    exporter(\"__metadata\", __metadata);\r\n    exporter(\"__awaiter\", __awaiter);\r\n    exporter(\"__generator\", __generator);\r\n    exporter(\"__exportStar\", __exportStar);\r\n    exporter(\"__createBinding\", __createBinding);\r\n    exporter(\"__values\", __values);\r\n    exporter(\"__read\", __read);\r\n    exporter(\"__spread\", __spread);\r\n    exporter(\"__spreadArrays\", __spreadArrays);\r\n    exporter(\"__spreadArray\", __spreadArray);\r\n    exporter(\"__await\", __await);\r\n    exporter(\"__asyncGenerator\", __asyncGenerator);\r\n    exporter(\"__asyncDelegator\", __asyncDelegator);\r\n    exporter(\"__asyncValues\", __asyncValues);\r\n    exporter(\"__makeTemplateObject\", __makeTemplateObject);\r\n    exporter(\"__importStar\", __importStar);\r\n    exporter(\"__importDefault\", __importDefault);\r\n    exporter(\"__classPrivateFieldGet\", __classPrivateFieldGet);\r\n    exporter(\"__classPrivateFieldSet\", __classPrivateFieldSet);\r\n    exporter(\"__classPrivateFieldIn\", __classPrivateFieldIn);\r\n    exporter(\"__addDisposableResource\", __addDisposableResource);\r\n    exporter(\"__disposeResources\", __disposeResources);\r\n});\r\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n\r\n/* global global, define, System, Reflect, Promise */\r\nvar __extends;\r\nvar __assign;\r\nvar __rest;\r\nvar __decorate;\r\nvar __param;\r\nvar __metadata;\r\nvar __awaiter;\r\nvar __generator;\r\nvar __exportStar;\r\nvar __values;\r\nvar __read;\r\nvar __spread;\r\nvar __spreadArrays;\r\nvar __await;\r\nvar __asyncGenerator;\r\nvar __asyncDelegator;\r\nvar __asyncValues;\r\nvar __makeTemplateObject;\r\nvar __importStar;\r\nvar __importDefault;\r\nvar __classPrivateFieldGet;\r\nvar __classPrivateFieldSet;\r\nvar __createBinding;\r\n(function (factory) {\r\n    var root = typeof global === \"object\" ? global : typeof self === \"object\" ? self : typeof this === \"object\" ? this : {};\r\n    if (typeof define === \"function\" && define.amd) {\r\n        define(\"tslib\", [\"exports\"], function (exports) { factory(createExporter(root, createExporter(exports))); });\r\n    }\r\n    else if (typeof module === \"object\" && typeof module.exports === \"object\") {\r\n        factory(createExporter(root, createExporter(module.exports)));\r\n    }\r\n    else {\r\n        factory(createExporter(root));\r\n    }\r\n    function createExporter(exports, previous) {\r\n        if (exports !== root) {\r\n            if (typeof Object.create === \"function\") {\r\n                Object.defineProperty(exports, \"__esModule\", { value: true });\r\n            }\r\n            else {\r\n                exports.__esModule = true;\r\n            }\r\n        }\r\n        return function (id, v) { return exports[id] = previous ? previous(id, v) : v; };\r\n    }\r\n})\r\n(function (exporter) {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\n    __extends = function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n\r\n    __assign = Object.assign || function (t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    };\r\n\r\n    __rest = function (s, e) {\r\n        var t = {};\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n            t[p] = s[p];\r\n        if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                    t[p[i]] = s[p[i]];\r\n            }\r\n        return t;\r\n    };\r\n\r\n    __decorate = function (decorators, target, key, desc) {\r\n        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n        if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n        return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n    };\r\n\r\n    __param = function (paramIndex, decorator) {\r\n        return function (target, key) { decorator(target, key, paramIndex); }\r\n    };\r\n\r\n    __metadata = function (metadataKey, metadataValue) {\r\n        if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n    };\r\n\r\n    __awaiter = function (thisArg, _arguments, P, generator) {\r\n        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n        return new (P || (P = Promise))(function (resolve, reject) {\r\n            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n            function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n            step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n        });\r\n    };\r\n\r\n    __generator = function (thisArg, body) {\r\n        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n        return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n        function verb(n) { return function (v) { return step([n, v]); }; }\r\n        function step(op) {\r\n            if (f) throw new TypeError(\"Generator is already executing.\");\r\n            while (_) try {\r\n                if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n                if (y = 0, t) op = [op[0] & 2, t.value];\r\n                switch (op[0]) {\r\n                    case 0: case 1: t = op; break;\r\n                    case 4: _.label++; return { value: op[1], done: false };\r\n                    case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                    case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                    default:\r\n                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                        if (t[2]) _.ops.pop();\r\n                        _.trys.pop(); continue;\r\n                }\r\n                op = body.call(thisArg, _);\r\n            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n        }\r\n    };\r\n\r\n    __createBinding = function(o, m, k, k2) {\r\n        if (k2 === undefined) k2 = k;\r\n        o[k2] = m[k];\r\n    };\r\n\r\n    __exportStar = function (m, exports) {\r\n        for (var p in m) if (p !== \"default\" && !exports.hasOwnProperty(p)) exports[p] = m[p];\r\n    };\r\n\r\n    __values = function (o) {\r\n        var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n        if (m) return m.call(o);\r\n        if (o && typeof o.length === \"number\") return {\r\n            next: function () {\r\n                if (o && i >= o.length) o = void 0;\r\n                return { value: o && o[i++], done: !o };\r\n            }\r\n        };\r\n        throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n    };\r\n\r\n    __read = function (o, n) {\r\n        var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n        if (!m) return o;\r\n        var i = m.call(o), r, ar = [], e;\r\n        try {\r\n            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n        }\r\n        catch (error) { e = { error: error }; }\r\n        finally {\r\n            try {\r\n                if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n            }\r\n            finally { if (e) throw e.error; }\r\n        }\r\n        return ar;\r\n    };\r\n\r\n    __spread = function () {\r\n        for (var ar = [], i = 0; i < arguments.length; i++)\r\n            ar = ar.concat(__read(arguments[i]));\r\n        return ar;\r\n    };\r\n\r\n    __spreadArrays = function () {\r\n        for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n        for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n                r[k] = a[j];\r\n        return r;\r\n    };\r\n\r\n    __await = function (v) {\r\n        return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n    };\r\n\r\n    __asyncGenerator = function (thisArg, _arguments, generator) {\r\n        if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n        var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n        return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n        function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n        function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);  }\r\n        function fulfill(value) { resume(\"next\", value); }\r\n        function reject(value) { resume(\"throw\", value); }\r\n        function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n    };\r\n\r\n    __asyncDelegator = function (o) {\r\n        var i, p;\r\n        return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n    };\r\n\r\n    __asyncValues = function (o) {\r\n        if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n        var m = o[Symbol.asyncIterator], i;\r\n        return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n    };\r\n\r\n    __makeTemplateObject = function (cooked, raw) {\r\n        if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n        return cooked;\r\n    };\r\n\r\n    __importStar = function (mod) {\r\n        if (mod && mod.__esModule) return mod;\r\n        var result = {};\r\n        if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n        result[\"default\"] = mod;\r\n        return result;\r\n    };\r\n\r\n    __importDefault = function (mod) {\r\n        return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n    };\r\n\r\n    __classPrivateFieldGet = function (receiver, privateMap) {\r\n        if (!privateMap.has(receiver)) {\r\n            throw new TypeError(\"attempted to get private field on non-instance\");\r\n        }\r\n        return privateMap.get(receiver);\r\n    };\r\n\r\n    __classPrivateFieldSet = function (receiver, privateMap, value) {\r\n        if (!privateMap.has(receiver)) {\r\n            throw new TypeError(\"attempted to set private field on non-instance\");\r\n        }\r\n        privateMap.set(receiver, value);\r\n        return value;\r\n    };\r\n\r\n    exporter(\"__extends\", __extends);\r\n    exporter(\"__assign\", __assign);\r\n    exporter(\"__rest\", __rest);\r\n    exporter(\"__decorate\", __decorate);\r\n    exporter(\"__param\", __param);\r\n    exporter(\"__metadata\", __metadata);\r\n    exporter(\"__awaiter\", __awaiter);\r\n    exporter(\"__generator\", __generator);\r\n    exporter(\"__exportStar\", __exportStar);\r\n    exporter(\"__createBinding\", __createBinding);\r\n    exporter(\"__values\", __values);\r\n    exporter(\"__read\", __read);\r\n    exporter(\"__spread\", __spread);\r\n    exporter(\"__spreadArrays\", __spreadArrays);\r\n    exporter(\"__await\", __await);\r\n    exporter(\"__asyncGenerator\", __asyncGenerator);\r\n    exporter(\"__asyncDelegator\", __asyncDelegator);\r\n    exporter(\"__asyncValues\", __asyncValues);\r\n    exporter(\"__makeTemplateObject\", __makeTemplateObject);\r\n    exporter(\"__importStar\", __importStar);\r\n    exporter(\"__importDefault\", __importDefault);\r\n    exporter(\"__classPrivateFieldGet\", __classPrivateFieldGet);\r\n    exporter(\"__classPrivateFieldSet\", __classPrivateFieldSet);\r\n});\r\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}