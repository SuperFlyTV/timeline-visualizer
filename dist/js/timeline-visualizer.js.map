{"version":3,"sources":["node_modules/browser-pack/_prelude.js","dist/index.js","dist/lib/timelineVisualizer.js","node_modules/events/events.js","node_modules/lodash.isequal/index.js","node_modules/superfly-timeline/dist/api/api.js","node_modules/superfly-timeline/dist/api/enums.js","node_modules/superfly-timeline/dist/index.js","node_modules/superfly-timeline/dist/lib.js","node_modules/superfly-timeline/dist/resolver/cache.js","node_modules/superfly-timeline/dist/resolver/common.js","node_modules/superfly-timeline/dist/resolver/expression.js","node_modules/superfly-timeline/dist/resolver/resolver.js","node_modules/superfly-timeline/dist/resolver/state.js","node_modules/superfly-timeline/dist/resolver/validate.js","node_modules/superfly-timeline/node_modules/tslib/tslib.js","node_modules/tslib/tslib.js","node_modules/underscore/underscore-umd.js"],"names":[],"mappingshgxzjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnpvnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;ACzfile":"timeline-visualizer.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst tslib_1 = require(\"tslib\");\r\ntslib_1.__exportStar(require(\"./lib/timelineVisualizer\"), exports);\r\n//# sourceMappingURL=index.js.map","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.TimelineVisualizer = void 0;\r\nconst isEqual = require(\"lodash.isequal\");\r\nconst superfly_timeline_1 = require(\"superfly-timeline\");\r\nconst events_1 = require(\"events\");\r\n/** Step size/ time step. */\r\nconst DEFAULT_STEP_SIZE = 1;\r\n/** Width of label column. */\r\nconst LABEL_WIDTH_OF_TIMELINE = 0.25;\r\n/** Default zoom */\r\nconst DEFAULT_ZOOM_VALUE = 100;\r\n/** Factor to zoom by */\r\nconst ZOOM_FACTOR = 1.001;\r\n/** Factor to pan by (pan = PAN_FACTOR * STEP_SIZE) */\r\nconst PAN_FACTOR = 10;\r\n/** Maximum layer height */\r\nconst MAX_LAYER_HEIGHT = 60;\r\n/** Amount to move playhead per second. */\r\nconst DEFAULT_PLAYHEAD_SPEED = 1;\r\n/** BEGIN STYLING VALUES */\r\n/** Timeline background color. */\r\nconst COLOR_BACKGROUND = '#333333';\r\n/** Layer label background color. */\r\nconst COLOR_LABEL_BACKGROUND = '#666666';\r\n/** Color of the ruler lines */\r\nconst RULER_LINE_COLOR = '#999999';\r\n/** Width of the ruler lines */\r\nconst RULER_LINE_WIDTH = 1;\r\n/** Playhead color. */\r\nconst COLOR_PLAYHEAD = 'rgba(255, 0, 0, 0.5)';\r\n/** Playhead thickness. */\r\nconst THICKNESS_PLAYHEAD = 5;\r\n/** Color of line separating timeline rows. */\r\nconst COLOR_LINE = 'black';\r\n/** Height of line separating rows. */\r\nconst THICKNESS_LINE = 1;\r\n/** Text properties. */\r\nconst TEXT_FONT_FAMILY = 'Calibri';\r\nconst TEXT_FONT_SIZE = 16;\r\nconst TEXT_COLOR = 'white';\r\n/** Timeline object properties. */\r\nconst COLOR_TIMELINE_OBJECT_FILL = 'rgb(22, 102, 247, 0.75)';\r\nconst COLOR_TIMELINE_OBJECT_BORDER = 'rgba(232, 240, 255, 0.85)';\r\nconst THICKNESS_TIMELINE_OBJECT_BORDER = 1;\r\n/** Timeline object height as a proportion of the row height. */\r\nconst TIMELINE_OBJECT_HEIGHT = 1;\r\n/** END STYLING VALUES */\r\n/** BEGIN CONSTANTS FOR STATE MANAGEMENT */\r\nconst MOUSEIN = 0;\r\nconst MOUSEOUT = 1;\r\nclass TimelineVisualizer extends events_1.EventEmitter {\r\n    /**\r\n     * @param {string} canvasId The ID of the canvas object to draw within.\r\n     */\r\n    constructor(canvasId, options = {}) {\r\n        super();\r\n        // Step size.\r\n        this.stepSize = DEFAULT_STEP_SIZE;\r\n        /** @private @readonly Proportion of the canvas to be used for the layer labels column. */\r\n        this._layerLabelWidthProportionOfCanvas = LABEL_WIDTH_OF_TIMELINE;\r\n        /** Layers on timeline. */\r\n        this._layerLabels = {};\r\n        /** State of the timeline. */\r\n        this._timelineState = {};\r\n        /** Map of objects for determining hovered object */\r\n        this._hoveredObjectMap = {};\r\n        /** Start time of the current view. Defines the objects within view on the timeline [time] */\r\n        this._viewStartTime = 0;\r\n        /** Range of the current view [time] */\r\n        // private _viewTimeRange: number = 1\r\n        // private _drawTimeEnd: number\r\n        /** Store whether the mouse is held down, for scrolling. */\r\n        this._mouseDown = false;\r\n        /** Current zoom amount. */\r\n        this._timelineZoom = DEFAULT_ZOOM_VALUE;\r\n        /** Whether or not the playhead should move. */\r\n        this._playHeadPlaying = false;\r\n        /** Speed of the playhead [units / second] */\r\n        this._playSpeed = DEFAULT_PLAYHEAD_SPEED;\r\n        /** The current time position of the playhead. */\r\n        this._playHeadTime = 0;\r\n        /** The last time updateDraw() did a draw. */\r\n        this._updateDrawLastTime = 0;\r\n        /** Whether the mouse last moved over an object or out. */\r\n        this._lastHoverAction = MOUSEOUT;\r\n        /** Name of object that was last hovered over. */\r\n        this._lastHoveredHash = '';\r\n        /** If the visualizer automatically should re-resolve the timeline when navigating the viewport */\r\n        this._timelineResolveAuto = false;\r\n        /** At what time the timeline was resolved [time] */\r\n        this._timelineResolveStart = 0;\r\n        this._timelineResolveEnd = 0;\r\n        this._timelineResolveZoom = 1;\r\n        this._timelineResolveCount = 100;\r\n        this._timelineResolveCountAdjust = 1;\r\n        /** How much extra (outside the current viewport) the timeline should be resolved to [ratio] */\r\n        this._timelineResolveExpand = 3;\r\n        this.latestUpdateTime = 0;\r\n        this.reresolveTimeout = null;\r\n        this._mergeIterator = 0;\r\n        // Initialise other values.\r\n        this._canvasId = canvasId;\r\n        this.initCanvas();\r\n        this._drawPlayhead = !!options.drawPlayhead;\r\n        // Calculate width of label column.\r\n        this._layerLabelWidth = this._canvasWidth * this._layerLabelWidthProportionOfCanvas;\r\n        // Calculate timeline width and start point.\r\n        this._viewDrawX = this._layerLabelWidth;\r\n        this._viewDrawWidth = this._canvasWidth - this._layerLabelWidth;\r\n        // Draw background.\r\n        this.drawBackground();\r\n        // Draw playhead.\r\n        this.drawPlayhead();\r\n        this.updateDraw();\r\n    }\r\n    /**\r\n     * Initialises the canvas and registers canvas events.\r\n     */\r\n    initCanvas() {\r\n        // Create new canvas object.\r\n        this._canvasContainer = document.getElementById(this._canvasId);\r\n        if (!this._canvasContainer)\r\n            throw new Error(`Canvas \"${this._canvasId}\" not found`);\r\n        // Get rendering context.\r\n        this._canvas = this._canvasContainer.getContext('2d');\r\n        // Register canvas interaction event handlers.\r\n        this._canvasContainer.addEventListener('mousedown', (event) => this.canvasMouseDown(event));\r\n        this._canvasContainer.addEventListener('mouseup', (event) => this.canvasMouseUp(event));\r\n        this._canvasContainer.addEventListener('mousemove', (event) => this.canvasMouseMove(event));\r\n        this._canvasContainer.addEventListener('wheel', (event) => this.canvasScrollWheel(event));\r\n        // Get width and height of canvas.\r\n        this._canvasWidth = this._canvasContainer.width;\r\n        this._canvasHeight = this._canvasContainer.height;\r\n    }\r\n    /**\r\n     * Updates the timeline, should be called when actions are added/removed from a timeline\r\n     * but the same timeline is being drawn.\r\n     * @param {TimelineObject[]} timeline Timeline to draw.\r\n     * @param {ResolveOptions} options Resolve options.\r\n     */\r\n    updateTimeline(timeline, options) {\r\n        // If options have not been specified set time to 0.\r\n        if (options === undefined) {\r\n            options = {\r\n                time: 0,\r\n                limitCount: 10\r\n            };\r\n        }\r\n        this.latestTimeline = timeline;\r\n        this.latestOptions = options;\r\n        if (!options.limitTime) {\r\n            this._timelineResolveAuto = true;\r\n        }\r\n        else {\r\n            this._timelineResolveAuto = false;\r\n        }\r\n        const options2 = Object.assign({}, options);\r\n        if (this._timelineResolveAuto) {\r\n            this.updateTimelineResolveWindow();\r\n        }\r\n        if (this._resolvedStates === undefined) { // If first time this runs\r\n            // Set timeline start and end times.\r\n            if (options2.time !== undefined) {\r\n                this._viewStartTime = options2.time;\r\n            }\r\n            // Move playhead to start time.\r\n            this._playHeadTime = this._viewStartTime;\r\n        }\r\n        this._updateTimeline(true);\r\n    }\r\n    _updateTimeline(fromNewTimeline = false) {\r\n        const options2 = Object.assign({}, this.latestOptions);\r\n        if (this._timelineResolveAuto) {\r\n            options2.time = this._timelineResolveStart;\r\n            options2.limitTime = this._timelineResolveEnd;\r\n            options2.limitCount = Math.ceil(this._timelineResolveCount * this._timelineResolveCountAdjust);\r\n        }\r\n        // If the playhead is being drawn, the resolve time should be at the playhead time.\r\n        if (this._drawPlayhead && this._playHeadTime > options2.time) {\r\n            options2.time = this._playHeadTime;\r\n        }\r\n        // Resolve the timeline.\r\n        const startResolve = Date.now();\r\n        const resolvedTimeline = superfly_timeline_1.Resolver.resolveTimeline(this.latestTimeline, options2);\r\n        let newResolvedStates = superfly_timeline_1.Resolver.resolveAllStates(resolvedTimeline);\r\n        if (this._resolvedStates === undefined) { // If first time this runs\r\n            this._resolvedStates = newResolvedStates;\r\n        }\r\n        else {\r\n            if (this._drawPlayhead) {\r\n                // Trim the current timeline:\r\n                if (newResolvedStates) {\r\n                    // Merge the timelines.\r\n                    this._resolvedStates = this.mergeTimelineObjects(this._resolvedStates, newResolvedStates, fromNewTimeline);\r\n                }\r\n            }\r\n            else {\r\n                // Otherwise we only see one timeline at a time.\r\n                // Overwrite the previous timeline:\r\n                this._resolvedStates = newResolvedStates;\r\n            }\r\n        }\r\n        // Update layers.\r\n        this.updateLayerLabels();\r\n        this.latestUpdateTime = Date.now() - startResolve;\r\n        // Redraw the timeline.\r\n        this.redrawTimeline();\r\n        this.latestUpdateTime = Date.now() - startResolve;\r\n    }\r\n    /**\r\n     * Sets the viewport to a position, zoom, and playback speed.\r\n     * Playback speed currently not implemented.\r\n     * @param viewPort Object to update viewport with.\r\n     */\r\n    setViewPort(viewPort) {\r\n        // Whether the viewport has changed.\r\n        let changed = false;\r\n        // If zoom has been specified.\r\n        if (viewPort.zoom !== undefined) {\r\n            // Zoom to specified zoom.\r\n            this._timelineZoom = viewPort.zoom;\r\n            changed = true;\r\n        }\r\n        // If timestamp has been specified.\r\n        if (viewPort.timestamp !== undefined) {\r\n            // Set start time to specified time.\r\n            if (viewPort.timestamp > 0) {\r\n                this._viewStartTime = viewPort.timestamp;\r\n                changed = true;\r\n            }\r\n        }\r\n        if (viewPort.playViewPort !== undefined) {\r\n            this._playViewPort = viewPort.playViewPort;\r\n        }\r\n        // If the playback speed has been set, set the new playback speed.\r\n        if (viewPort.playSpeed !== undefined) {\r\n            if (!this._drawPlayhead)\r\n                throw new Error('setViewPort: viewPort.playSpeed was set, but drawPlayhead was not set in constructor');\r\n            this._playSpeed = viewPort.playSpeed;\r\n        }\r\n        // Set playhead playing/ not playing.\r\n        if (viewPort.playPlayhead !== undefined) {\r\n            if (!this._drawPlayhead)\r\n                throw new Error('setViewPort: viewPort.playPlayhead was set, but drawPlayhead was not set in constructor');\r\n            this._playHeadPlaying = viewPort.playPlayhead;\r\n        }\r\n        if (viewPort.playheadTime !== undefined) {\r\n            if (!this._drawPlayhead)\r\n                throw new Error('setViewPort: viewPort.playheadTime was set, but drawPlayhead was not set in constructor');\r\n            this._playHeadTime = Math.max(0, viewPort.playheadTime);\r\n            if (this._playHeadTime > 0)\r\n                this._updateDrawLastTime = this._playHeadTime;\r\n            changed = true;\r\n        }\r\n        // Redraw timeline if anything has changed.\r\n        if (changed === true) {\r\n            this.redrawTimeline();\r\n        }\r\n    }\r\n    /**\r\n     * Accessor for polling the currently hovered over object.\r\n     */\r\n    getHoveredObject() {\r\n        return this._hoveredOver;\r\n    }\r\n    /**\r\n     * Calculates the height to give to each row to fit all layers on screen.\r\n     * @param {String[]} layers Map of layers to use.\r\n     * @returns Height of rows.\r\n     */\r\n    calculateRowHeight(layers) {\r\n        return Math.min(MAX_LAYER_HEIGHT, this._canvasHeight / Object.keys(layers).length);\r\n    }\r\n    updateLayerLabels() {\r\n        // Store layers to draw.\r\n        const o = this.getLayersToDraw();\r\n        if (!isEqual(this._layerLabels, o.layers)) {\r\n            this._layerLabels = o.layers;\r\n            // Calculate row height.\r\n            this._rowHeight = this.calculateRowHeight(this._layerLabels);\r\n            // Set timeline object height.\r\n            this._timelineObjectHeight = this._rowHeight * TIMELINE_OBJECT_HEIGHT;\r\n            this._numberOfLayers = Object.keys(this._layerLabels).length;\r\n            this._rowsTotalHeight = this._rowHeight * this._numberOfLayers;\r\n        }\r\n    }\r\n    getLayers() {\r\n        const layers = Object.entries(this._layerLabels);\r\n        layers.sort((a, b) => a[1] - b[1]);\r\n        return layers.map(l => l[0]);\r\n    }\r\n    /**\r\n     * Draws the layer labels to the canvas.\r\n     */\r\n    drawLayerLabels() {\r\n        let row = 0;\r\n        // Iterate through layers.\r\n        for (let layerName of this.getLayers()) {\r\n            this._canvas.fillStyle = COLOR_LABEL_BACKGROUND;\r\n            this._canvas.fillRect(0, row * this._rowHeight, this._layerLabelWidth, this._rowHeight);\r\n            this._canvas.fillStyle = TEXT_COLOR;\r\n            this._canvas.font = TEXT_FONT_SIZE.toString() + 'px ' + TEXT_FONT_FAMILY;\r\n            this._canvas.textBaseline = 'middle';\r\n            this._canvas.fillText(layerName, 0, (row * this._rowHeight) + (this._rowHeight / 2), this._layerLabelWidth);\r\n            if (this._layerLabels[layerName] !== 0) {\r\n                this._canvas.fillStyle = COLOR_LINE;\r\n                this._canvas.fillRect(this._layerLabelWidth, row * this._rowHeight, this._viewDrawWidth, THICKNESS_LINE);\r\n            }\r\n            row++;\r\n        }\r\n    }\r\n    /**\r\n     * Draws the timeline background.\r\n     */\r\n    drawBackground() {\r\n        this._canvas.fillStyle = COLOR_BACKGROUND;\r\n        this._canvas.fillRect(0, 0, this._canvasWidth, this._canvasHeight);\r\n        this.drawBackgroundRuler();\r\n    }\r\n    /**\r\n     * Draw a ruler on top of background\r\n     */\r\n    drawBackgroundRuler() {\r\n        const range = this.viewRange;\r\n        const endTime = this.viewEndTime;\r\n        const circaNumberOfLines = 5;\r\n        const rounder = Math.pow(10, Math.floor(Math.log10(range / circaNumberOfLines))); // What to round the ruler to\r\n        const rounderNext = rounder * 10;\r\n        const numberOfLines = Math.floor(range / rounder);\r\n        const rulerDiff = rounder;\r\n        const startTime = Math.floor(this._viewStartTime / rounder) * rounder;\r\n        const opacity = (Math.min(1, circaNumberOfLines / numberOfLines));\r\n        if (rulerDiff) {\r\n            this._canvas.strokeStyle = RULER_LINE_COLOR;\r\n            this._canvas.lineWidth = RULER_LINE_WIDTH;\r\n            for (let rulerTime = startTime; rulerTime < endTime; rulerTime += rulerDiff) {\r\n                this._canvas.beginPath();\r\n                let x = this.timeToXCoord(rulerTime);\r\n                let distanceToNext = (rulerTime / rounderNext) % 1;\r\n                if (distanceToNext > 0.5)\r\n                    distanceToNext -= 1;\r\n                distanceToNext = Math.abs(distanceToNext);\r\n                if (distanceToNext < 0.01) {\r\n                    // Is a significant line\r\n                    this._canvas.globalAlpha = 1;\r\n                }\r\n                else {\r\n                    this._canvas.globalAlpha = opacity;\r\n                }\r\n                if (x >= this._viewDrawX) {\r\n                    this._canvas.moveTo(x, 0);\r\n                    this._canvas.lineTo(x, this._canvasHeight);\r\n                }\r\n                this._canvas.stroke();\r\n            }\r\n            this._canvas.globalAlpha = 1;\r\n        }\r\n    }\r\n    /**\r\n     * Draws the playhead initially.\r\n     */\r\n    drawPlayhead() {\r\n        // If the playhead should be draw.\r\n        if (this._drawPlayhead) {\r\n            if (this.istimeInView(this._playHeadTime)) {\r\n                this._canvas.fillStyle = COLOR_PLAYHEAD;\r\n                this._canvas.fillRect(this.timeToXCoord(this._playHeadTime), 0, THICKNESS_PLAYHEAD, this._canvasHeight);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Gets the layers to draw from the timeline.\r\n     */\r\n    getLayersToDraw() {\r\n        this._hoveredObjectMap = {};\r\n        const layersArray = this._resolvedStates ? Object.keys(this._resolvedStates.layers) : [];\r\n        layersArray.sort((a, b) => a.localeCompare(b));\r\n        const layers = {};\r\n        layersArray.forEach((layerName, index) => {\r\n            layers[layerName] = index;\r\n            this._hoveredObjectMap[layerName] = [];\r\n        });\r\n        return {\r\n            layers: layers,\r\n            layersArray: layersArray\r\n        };\r\n    }\r\n    /**\r\n     * Redraws the timeline to the canvas.\r\n     */\r\n    redrawTimeline() {\r\n        this._canvas.clearRect(0, 0, this._canvasWidth, this._canvasHeight);\r\n        this.drawBackground();\r\n        this.drawLayerLabels();\r\n        // Recompute objects positions\r\n        this._timelineState = this.getTimelineDrawState(this._resolvedStates);\r\n        // Draw the current state.\r\n        this.drawTimelineState(this._timelineState);\r\n        this.drawPlayhead();\r\n        this.checkAutomaticReresolve();\r\n    }\r\n    /**\r\n     * Draws a timeline state to the canvas.\r\n     * @param {TimelineDrawState} currentDrawState State to draw.\r\n     */\r\n    drawTimelineState(currentDrawState) {\r\n        for (let element in currentDrawState) {\r\n            const drawState = currentDrawState[element];\r\n            if (drawState.visible) {\r\n                this._canvas.fillStyle = COLOR_TIMELINE_OBJECT_FILL;\r\n                this._canvas.fillRect(drawState.left, drawState.top, drawState.width, drawState.height);\r\n                this._canvas.strokeStyle = COLOR_TIMELINE_OBJECT_BORDER;\r\n                this._canvas.lineWidth = THICKNESS_TIMELINE_OBJECT_BORDER;\r\n                this._canvas.strokeRect(drawState.left, drawState.top, drawState.width, drawState.height);\r\n                this._canvas.fillStyle = TEXT_COLOR;\r\n                this._canvas.font = TEXT_FONT_SIZE.toString() + 'px ' + TEXT_FONT_FAMILY;\r\n                this._canvas.textBaseline = 'top';\r\n                this._canvas.fillText(drawState.title, drawState.left, drawState.top);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Returns the draw states for all timeline objects.\r\n     * @param {ResolvedStates} timeline Timeline to draw.\r\n     * @returns {TimelineDrawState} State of time-based objects.\r\n     */\r\n    getTimelineDrawState(timeline) {\r\n        let currentDrawState = {};\r\n        if (timeline) {\r\n            for (let objId in timeline.objects) {\r\n                let timelineObj = timeline.objects[objId];\r\n                for (let _i = 0; _i < timelineObj.resolved.instances.length; _i++) {\r\n                    let instanceObj = timelineObj.resolved.instances[_i];\r\n                    let name = 'timelineObject:' + objId + ':' + instanceObj.id;\r\n                    currentDrawState[name] = this.createStateForObject(timelineObj, instanceObj.start, instanceObj.end);\r\n                    if (currentDrawState[name].visible === true) {\r\n                        if (!this._hoveredObjectMap[timelineObj.layer + ''])\r\n                            this._hoveredObjectMap[timelineObj.layer + ''] = [];\r\n                        this._hoveredObjectMap[timelineObj.layer + ''].push({\r\n                            startX: currentDrawState[name].left,\r\n                            endX: currentDrawState[name].left + currentDrawState[name].width,\r\n                            objectRefId: objId,\r\n                            instanceId: instanceObj.id,\r\n                            type: 'timelineObject',\r\n                            name: name\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return currentDrawState;\r\n    }\r\n    /**\r\n     * Creates a draw state for a timeline object.\r\n     * @param {string} layer Object's layer.\r\n     * @param {number} start Start time.\r\n     * @param {number} end End time.\r\n     * @returns {DrawState} State of the object to draw.\r\n     */\r\n    createStateForObject(obj, start, end) {\r\n        // Default state (hidden).\r\n        let state = {\r\n            height: 0,\r\n            left: 0,\r\n            top: 0,\r\n            width: 0,\r\n            visible: false,\r\n            title: 'N/A'\r\n        };\r\n        // State should be default if the object is not being shown.\r\n        if (this.showOnTimeline(start, end)) {\r\n            // Get object dimensions and position.\r\n            let objectWidth = this.getObjectWidth(start, end);\r\n            let xCoord = this.capXcoordToView(this.timeToXCoord(start));\r\n            let objectTop = this.getObjectOffsetFromTop(obj.layer + '');\r\n            // Set state properties.\r\n            state.height = this._timelineObjectHeight;\r\n            state.left = xCoord;\r\n            state.top = objectTop;\r\n            state.width = objectWidth;\r\n            state.visible = true;\r\n            state.title = obj.id;\r\n        }\r\n        return state;\r\n    }\r\n    /**\r\n     * Calculates the offset, in pixels from the start of the timeline for an object.\r\n     * @param {number} start start time of the object.\r\n     * @returns {number} Offset in pixels.\r\n     */\r\n    // private getObjectOffsetFromTimelineStart (start: number): number {\r\n    // \t// Calculate offset.\r\n    // \tlet offset = (start - this._viewStartTime) * this.pixelsWidthPerUnitTime\r\n    // \t// Offset cannot be to the left of the timeline start position.\r\n    // \tif (offset < 0) {\r\n    // \t\toffset = 0\r\n    // \t}\r\n    // \treturn offset\r\n    // }\r\n    /**\r\n     * Calculates the width, in pixels, of an object based on its duration.\r\n     * @param {number} start Start time of the object.\r\n     * @param {number} end End time of the object.\r\n     * @returns {number} Width in pixels.\r\n     */\r\n    getObjectWidth(startTime, endTime) {\r\n        if (!endTime)\r\n            return this._canvasWidth;\r\n        // If the start time is less than the timeline start, set to timeline start.\r\n        if (startTime < this._viewStartTime) {\r\n            startTime = this._viewStartTime;\r\n        }\r\n        // Calculate duration of the object remaining on the timeline.\r\n        let duration = endTime - startTime;\r\n        // Return end point position in pixels.\r\n        return duration * this.pixelsWidthPerUnitTime;\r\n    }\r\n    /**\r\n     * Determines whether to show an object on the timeline.\r\n     * @param {number} start Object start time.\r\n     * @param {number} end Object end time.\r\n     * @returns {true} if object should be shown on the timeline.\r\n     */\r\n    showOnTimeline(start, end) {\r\n        let isAfter = start >= this.viewEndTime;\r\n        let isBefore = (end || Infinity) <= this._viewStartTime;\r\n        return !isAfter && !isBefore;\r\n    }\r\n    /**\r\n     * Calculate position of object instance from top of timeline according to its layer.\r\n     * @param {string} layer Object's layer.\r\n     * @returns Position relative to top of canvas in pixels.\r\n     */\r\n    getObjectOffsetFromTop(layerName) {\r\n        let top = this._layerLabels[layerName];\r\n        return top * this._rowHeight;\r\n    }\r\n    /**\r\n     * Moves the playhead. Called periodically.\r\n     */\r\n    updateDraw() {\r\n        const now = Date.now();\r\n        // How long time since last update:\r\n        const dt = (this._updateDrawLastTime > 0 ?\r\n            now - this._updateDrawLastTime :\r\n            1) / 1000;\r\n        this._updateDrawLastTime = now;\r\n        const deltaTime = this._playSpeed * dt;\r\n        // Check playhead should be drawn.\r\n        let needRedraw = false;\r\n        if (this._playHeadPlaying && this._drawPlayhead) {\r\n            if (this._playViewPort &&\r\n                this.istimeInView(this._playHeadTime) // Only play if playhead is in view\r\n            ) {\r\n                this._viewStartTime += deltaTime;\r\n            }\r\n            // Move playhead forward\r\n            this._playHeadTime += deltaTime;\r\n            needRedraw = true;\r\n        }\r\n        if (needRedraw) {\r\n            this.redrawTimeline();\r\n        }\r\n        // call this function on next frame\r\n        window.requestAnimationFrame(() => this.updateDraw());\r\n    }\r\n    /**\r\n     * Handles mouse down event.\r\n     * @param event Mouse event.\r\n     */\r\n    canvasMouseDown(event) {\r\n        // Store mouse is down.\r\n        this._mouseDown = true;\r\n        // Store X position of mouse on click.\r\n        this._mouseLastX = event.clientX;\r\n        // Prevent event.\r\n        event.preventDefault();\r\n        event.stopPropagation();\r\n    }\r\n    /**\r\n     * Handles mouse up event.\r\n     * @param event Mouse event.\r\n     */\r\n    canvasMouseUp(event) {\r\n        // Mouse no longer down.\r\n        this._mouseDown = false;\r\n        // Reset scroll direction.\r\n        this._lastScrollDirection = 0;\r\n        // Prevent event.\r\n        event.preventDefault();\r\n        event.stopPropagation();\r\n    }\r\n    /**\r\n     * Handles mouse movement on canvas.\r\n     * @param event Mouse event.\r\n     */\r\n    canvasMouseMove(event) {\r\n        // If mouse is down.\r\n        if (this._mouseDown) {\r\n            // If we are beginning scrolling, we can move freely.\r\n            if (this._lastScrollDirection === undefined || this._lastScrollDirection === 0) {\r\n                // Store current mouse X.\r\n                this._mouseLastX = event.clientX;\r\n                // Calculate change in X.\r\n                let deltaX = event.clientX - this._mouseLastX;\r\n                // Store scrolling direction.\r\n                if (deltaX < 0) {\r\n                    this._lastScrollDirection = -1;\r\n                }\r\n                else {\r\n                    this._lastScrollDirection = 1;\r\n                }\r\n                // Scroll to new X position.\r\n                this.canvasScrollByDeltaX(-deltaX);\r\n            }\r\n            else {\r\n                // Calculate scroll direction.\r\n                let direction = this._mouseLastX - event.clientX;\r\n                // If changing direction, store new direction but don't scroll.\r\n                if (direction < 0 && this._lastScrollDirection === 1) {\r\n                    this._mouseLastX = event.clientX;\r\n                    this._lastScrollDirection = -1;\r\n                }\r\n                else if (direction > 0 && this._lastScrollDirection === -1) {\r\n                    this._mouseLastX = event.clientX;\r\n                    this._lastScrollDirection = 1;\r\n                }\r\n                else {\r\n                    // Calculate change in X.\r\n                    let deltaX = event.clientX - this._mouseLastX;\r\n                    // Store last X position.\r\n                    this._mouseLastX = event.clientX;\r\n                    // Move by change in X.\r\n                    this.canvasScrollByDeltaX(-deltaX);\r\n                }\r\n            }\r\n            // Redraw timeline.\r\n            this.redrawTimeline();\r\n        }\r\n        else {\r\n            // Whether an object is under the cursor.\r\n            let found = false;\r\n            // Find the object that is currently hovered over.\r\n            let mousePos = this.getMousePos(this._canvasContainer, event);\r\n            if (mousePos.x > this._viewDrawX) {\r\n                if (mousePos.y < this._rowsTotalHeight) {\r\n                    let selectedRow = Math.floor((mousePos.y / this._rowsTotalHeight) * this._numberOfLayers);\r\n                    let layer;\r\n                    Object.keys(this._layerLabels).forEach(layerName => {\r\n                        if (this._layerLabels[layerName] === selectedRow)\r\n                            layer = layerName;\r\n                    });\r\n                    let hoverMapData = (layer ? this._hoveredObjectMap[layer] : []) || [];\r\n                    hoverMapData.forEach(object => {\r\n                        if (object.startX <= mousePos.x && object.endX >= mousePos.x) {\r\n                            found = true;\r\n                            const hoverHash = object.type + object.objectRefId + object.instanceId; // hash-ish\r\n                            if (this._lastHoveredHash !== hoverHash) {\r\n                                // Get object metadata from the object name of the hovered object.\r\n                                // If we are hovering over a timeline object.\r\n                                if (object.type === 'timelineObject') {\r\n                                    // Get the timeline object and the instance being hovered over.\r\n                                    if (this._resolvedStates) {\r\n                                        let timelineObject = this._resolvedStates.objects[object.objectRefId];\r\n                                        let instance = timelineObject.resolved.instances.find(instance => instance.id === object.instanceId);\r\n                                        if (instance) {\r\n                                            // Construct hover info.\r\n                                            let hoverInfo = {\r\n                                                object: timelineObject,\r\n                                                instance: instance,\r\n                                                pointer: { xPostion: mousePos.x, yPosition: mousePos.y }\r\n                                            };\r\n                                            // Set currently hovered object.\r\n                                            this._hoveredOver = hoverInfo;\r\n                                            // Emit event.\r\n                                            this.emit('timeline:hover', { detail: this._hoveredOver });\r\n                                        }\r\n                                        // Store last items.\r\n                                        this._lastHoverAction = MOUSEIN;\r\n                                        this._lastHoveredHash = hoverHash;\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n            // Emit undefined when mouse out.\r\n            if (!found && this._lastHoverAction === MOUSEIN) {\r\n                this.emit('timeline:hover', { detail: undefined });\r\n                this._lastHoverAction = MOUSEOUT;\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Handles scroll wheel events on the canvas.\r\n     * @param event Scroll event.\r\n     */\r\n    canvasScrollWheel(event) {\r\n        // Get mouse pointer coordinates on canvas.\r\n        let canvasCoord = this.getMousePos(this._canvasContainer, event);\r\n        // Don't scroll if mouse is not over timeline.\r\n        if (canvasCoord.x <= this._viewDrawX) {\r\n            return;\r\n        }\r\n        let changed = false;\r\n        // CTRL + scroll to zoom.\r\n        if (event.ctrlKey === true) {\r\n            if (event.deltaY) {\r\n                changed = true;\r\n                const zoomFactor = Math.pow(ZOOM_FACTOR, -event.deltaY);\r\n                this.zoomUnderCursor(canvasCoord.x, zoomFactor);\r\n            }\r\n        }\r\n        else if (event.deltaX !== 0) { // Scroll on x-axis\r\n            changed = true;\r\n            // Pan.\r\n            this.canvasScrollByDeltaX((event.deltaX * (PAN_FACTOR * this.stepSize)));\r\n        }\r\n        else if (event.deltaY !== 0 && event.altKey === true) { // Also scroll on alt-key + scroll y-axis\r\n            changed = true;\r\n            // Pan.\r\n            this.canvasScrollByDeltaX((event.deltaY * (PAN_FACTOR * this.stepSize)));\r\n        }\r\n        // Prevent event.\r\n        event.preventDefault();\r\n        event.stopPropagation();\r\n        if (changed) {\r\n            // Redraw timeline.\r\n            this.redrawTimeline();\r\n        }\r\n    }\r\n    /**\r\n     * Scroll across the canvas by a specified X value.\r\n     * @param {number} deltaX Value to move by.\r\n     */\r\n    canvasScrollByDeltaX(deltaX) {\r\n        // Calculate new starting time.\r\n        let targetStart = this._viewStartTime + (deltaX / this.pixelsWidthPerUnitTime);\r\n        // Starting time cannot be < 0.\r\n        if (targetStart < 0) {\r\n            targetStart = 0;\r\n        }\r\n        // Optimisation, don't redraw if nothing has changed.\r\n        if (targetStart === this._viewStartTime) {\r\n            return;\r\n        }\r\n        this._viewStartTime = targetStart;\r\n    }\r\n    /**\r\n     * Zooms into/out of timeline, keeping the time under the cursor in the same position.\r\n     * @param cursorX Position of mouse cursor.\r\n     */\r\n    zoomUnderCursor(cursorX, zoomFactor) {\r\n        // Point in time of the cursor\r\n        let cursorTime = this.xCoordToTime(cursorX);\r\n        // Ratio (in view range) of the cursor\r\n        let cursorRatio = this.timeToRatio(cursorTime);\r\n        // Change zoom:\r\n        this._timelineZoom = this._timelineZoom * zoomFactor;\r\n        // Limit within current view\r\n        cursorRatio = Math.max(0, Math.min(1, cursorRatio));\r\n        // Calculate start\r\n        let targetStart = cursorTime - (cursorRatio * this.viewRange);\r\n        // Start cannot be less than 0\r\n        if (targetStart < 0) {\r\n            targetStart = 0;\r\n        }\r\n        // Set draw time\r\n        this._viewStartTime = targetStart;\r\n    }\r\n    /**\r\n     * Gets the mouse position relative to the top-left of the canvas [pixels]\r\n     * @param canvas\r\n     * @param evt\r\n     * @returns {x: number, y: number} Position.\r\n     */\r\n    getMousePos(canvas, evt) {\r\n        const rect = canvas.getBoundingClientRect();\r\n        return {\r\n            x: evt.clientX - rect.left,\r\n            y: evt.clientY - rect.top\r\n        };\r\n    }\r\n    /**\r\n     * Trims a timeline so that objects only exist within a specified time period.\r\n     * @param timeline Timeline to trim.\r\n     * @param trim Times to trim between.\r\n     */\r\n    trimTimeline(timeline, trim) {\r\n        // The new resolved objects.\r\n        let newObjects = {};\r\n        // Iterate through resolved objects.\r\n        Object.keys(timeline.objects).forEach((objId) => {\r\n            const obj = timeline.objects[objId];\r\n            const resultingInstances = [];\r\n            obj.resolved.instances.forEach(instance => {\r\n                // Whether to insert this object into the new timeline.\r\n                let useInstance = false;\r\n                let newInstance = Object.assign({}, instance); // clone\r\n                // If trimming the start time.\r\n                if (trim.start) {\r\n                    // If the object ends after the trim start time.\r\n                    if ((instance.end || Infinity) > trim.start) {\r\n                        useInstance = true;\r\n                        if (newInstance.start < trim.start) {\r\n                            newInstance.start = trim.start;\r\n                        }\r\n                    }\r\n                }\r\n                // If trimming the end time.\r\n                if (trim.end) {\r\n                    // If the object starts before the trim end time.\r\n                    if (instance.start < trim.end) {\r\n                        useInstance = true;\r\n                        if ((newInstance.end || Infinity) > trim.end) {\r\n                            newInstance.end = trim.end;\r\n                        }\r\n                    }\r\n                }\r\n                if (!trim.start && !trim.end) {\r\n                    useInstance = true;\r\n                }\r\n                if (useInstance &&\r\n                    newInstance.start < (newInstance.end || Infinity)) {\r\n                    resultingInstances.push(newInstance);\r\n                }\r\n            });\r\n            // If there isn't a resolved object for the new instance, create it.\r\n            if (!newObjects[objId]) {\r\n                let newObject = {\r\n                    content: obj.content,\r\n                    enable: obj.enable,\r\n                    id: obj.id,\r\n                    layer: obj.layer,\r\n                    resolved: {\r\n                        instances: [],\r\n                        levelDeep: obj.resolved.levelDeep,\r\n                        resolved: obj.resolved.resolved,\r\n                        resolving: obj.resolved.resolving,\r\n                        directReferences: obj.resolved.directReferences,\r\n                    }\r\n                };\r\n                newObjects[objId] = newObject;\r\n            }\r\n            newObjects[objId].resolved.instances = resultingInstances;\r\n        });\r\n        return {\r\n            classes: timeline.classes,\r\n            layers: timeline.layers,\r\n            objects: newObjects,\r\n            options: timeline.options,\r\n            statistics: timeline.statistics,\r\n            state: timeline.state,\r\n            nextEvents: timeline.nextEvents\r\n        };\r\n    }\r\n    /**\r\n     * Merges two timelines by merging instances of objects that intersect each other.\r\n     * @param past Older timeline.\r\n     * @param present Newer timeline.\r\n     * @returns {ResolvedTimeline} containing merged timelines.\r\n     */\r\n    mergeTimelineObjects(past, present, fromNewTimeline) {\r\n        const resultingObjects = {};\r\n        if (fromNewTimeline) {\r\n            past = this.trimTimeline(past, { end: this._playHeadTime });\r\n            present = this.trimTimeline(present, { start: this._playHeadTime });\r\n            // Because we want to keep old objects, this iterator is used to create unique old ids for them\r\n            this._mergeIterator++;\r\n            Object.keys(past.objects).forEach((objId) => {\r\n                const pastObj = past.objects[objId];\r\n                // @ts-ignore: hack to mark it as a \"past object\"\r\n                if (pastObj.__pastObj) {\r\n                    // Copy over it right away, it's old. Don't do anything else\r\n                    resultingObjects[objId] = pastObj;\r\n                    return;\r\n                }\r\n                // If an object exists in both timelines\r\n                const presentObj = present.objects[objId];\r\n                if (presentObj) {\r\n                    if (\r\n                    // Compare the objects, only look into merging them if they look identical\r\n                    isEqual(Object.assign({}, pastObj, { resolved: null }), Object.assign({}, presentObj, { resolved: null }))) {\r\n                        // This assumes that all past instances stop at a certain time at the very latest,\r\n                        // and that all new instances start at that time at the very earliest.\r\n                        // Iterate over all instances of those objects.\r\n                        const allInstances = {};\r\n                        pastObj.resolved.instances.forEach(pastInstance => {\r\n                            allInstances[pastInstance.end + ''] = pastInstance;\r\n                        });\r\n                        presentObj.resolved.instances.forEach(presentInstance => {\r\n                            if (allInstances[presentInstance.start + '']) {\r\n                                // The instances are next to each other, merge them into one:\r\n                                allInstances[presentInstance.start + ''].end = presentInstance.end;\r\n                            }\r\n                            else {\r\n                                allInstances[presentInstance.start + ''] = presentInstance;\r\n                            }\r\n                        });\r\n                        presentObj.resolved.instances = [];\r\n                        Object.keys(allInstances).forEach(key => {\r\n                            const instance = allInstances[key];\r\n                            presentObj.resolved.instances.push(instance);\r\n                        });\r\n                        // Copy over the new object\r\n                        resultingObjects[objId] = presentObj;\r\n                        return; // don't copy over old object\r\n                    }\r\n                    else {\r\n                        // The objects doesn't look identical\r\n                        // Copy over the new object\r\n                        resultingObjects[objId] = presentObj;\r\n                    }\r\n                }\r\n                else {\r\n                    // The old object doesn't exist in the new timeline\r\n                }\r\n                // @ts-ignore: hack to mark it as a \"past object\"\r\n                pastObj.__pastObj = true;\r\n                // Copy over the old object\r\n                resultingObjects[this._mergeIterator + '__' + objId] = pastObj;\r\n            });\r\n            // Iterate over the next objects\r\n            Object.keys(present.objects).forEach((objId) => {\r\n                const presentObj = present.objects[objId];\r\n                if (!past.objects[objId]) { // (if it did existed in the past, it has already been handled)\r\n                    // Just copy over the new object\r\n                    resultingObjects[objId] = presentObj;\r\n                }\r\n            });\r\n        }\r\n        else {\r\n            // No new timeline, objects and instances are only added\r\n            Object.keys(past.objects).forEach((objId) => {\r\n                const pastObj = past.objects[objId];\r\n                resultingObjects[objId] = pastObj;\r\n            });\r\n            Object.keys(present.objects).forEach((objId) => {\r\n                const presentObj = present.objects[objId];\r\n                const existingObj = resultingObjects[objId];\r\n                if (existingObj) {\r\n                    // merge with old instances\r\n                    const existingInstances = {};\r\n                    existingObj.resolved.instances.forEach(instance => {\r\n                        existingInstances[instance.start + '_' + instance.end] = true;\r\n                    });\r\n                    presentObj.resolved.instances.forEach(instance => {\r\n                        // Only push instances that aren't already present:\r\n                        if (!existingInstances[instance.start + '_' + instance.end]) {\r\n                            existingObj.resolved.instances.push(instance);\r\n                        }\r\n                    });\r\n                }\r\n                else {\r\n                    resultingObjects[objId] = presentObj;\r\n                }\r\n            });\r\n        }\r\n        const resultingLayers = {};\r\n        Object.keys(resultingObjects).forEach(key => {\r\n            const obj = resultingObjects[key];\r\n            const layer = obj.layer + '';\r\n            if (!resultingLayers[layer])\r\n                resultingLayers[layer] = [];\r\n            resultingLayers[layer].push(key);\r\n        });\r\n        return Object.assign(Object.assign({}, present), { objects: resultingObjects, layers: resultingLayers });\r\n    }\r\n    updateTimelineResolveWindow() {\r\n        const { start, end } = this.getExpandedStartEndTime(1);\r\n        this._timelineResolveStart = start;\r\n        this._timelineResolveEnd = end;\r\n        this._timelineResolveZoom = this._timelineZoom;\r\n        if (this.latestUpdateTime) {\r\n            // Calculate an optimal number of objects to create, so that the drawing still runs smoothly.\r\n            const targetResolveTime = 50; // ms\r\n            let ratio = targetResolveTime / this.latestUpdateTime;\r\n            this._timelineResolveCountAdjust = Math.max(0.1, Math.min(10, (1 + (this._timelineResolveCountAdjust * ratio)) / 2));\r\n        }\r\n    }\r\n    getExpandedStartEndTime(multiplier = 1) {\r\n        let start = this._viewStartTime;\r\n        let end = this.viewEndTime;\r\n        let duration = end - start;\r\n        let expand = duration * (this._timelineResolveExpand - 1) * multiplier;\r\n        start -= expand * 0.33;\r\n        end += expand * 0.66; // expand more into the future\r\n        start = Math.max(0, start);\r\n        end = Math.max(0, end);\r\n        const zoomDiff = Math.max(this._timelineResolveZoom, this._timelineZoom) /\r\n            Math.min(this._timelineResolveZoom, this._timelineZoom);\r\n        return { start, end, zoomDiff };\r\n    }\r\n    checkAutomaticReresolve() {\r\n        const { start, end, zoomDiff } = this.getExpandedStartEndTime(0.2);\r\n        if (this._timelineResolveAuto && (start < this._timelineResolveStart ||\r\n            end > this._timelineResolveEnd ||\r\n            zoomDiff > 3)) {\r\n            if (!this.reresolveTimeout) {\r\n                this.reresolveTimeout = setTimeout(() => {\r\n                    this.reresolveTimeout = null;\r\n                    this.updateTimelineResolveWindow();\r\n                    this._updateTimeline();\r\n                }, Math.max(100, this.latestUpdateTime * 5));\r\n            }\r\n        }\r\n    }\r\n    // --------------------- Conversions between position & time -------------\r\n    /**\r\n     * Calculate the X coordinate of a time value.\r\n     * @param {number} time The time to convert.\r\n     * @returns {number} The X coordinate of the time.\r\n     */\r\n    timeToXCoord(time) {\r\n        return this._viewDrawX + ((time - this._viewStartTime) * this.pixelsWidthPerUnitTime);\r\n    }\r\n    /**\r\n     * Calculate the time of a X coordinate.\r\n     * @param {number} time The X coordinate to convert.\r\n     * @returns {number} The time of the X coordinate.\r\n     */\r\n    xCoordToTime(position) {\r\n        return this._viewStartTime + ((position - this._viewDrawX) / this.pixelsWidthPerUnitTime);\r\n    }\r\n    /** Calculate the ratio of the time in current view (0 i beginning, 1 is end)  */\r\n    timeToRatio(time) {\r\n        return (time - this._viewStartTime) / this.viewRange;\r\n    }\r\n    /** Returns true if the position is within the current view  */\r\n    istimeInView(time) {\r\n        const ratio = this.timeToRatio(time);\r\n        return ratio >= 0 && ratio < 1;\r\n    }\r\n    capXcoordToView(position) {\r\n        return Math.max(this._viewDrawX, Math.min(this._viewDrawX + this._viewDrawWidth, position));\r\n    }\r\n    // -------------- Getters / Convenience functions ---------------------\r\n    /** Zoom factor [pixels / time] */\r\n    get pixelsWidthPerUnitTime() {\r\n        return (this._timelineZoom / 100);\r\n    }\r\n    /** The range of the view [time] */\r\n    get viewRange() {\r\n        return this._viewDrawWidth / this.pixelsWidthPerUnitTime;\r\n    }\r\n    /** The end time of the view [time] */\r\n    get viewEndTime() {\r\n        return this._viewStartTime + this.viewRange;\r\n    }\r\n}\r\nexports.TimelineVisualizer = TimelineVisualizer;\r\n//# sourceMappingURL=timelineVisualizer.js.map","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nvar objectCreate = Object.create || objectCreatePolyfill\nvar objectKeys = Object.keys || objectKeysPolyfill\nvar bind = Function.prototype.bind || functionBindPolyfill\n\nfunction EventEmitter() {\n  if (!this._events || !Object.prototype.hasOwnProperty.call(this, '_events')) {\n    this._events = objectCreate(null);\n    this._eventsCount = 0;\n  }\n\n  this._maxListeners = this._maxListeners || undefined;\n}\nmodule.exports = EventEmitter;\n\n// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nvar defaultMaxListeners = 10;\n\nvar hasDefineProperty;\ntry {\n  var o = {};\n  if (Object.defineProperty) Object.defineProperty(o, 'x', { value: 0 });\n  hasDefineProperty = o.x === 0;\n} catch (err) { hasDefineProperty = false }\nif (hasDefineProperty) {\n  Object.defineProperty(EventEmitter, 'defaultMaxListeners', {\n    enumerable: true,\n    get: function() {\n      return defaultMaxListeners;\n    },\n    set: function(arg) {\n      // check whether the input is a positive number (whose value is zero or\n      // greater and not a NaN).\n      if (typeof arg !== 'number' || arg < 0 || arg !== arg)\n        throw new TypeError('\"defaultMaxListeners\" must be a positive number');\n      defaultMaxListeners = arg;\n    }\n  });\n} else {\n  EventEmitter.defaultMaxListeners = defaultMaxListeners;\n}\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {\n  if (typeof n !== 'number' || n < 0 || isNaN(n))\n    throw new TypeError('\"n\" argument must be a positive number');\n  this._maxListeners = n;\n  return this;\n};\n\nfunction $getMaxListeners(that) {\n  if (that._maxListeners === undefined)\n    return EventEmitter.defaultMaxListeners;\n  return that._maxListeners;\n}\n\nEventEmitter.prototype.getMaxListeners = function getMaxListeners() {\n  return $getMaxListeners(this);\n};\n\n// These standalone emit* functions are used to optimize calling of event\n// handlers for fast cases because emit() itself often has a variable number of\n// arguments and can be deoptimized because of that. These functions always have\n// the same number of arguments and thus do not get deoptimized, so the code\n// inside them can execute faster.\nfunction emitNone(handler, isFn, self) {\n  if (isFn)\n    handler.call(self);\n  else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      listeners[i].call(self);\n  }\n}\nfunction emitOne(handler, isFn, self, arg1) {\n  if (isFn)\n    handler.call(self, arg1);\n  else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      listeners[i].call(self, arg1);\n  }\n}\nfunction emitTwo(handler, isFn, self, arg1, arg2) {\n  if (isFn)\n    handler.call(self, arg1, arg2);\n  else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      listeners[i].call(self, arg1, arg2);\n  }\n}\nfunction emitThree(handler, isFn, self, arg1, arg2, arg3) {\n  if (isFn)\n    handler.call(self, arg1, arg2, arg3);\n  else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      listeners[i].call(self, arg1, arg2, arg3);\n  }\n}\n\nfunction emitMany(handler, isFn, self, args) {\n  if (isFn)\n    handler.apply(self, args);\n  else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      listeners[i].apply(self, args);\n  }\n}\n\nEventEmitter.prototype.emit = function emit(type) {\n  var er, handler, len, args, i, events;\n  var doError = (type === 'error');\n\n  events = this._events;\n  if (events)\n    doError = (doError && events.error == null);\n  else if (!doError)\n    return false;\n\n  // If there is no 'error' event listener then throw.\n  if (doError) {\n    if (arguments.length > 1)\n      er = arguments[1];\n    if (er instanceof Error) {\n      throw er; // Unhandled 'error' event\n    } else {\n      // At least give some kind of context to the user\n      var err = new Error('Unhandled \"error\" event. (' + er + ')');\n      err.context = er;\n      throw err;\n    }\n    return false;\n  }\n\n  handler = events[type];\n\n  if (!handler)\n    return false;\n\n  var isFn = typeof handler === 'function';\n  len = arguments.length;\n  switch (len) {\n      // fast cases\n    case 1:\n      emitNone(handler, isFn, this);\n      break;\n    case 2:\n      emitOne(handler, isFn, this, arguments[1]);\n      break;\n    case 3:\n      emitTwo(handler, isFn, this, arguments[1], arguments[2]);\n      break;\n    case 4:\n      emitThree(handler, isFn, this, arguments[1], arguments[2], arguments[3]);\n      break;\n      // slower\n    default:\n      args = new Array(len - 1);\n      for (i = 1; i < len; i++)\n        args[i - 1] = arguments[i];\n      emitMany(handler, isFn, this, args);\n  }\n\n  return true;\n};\n\nfunction _addListener(target, type, listener, prepend) {\n  var m;\n  var events;\n  var existing;\n\n  if (typeof listener !== 'function')\n    throw new TypeError('\"listener\" argument must be a function');\n\n  events = target._events;\n  if (!events) {\n    events = target._events = objectCreate(null);\n    target._eventsCount = 0;\n  } else {\n    // To avoid recursion in the case that type === \"newListener\"! Before\n    // adding it to the listeners, first emit \"newListener\".\n    if (events.newListener) {\n      target.emit('newListener', type,\n          listener.listener ? listener.listener : listener);\n\n      // Re-assign `events` because a newListener handler could have caused the\n      // this._events to be assigned to a new object\n      events = target._events;\n    }\n    existing = events[type];\n  }\n\n  if (!existing) {\n    // Optimize the case of one listener. Don't need the extra array object.\n    existing = events[type] = listener;\n    ++target._eventsCount;\n  } else {\n    if (typeof existing === 'function') {\n      // Adding the second element, need to change to array.\n      existing = events[type] =\n          prepend ? [listener, existing] : [existing, listener];\n    } else {\n      // If we've already got an array, just append.\n      if (prepend) {\n        existing.unshift(listener);\n      } else {\n        existing.push(listener);\n      }\n    }\n\n    // Check for listener leak\n    if (!existing.warned) {\n      m = $getMaxListeners(target);\n      if (m && m > 0 && existing.length > m) {\n        existing.warned = true;\n        var w = new Error('Possible EventEmitter memory leak detected. ' +\n            existing.length + ' \"' + String(type) + '\" listeners ' +\n            'added. Use emitter.setMaxListeners() to ' +\n            'increase limit.');\n        w.name = 'MaxListenersExceededWarning';\n        w.emitter = target;\n        w.type = type;\n        w.count = existing.length;\n        if (typeof console === 'object' && console.warn) {\n          console.warn('%s: %s', w.name, w.message);\n        }\n      }\n    }\n  }\n\n  return target;\n}\n\nEventEmitter.prototype.addListener = function addListener(type, listener) {\n  return _addListener(this, type, listener, false);\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.prependListener =\n    function prependListener(type, listener) {\n      return _addListener(this, type, listener, true);\n    };\n\nfunction onceWrapper() {\n  if (!this.fired) {\n    this.target.removeListener(this.type, this.wrapFn);\n    this.fired = true;\n    switch (arguments.length) {\n      case 0:\n        return this.listener.call(this.target);\n      case 1:\n        return this.listener.call(this.target, arguments[0]);\n      case 2:\n        return this.listener.call(this.target, arguments[0], arguments[1]);\n      case 3:\n        return this.listener.call(this.target, arguments[0], arguments[1],\n            arguments[2]);\n      default:\n        var args = new Array(arguments.length);\n        for (var i = 0; i < args.length; ++i)\n          args[i] = arguments[i];\n        this.listener.apply(this.target, args);\n    }\n  }\n}\n\nfunction _onceWrap(target, type, listener) {\n  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };\n  var wrapped = bind.call(onceWrapper, state);\n  wrapped.listener = listener;\n  state.wrapFn = wrapped;\n  return wrapped;\n}\n\nEventEmitter.prototype.once = function once(type, listener) {\n  if (typeof listener !== 'function')\n    throw new TypeError('\"listener\" argument must be a function');\n  this.on(type, _onceWrap(this, type, listener));\n  return this;\n};\n\nEventEmitter.prototype.prependOnceListener =\n    function prependOnceListener(type, listener) {\n      if (typeof listener !== 'function')\n        throw new TypeError('\"listener\" argument must be a function');\n      this.prependListener(type, _onceWrap(this, type, listener));\n      return this;\n    };\n\n// Emits a 'removeListener' event if and only if the listener was removed.\nEventEmitter.prototype.removeListener =\n    function removeListener(type, listener) {\n      var list, events, position, i, originalListener;\n\n      if (typeof listener !== 'function')\n        throw new TypeError('\"listener\" argument must be a function');\n\n      events = this._events;\n      if (!events)\n        return this;\n\n      list = events[type];\n      if (!list)\n        return this;\n\n      if (list === listener || list.listener === listener) {\n        if (--this._eventsCount === 0)\n          this._events = objectCreate(null);\n        else {\n          delete events[type];\n          if (events.removeListener)\n            this.emit('removeListener', type, list.listener || listener);\n        }\n      } else if (typeof list !== 'function') {\n        position = -1;\n\n        for (i = list.length - 1; i >= 0; i--) {\n          if (list[i] === listener || list[i].listener === listener) {\n            originalListener = list[i].listener;\n            position = i;\n            break;\n          }\n        }\n\n        if (position < 0)\n          return this;\n\n        if (position === 0)\n          list.shift();\n        else\n          spliceOne(list, position);\n\n        if (list.length === 1)\n          events[type] = list[0];\n\n        if (events.removeListener)\n          this.emit('removeListener', type, originalListener || listener);\n      }\n\n      return this;\n    };\n\nEventEmitter.prototype.removeAllListeners =\n    function removeAllListeners(type) {\n      var listeners, events, i;\n\n      events = this._events;\n      if (!events)\n        return this;\n\n      // not listening for removeListener, no need to emit\n      if (!events.removeListener) {\n        if (arguments.length === 0) {\n          this._events = objectCreate(null);\n          this._eventsCount = 0;\n        } else if (events[type]) {\n          if (--this._eventsCount === 0)\n            this._events = objectCreate(null);\n          else\n            delete events[type];\n        }\n        return this;\n      }\n\n      // emit removeListener for all listeners on all events\n      if (arguments.length === 0) {\n        var keys = objectKeys(events);\n        var key;\n        for (i = 0; i < keys.length; ++i) {\n          key = keys[i];\n          if (key === 'removeListener') continue;\n          this.removeAllListeners(key);\n        }\n        this.removeAllListeners('removeListener');\n        this._events = objectCreate(null);\n        this._eventsCount = 0;\n        return this;\n      }\n\n      listeners = events[type];\n\n      if (typeof listeners === 'function') {\n        this.removeListener(type, listeners);\n      } else if (listeners) {\n        // LIFO order\n        for (i = listeners.length - 1; i >= 0; i--) {\n          this.removeListener(type, listeners[i]);\n        }\n      }\n\n      return this;\n    };\n\nfunction _listeners(target, type, unwrap) {\n  var events = target._events;\n\n  if (!events)\n    return [];\n\n  var evlistener = events[type];\n  if (!evlistener)\n    return [];\n\n  if (typeof evlistener === 'function')\n    return unwrap ? [evlistener.listener || evlistener] : [evlistener];\n\n  return unwrap ? unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);\n}\n\nEventEmitter.prototype.listeners = function listeners(type) {\n  return _listeners(this, type, true);\n};\n\nEventEmitter.prototype.rawListeners = function rawListeners(type) {\n  return _listeners(this, type, false);\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  if (typeof emitter.listenerCount === 'function') {\n    return emitter.listenerCount(type);\n  } else {\n    return listenerCount.call(emitter, type);\n  }\n};\n\nEventEmitter.prototype.listenerCount = listenerCount;\nfunction listenerCount(type) {\n  var events = this._events;\n\n  if (events) {\n    var evlistener = events[type];\n\n    if (typeof evlistener === 'function') {\n      return 1;\n    } else if (evlistener) {\n      return evlistener.length;\n    }\n  }\n\n  return 0;\n}\n\nEventEmitter.prototype.eventNames = function eventNames() {\n  return this._eventsCount > 0 ? Reflect.ownKeys(this._events) : [];\n};\n\n// About 1.5x faster than the two-arg version of Array#splice().\nfunction spliceOne(list, index) {\n  for (var i = index, k = i + 1, n = list.length; k < n; i += 1, k += 1)\n    list[i] = list[k];\n  list.pop();\n}\n\nfunction arrayClone(arr, n) {\n  var copy = new Array(n);\n  for (var i = 0; i < n; ++i)\n    copy[i] = arr[i];\n  return copy;\n}\n\nfunction unwrapListeners(arr) {\n  var ret = new Array(arr.length);\n  for (var i = 0; i < ret.length; ++i) {\n    ret[i] = arr[i].listener || arr[i];\n  }\n  return ret;\n}\n\nfunction objectCreatePolyfill(proto) {\n  var F = function() {};\n  F.prototype = proto;\n  return new F;\n}\nfunction objectKeysPolyfill(obj) {\n  var keys = [];\n  for (var k in obj) if (Object.prototype.hasOwnProperty.call(obj, k)) {\n    keys.push(k);\n  }\n  return k;\n}\nfunction functionBindPolyfill(context) {\n  var fn = this;\n  return function () {\n    return fn.apply(context, arguments);\n  };\n}\n","/**\n * Lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright JS Foundation and other contributors <https://js.foundation/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as the size to enable large array optimizations. */\nvar LARGE_ARRAY_SIZE = 200;\n\n/** Used to stand-in for `undefined` hash values. */\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n/** Used to compose bitmasks for value comparisons. */\nvar COMPARE_PARTIAL_FLAG = 1,\n    COMPARE_UNORDERED_FLAG = 2;\n\n/** Used as references for various `Number` constants. */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    arrayTag = '[object Array]',\n    asyncTag = '[object AsyncFunction]',\n    boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    errorTag = '[object Error]',\n    funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    nullTag = '[object Null]',\n    objectTag = '[object Object]',\n    promiseTag = '[object Promise]',\n    proxyTag = '[object Proxy]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    symbolTag = '[object Symbol]',\n    undefinedTag = '[object Undefined]',\n    weakMapTag = '[object WeakMap]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]',\n    float32Tag = '[object Float32Array]',\n    float64Tag = '[object Float64Array]',\n    int8Tag = '[object Int8Array]',\n    int16Tag = '[object Int16Array]',\n    int32Tag = '[object Int32Array]',\n    uint8Tag = '[object Uint8Array]',\n    uint8ClampedTag = '[object Uint8ClampedArray]',\n    uint16Tag = '[object Uint16Array]',\n    uint32Tag = '[object Uint32Array]';\n\n/**\n * Used to match `RegExp`\n * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n */\nvar reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\n\n/** Used to detect host constructors (Safari). */\nvar reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n/** Used to detect unsigned integer values. */\nvar reIsUint = /^(?:0|[1-9]\\d*)$/;\n\n/** Used to identify `toStringTag` values of typed arrays. */\nvar typedArrayTags = {};\ntypedArrayTags[float32Tag] = typedArrayTags[float64Tag] =\ntypedArrayTags[int8Tag] = typedArrayTags[int16Tag] =\ntypedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =\ntypedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =\ntypedArrayTags[uint32Tag] = true;\ntypedArrayTags[argsTag] = typedArrayTags[arrayTag] =\ntypedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =\ntypedArrayTags[dataViewTag] = typedArrayTags[dateTag] =\ntypedArrayTags[errorTag] = typedArrayTags[funcTag] =\ntypedArrayTags[mapTag] = typedArrayTags[numberTag] =\ntypedArrayTags[objectTag] = typedArrayTags[regexpTag] =\ntypedArrayTags[setTag] = typedArrayTags[stringTag] =\ntypedArrayTags[weakMapTag] = false;\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\n/** Detect free variable `exports`. */\nvar freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;\n\n/** Detect free variable `module`. */\nvar freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n\n/** Detect the popular CommonJS extension `module.exports`. */\nvar moduleExports = freeModule && freeModule.exports === freeExports;\n\n/** Detect free variable `process` from Node.js. */\nvar freeProcess = moduleExports && freeGlobal.process;\n\n/** Used to access faster Node.js helpers. */\nvar nodeUtil = (function() {\n  try {\n    return freeProcess && freeProcess.binding && freeProcess.binding('util');\n  } catch (e) {}\n}());\n\n/* Node.js helper references. */\nvar nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;\n\n/**\n * A specialized version of `_.filter` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {Array} Returns the new filtered array.\n */\nfunction arrayFilter(array, predicate) {\n  var index = -1,\n      length = array == null ? 0 : array.length,\n      resIndex = 0,\n      result = [];\n\n  while (++index < length) {\n    var value = array[index];\n    if (predicate(value, index, array)) {\n      result[resIndex++] = value;\n    }\n  }\n  return result;\n}\n\n/**\n * Appends the elements of `values` to `array`.\n *\n * @private\n * @param {Array} array The array to modify.\n * @param {Array} values The values to append.\n * @returns {Array} Returns `array`.\n */\nfunction arrayPush(array, values) {\n  var index = -1,\n      length = values.length,\n      offset = array.length;\n\n  while (++index < length) {\n    array[offset + index] = values[index];\n  }\n  return array;\n}\n\n/**\n * A specialized version of `_.some` for arrays without support for iteratee\n * shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {boolean} Returns `true` if any element passes the predicate check,\n *  else `false`.\n */\nfunction arraySome(array, predicate) {\n  var index = -1,\n      length = array == null ? 0 : array.length;\n\n  while (++index < length) {\n    if (predicate(array[index], index, array)) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * The base implementation of `_.times` without support for iteratee shorthands\n * or max array length checks.\n *\n * @private\n * @param {number} n The number of times to invoke `iteratee`.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the array of results.\n */\nfunction baseTimes(n, iteratee) {\n  var index = -1,\n      result = Array(n);\n\n  while (++index < n) {\n    result[index] = iteratee(index);\n  }\n  return result;\n}\n\n/**\n * The base implementation of `_.unary` without support for storing metadata.\n *\n * @private\n * @param {Function} func The function to cap arguments for.\n * @returns {Function} Returns the new capped function.\n */\nfunction baseUnary(func) {\n  return function(value) {\n    return func(value);\n  };\n}\n\n/**\n * Checks if a `cache` value for `key` exists.\n *\n * @private\n * @param {Object} cache The cache to query.\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction cacheHas(cache, key) {\n  return cache.has(key);\n}\n\n/**\n * Gets the value at `key` of `object`.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {string} key The key of the property to get.\n * @returns {*} Returns the property value.\n */\nfunction getValue(object, key) {\n  return object == null ? undefined : object[key];\n}\n\n/**\n * Converts `map` to its key-value pairs.\n *\n * @private\n * @param {Object} map The map to convert.\n * @returns {Array} Returns the key-value pairs.\n */\nfunction mapToArray(map) {\n  var index = -1,\n      result = Array(map.size);\n\n  map.forEach(function(value, key) {\n    result[++index] = [key, value];\n  });\n  return result;\n}\n\n/**\n * Creates a unary function that invokes `func` with its argument transformed.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {Function} transform The argument transform.\n * @returns {Function} Returns the new function.\n */\nfunction overArg(func, transform) {\n  return function(arg) {\n    return func(transform(arg));\n  };\n}\n\n/**\n * Converts `set` to an array of its values.\n *\n * @private\n * @param {Object} set The set to convert.\n * @returns {Array} Returns the values.\n */\nfunction setToArray(set) {\n  var index = -1,\n      result = Array(set.size);\n\n  set.forEach(function(value) {\n    result[++index] = value;\n  });\n  return result;\n}\n\n/** Used for built-in method references. */\nvar arrayProto = Array.prototype,\n    funcProto = Function.prototype,\n    objectProto = Object.prototype;\n\n/** Used to detect overreaching core-js shims. */\nvar coreJsData = root['__core-js_shared__'];\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/** Used to detect methods masquerading as native. */\nvar maskSrcKey = (function() {\n  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\n  return uid ? ('Symbol(src)_1.' + uid) : '';\n}());\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar nativeObjectToString = objectProto.toString;\n\n/** Used to detect if a method is native. */\nvar reIsNative = RegExp('^' +\n  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')\n  .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n);\n\n/** Built-in value references. */\nvar Buffer = moduleExports ? root.Buffer : undefined,\n    Symbol = root.Symbol,\n    Uint8Array = root.Uint8Array,\n    propertyIsEnumerable = objectProto.propertyIsEnumerable,\n    splice = arrayProto.splice,\n    symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeGetSymbols = Object.getOwnPropertySymbols,\n    nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,\n    nativeKeys = overArg(Object.keys, Object);\n\n/* Built-in method references that are verified to be native. */\nvar DataView = getNative(root, 'DataView'),\n    Map = getNative(root, 'Map'),\n    Promise = getNative(root, 'Promise'),\n    Set = getNative(root, 'Set'),\n    WeakMap = getNative(root, 'WeakMap'),\n    nativeCreate = getNative(Object, 'create');\n\n/** Used to detect maps, sets, and weakmaps. */\nvar dataViewCtorString = toSource(DataView),\n    mapCtorString = toSource(Map),\n    promiseCtorString = toSource(Promise),\n    setCtorString = toSource(Set),\n    weakMapCtorString = toSource(WeakMap);\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;\n\n/**\n * Creates a hash object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Hash(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the hash.\n *\n * @private\n * @name clear\n * @memberOf Hash\n */\nfunction hashClear() {\n  this.__data__ = nativeCreate ? nativeCreate(null) : {};\n  this.size = 0;\n}\n\n/**\n * Removes `key` and its value from the hash.\n *\n * @private\n * @name delete\n * @memberOf Hash\n * @param {Object} hash The hash to modify.\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction hashDelete(key) {\n  var result = this.has(key) && delete this.__data__[key];\n  this.size -= result ? 1 : 0;\n  return result;\n}\n\n/**\n * Gets the hash value for `key`.\n *\n * @private\n * @name get\n * @memberOf Hash\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction hashGet(key) {\n  var data = this.__data__;\n  if (nativeCreate) {\n    var result = data[key];\n    return result === HASH_UNDEFINED ? undefined : result;\n  }\n  return hasOwnProperty.call(data, key) ? data[key] : undefined;\n}\n\n/**\n * Checks if a hash value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Hash\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction hashHas(key) {\n  var data = this.__data__;\n  return nativeCreate ? (data[key] !== undefined) : hasOwnProperty.call(data, key);\n}\n\n/**\n * Sets the hash `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Hash\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the hash instance.\n */\nfunction hashSet(key, value) {\n  var data = this.__data__;\n  this.size += this.has(key) ? 0 : 1;\n  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;\n  return this;\n}\n\n// Add methods to `Hash`.\nHash.prototype.clear = hashClear;\nHash.prototype['delete'] = hashDelete;\nHash.prototype.get = hashGet;\nHash.prototype.has = hashHas;\nHash.prototype.set = hashSet;\n\n/**\n * Creates an list cache object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction ListCache(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the list cache.\n *\n * @private\n * @name clear\n * @memberOf ListCache\n */\nfunction listCacheClear() {\n  this.__data__ = [];\n  this.size = 0;\n}\n\n/**\n * Removes `key` and its value from the list cache.\n *\n * @private\n * @name delete\n * @memberOf ListCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction listCacheDelete(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    return false;\n  }\n  var lastIndex = data.length - 1;\n  if (index == lastIndex) {\n    data.pop();\n  } else {\n    splice.call(data, index, 1);\n  }\n  --this.size;\n  return true;\n}\n\n/**\n * Gets the list cache value for `key`.\n *\n * @private\n * @name get\n * @memberOf ListCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction listCacheGet(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  return index < 0 ? undefined : data[index][1];\n}\n\n/**\n * Checks if a list cache value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf ListCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction listCacheHas(key) {\n  return assocIndexOf(this.__data__, key) > -1;\n}\n\n/**\n * Sets the list cache `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf ListCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the list cache instance.\n */\nfunction listCacheSet(key, value) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    ++this.size;\n    data.push([key, value]);\n  } else {\n    data[index][1] = value;\n  }\n  return this;\n}\n\n// Add methods to `ListCache`.\nListCache.prototype.clear = listCacheClear;\nListCache.prototype['delete'] = listCacheDelete;\nListCache.prototype.get = listCacheGet;\nListCache.prototype.has = listCacheHas;\nListCache.prototype.set = listCacheSet;\n\n/**\n * Creates a map cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction MapCache(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the map.\n *\n * @private\n * @name clear\n * @memberOf MapCache\n */\nfunction mapCacheClear() {\n  this.size = 0;\n  this.__data__ = {\n    'hash': new Hash,\n    'map': new (Map || ListCache),\n    'string': new Hash\n  };\n}\n\n/**\n * Removes `key` and its value from the map.\n *\n * @private\n * @name delete\n * @memberOf MapCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction mapCacheDelete(key) {\n  var result = getMapData(this, key)['delete'](key);\n  this.size -= result ? 1 : 0;\n  return result;\n}\n\n/**\n * Gets the map value for `key`.\n *\n * @private\n * @name get\n * @memberOf MapCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction mapCacheGet(key) {\n  return getMapData(this, key).get(key);\n}\n\n/**\n * Checks if a map value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf MapCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction mapCacheHas(key) {\n  return getMapData(this, key).has(key);\n}\n\n/**\n * Sets the map `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf MapCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the map cache instance.\n */\nfunction mapCacheSet(key, value) {\n  var data = getMapData(this, key),\n      size = data.size;\n\n  data.set(key, value);\n  this.size += data.size == size ? 0 : 1;\n  return this;\n}\n\n// Add methods to `MapCache`.\nMapCache.prototype.clear = mapCacheClear;\nMapCache.prototype['delete'] = mapCacheDelete;\nMapCache.prototype.get = mapCacheGet;\nMapCache.prototype.has = mapCacheHas;\nMapCache.prototype.set = mapCacheSet;\n\n/**\n *\n * Creates an array cache object to store unique values.\n *\n * @private\n * @constructor\n * @param {Array} [values] The values to cache.\n */\nfunction SetCache(values) {\n  var index = -1,\n      length = values == null ? 0 : values.length;\n\n  this.__data__ = new MapCache;\n  while (++index < length) {\n    this.add(values[index]);\n  }\n}\n\n/**\n * Adds `value` to the array cache.\n *\n * @private\n * @name add\n * @memberOf SetCache\n * @alias push\n * @param {*} value The value to cache.\n * @returns {Object} Returns the cache instance.\n */\nfunction setCacheAdd(value) {\n  this.__data__.set(value, HASH_UNDEFINED);\n  return this;\n}\n\n/**\n * Checks if `value` is in the array cache.\n *\n * @private\n * @name has\n * @memberOf SetCache\n * @param {*} value The value to search for.\n * @returns {number} Returns `true` if `value` is found, else `false`.\n */\nfunction setCacheHas(value) {\n  return this.__data__.has(value);\n}\n\n// Add methods to `SetCache`.\nSetCache.prototype.add = SetCache.prototype.push = setCacheAdd;\nSetCache.prototype.has = setCacheHas;\n\n/**\n * Creates a stack cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Stack(entries) {\n  var data = this.__data__ = new ListCache(entries);\n  this.size = data.size;\n}\n\n/**\n * Removes all key-value entries from the stack.\n *\n * @private\n * @name clear\n * @memberOf Stack\n */\nfunction stackClear() {\n  this.__data__ = new ListCache;\n  this.size = 0;\n}\n\n/**\n * Removes `key` and its value from the stack.\n *\n * @private\n * @name delete\n * @memberOf Stack\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction stackDelete(key) {\n  var data = this.__data__,\n      result = data['delete'](key);\n\n  this.size = data.size;\n  return result;\n}\n\n/**\n * Gets the stack value for `key`.\n *\n * @private\n * @name get\n * @memberOf Stack\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction stackGet(key) {\n  return this.__data__.get(key);\n}\n\n/**\n * Checks if a stack value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Stack\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction stackHas(key) {\n  return this.__data__.has(key);\n}\n\n/**\n * Sets the stack `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Stack\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the stack cache instance.\n */\nfunction stackSet(key, value) {\n  var data = this.__data__;\n  if (data instanceof ListCache) {\n    var pairs = data.__data__;\n    if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {\n      pairs.push([key, value]);\n      this.size = ++data.size;\n      return this;\n    }\n    data = this.__data__ = new MapCache(pairs);\n  }\n  data.set(key, value);\n  this.size = data.size;\n  return this;\n}\n\n// Add methods to `Stack`.\nStack.prototype.clear = stackClear;\nStack.prototype['delete'] = stackDelete;\nStack.prototype.get = stackGet;\nStack.prototype.has = stackHas;\nStack.prototype.set = stackSet;\n\n/**\n * Creates an array of the enumerable property names of the array-like `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @param {boolean} inherited Specify returning inherited property names.\n * @returns {Array} Returns the array of property names.\n */\nfunction arrayLikeKeys(value, inherited) {\n  var isArr = isArray(value),\n      isArg = !isArr && isArguments(value),\n      isBuff = !isArr && !isArg && isBuffer(value),\n      isType = !isArr && !isArg && !isBuff && isTypedArray(value),\n      skipIndexes = isArr || isArg || isBuff || isType,\n      result = skipIndexes ? baseTimes(value.length, String) : [],\n      length = result.length;\n\n  for (var key in value) {\n    if ((inherited || hasOwnProperty.call(value, key)) &&\n        !(skipIndexes && (\n           // Safari 9 has enumerable `arguments.length` in strict mode.\n           key == 'length' ||\n           // Node.js 0.10 has enumerable non-index properties on buffers.\n           (isBuff && (key == 'offset' || key == 'parent')) ||\n           // PhantomJS 2 has enumerable non-index properties on typed arrays.\n           (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||\n           // Skip index properties.\n           isIndex(key, length)\n        ))) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * Gets the index at which the `key` is found in `array` of key-value pairs.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} key The key to search for.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction assocIndexOf(array, key) {\n  var length = array.length;\n  while (length--) {\n    if (eq(array[length][0], key)) {\n      return length;\n    }\n  }\n  return -1;\n}\n\n/**\n * The base implementation of `getAllKeys` and `getAllKeysIn` which uses\n * `keysFunc` and `symbolsFunc` to get the enumerable property names and\n * symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Function} keysFunc The function to get the keys of `object`.\n * @param {Function} symbolsFunc The function to get the symbols of `object`.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction baseGetAllKeys(object, keysFunc, symbolsFunc) {\n  var result = keysFunc(object);\n  return isArray(object) ? result : arrayPush(result, symbolsFunc(object));\n}\n\n/**\n * The base implementation of `getTag` without fallbacks for buggy environments.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nfunction baseGetTag(value) {\n  if (value == null) {\n    return value === undefined ? undefinedTag : nullTag;\n  }\n  return (symToStringTag && symToStringTag in Object(value))\n    ? getRawTag(value)\n    : objectToString(value);\n}\n\n/**\n * The base implementation of `_.isArguments`.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n */\nfunction baseIsArguments(value) {\n  return isObjectLike(value) && baseGetTag(value) == argsTag;\n}\n\n/**\n * The base implementation of `_.isEqual` which supports partial comparisons\n * and tracks traversed objects.\n *\n * @private\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @param {boolean} bitmask The bitmask flags.\n *  1 - Unordered comparison\n *  2 - Partial comparison\n * @param {Function} [customizer] The function to customize comparisons.\n * @param {Object} [stack] Tracks traversed `value` and `other` objects.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n */\nfunction baseIsEqual(value, other, bitmask, customizer, stack) {\n  if (value === other) {\n    return true;\n  }\n  if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {\n    return value !== value && other !== other;\n  }\n  return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);\n}\n\n/**\n * A specialized version of `baseIsEqual` for arrays and objects which performs\n * deep comparisons and tracks traversed objects enabling objects with circular\n * references to be compared.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} [stack] Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {\n  var objIsArr = isArray(object),\n      othIsArr = isArray(other),\n      objTag = objIsArr ? arrayTag : getTag(object),\n      othTag = othIsArr ? arrayTag : getTag(other);\n\n  objTag = objTag == argsTag ? objectTag : objTag;\n  othTag = othTag == argsTag ? objectTag : othTag;\n\n  var objIsObj = objTag == objectTag,\n      othIsObj = othTag == objectTag,\n      isSameTag = objTag == othTag;\n\n  if (isSameTag && isBuffer(object)) {\n    if (!isBuffer(other)) {\n      return false;\n    }\n    objIsArr = true;\n    objIsObj = false;\n  }\n  if (isSameTag && !objIsObj) {\n    stack || (stack = new Stack);\n    return (objIsArr || isTypedArray(object))\n      ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)\n      : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);\n  }\n  if (!(bitmask & COMPARE_PARTIAL_FLAG)) {\n    var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),\n        othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');\n\n    if (objIsWrapped || othIsWrapped) {\n      var objUnwrapped = objIsWrapped ? object.value() : object,\n          othUnwrapped = othIsWrapped ? other.value() : other;\n\n      stack || (stack = new Stack);\n      return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);\n    }\n  }\n  if (!isSameTag) {\n    return false;\n  }\n  stack || (stack = new Stack);\n  return equalObjects(object, other, bitmask, customizer, equalFunc, stack);\n}\n\n/**\n * The base implementation of `_.isNative` without bad shim checks.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a native function,\n *  else `false`.\n */\nfunction baseIsNative(value) {\n  if (!isObject(value) || isMasked(value)) {\n    return false;\n  }\n  var pattern = isFunction(value) ? reIsNative : reIsHostCtor;\n  return pattern.test(toSource(value));\n}\n\n/**\n * The base implementation of `_.isTypedArray` without Node.js optimizations.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n */\nfunction baseIsTypedArray(value) {\n  return isObjectLike(value) &&\n    isLength(value.length) && !!typedArrayTags[baseGetTag(value)];\n}\n\n/**\n * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction baseKeys(object) {\n  if (!isPrototype(object)) {\n    return nativeKeys(object);\n  }\n  var result = [];\n  for (var key in Object(object)) {\n    if (hasOwnProperty.call(object, key) && key != 'constructor') {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * A specialized version of `baseIsEqualDeep` for arrays with support for\n * partial deep comparisons.\n *\n * @private\n * @param {Array} array The array to compare.\n * @param {Array} other The other array to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `array` and `other` objects.\n * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.\n */\nfunction equalArrays(array, other, bitmask, customizer, equalFunc, stack) {\n  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\n      arrLength = array.length,\n      othLength = other.length;\n\n  if (arrLength != othLength && !(isPartial && othLength > arrLength)) {\n    return false;\n  }\n  // Assume cyclic values are equal.\n  var stacked = stack.get(array);\n  if (stacked && stack.get(other)) {\n    return stacked == other;\n  }\n  var index = -1,\n      result = true,\n      seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;\n\n  stack.set(array, other);\n  stack.set(other, array);\n\n  // Ignore non-index properties.\n  while (++index < arrLength) {\n    var arrValue = array[index],\n        othValue = other[index];\n\n    if (customizer) {\n      var compared = isPartial\n        ? customizer(othValue, arrValue, index, other, array, stack)\n        : customizer(arrValue, othValue, index, array, other, stack);\n    }\n    if (compared !== undefined) {\n      if (compared) {\n        continue;\n      }\n      result = false;\n      break;\n    }\n    // Recursively compare arrays (susceptible to call stack limits).\n    if (seen) {\n      if (!arraySome(other, function(othValue, othIndex) {\n            if (!cacheHas(seen, othIndex) &&\n                (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {\n              return seen.push(othIndex);\n            }\n          })) {\n        result = false;\n        break;\n      }\n    } else if (!(\n          arrValue === othValue ||\n            equalFunc(arrValue, othValue, bitmask, customizer, stack)\n        )) {\n      result = false;\n      break;\n    }\n  }\n  stack['delete'](array);\n  stack['delete'](other);\n  return result;\n}\n\n/**\n * A specialized version of `baseIsEqualDeep` for comparing objects of\n * the same `toStringTag`.\n *\n * **Note:** This function only supports comparing values with tags of\n * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {string} tag The `toStringTag` of the objects to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {\n  switch (tag) {\n    case dataViewTag:\n      if ((object.byteLength != other.byteLength) ||\n          (object.byteOffset != other.byteOffset)) {\n        return false;\n      }\n      object = object.buffer;\n      other = other.buffer;\n\n    case arrayBufferTag:\n      if ((object.byteLength != other.byteLength) ||\n          !equalFunc(new Uint8Array(object), new Uint8Array(other))) {\n        return false;\n      }\n      return true;\n\n    case boolTag:\n    case dateTag:\n    case numberTag:\n      // Coerce booleans to `1` or `0` and dates to milliseconds.\n      // Invalid dates are coerced to `NaN`.\n      return eq(+object, +other);\n\n    case errorTag:\n      return object.name == other.name && object.message == other.message;\n\n    case regexpTag:\n    case stringTag:\n      // Coerce regexes to strings and treat strings, primitives and objects,\n      // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring\n      // for more details.\n      return object == (other + '');\n\n    case mapTag:\n      var convert = mapToArray;\n\n    case setTag:\n      var isPartial = bitmask & COMPARE_PARTIAL_FLAG;\n      convert || (convert = setToArray);\n\n      if (object.size != other.size && !isPartial) {\n        return false;\n      }\n      // Assume cyclic values are equal.\n      var stacked = stack.get(object);\n      if (stacked) {\n        return stacked == other;\n      }\n      bitmask |= COMPARE_UNORDERED_FLAG;\n\n      // Recursively compare objects (susceptible to call stack limits).\n      stack.set(object, other);\n      var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);\n      stack['delete'](object);\n      return result;\n\n    case symbolTag:\n      if (symbolValueOf) {\n        return symbolValueOf.call(object) == symbolValueOf.call(other);\n      }\n  }\n  return false;\n}\n\n/**\n * A specialized version of `baseIsEqualDeep` for objects with support for\n * partial deep comparisons.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction equalObjects(object, other, bitmask, customizer, equalFunc, stack) {\n  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\n      objProps = getAllKeys(object),\n      objLength = objProps.length,\n      othProps = getAllKeys(other),\n      othLength = othProps.length;\n\n  if (objLength != othLength && !isPartial) {\n    return false;\n  }\n  var index = objLength;\n  while (index--) {\n    var key = objProps[index];\n    if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {\n      return false;\n    }\n  }\n  // Assume cyclic values are equal.\n  var stacked = stack.get(object);\n  if (stacked && stack.get(other)) {\n    return stacked == other;\n  }\n  var result = true;\n  stack.set(object, other);\n  stack.set(other, object);\n\n  var skipCtor = isPartial;\n  while (++index < objLength) {\n    key = objProps[index];\n    var objValue = object[key],\n        othValue = other[key];\n\n    if (customizer) {\n      var compared = isPartial\n        ? customizer(othValue, objValue, key, other, object, stack)\n        : customizer(objValue, othValue, key, object, other, stack);\n    }\n    // Recursively compare objects (susceptible to call stack limits).\n    if (!(compared === undefined\n          ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))\n          : compared\n        )) {\n      result = false;\n      break;\n    }\n    skipCtor || (skipCtor = key == 'constructor');\n  }\n  if (result && !skipCtor) {\n    var objCtor = object.constructor,\n        othCtor = other.constructor;\n\n    // Non `Object` object instances with different constructors are not equal.\n    if (objCtor != othCtor &&\n        ('constructor' in object && 'constructor' in other) &&\n        !(typeof objCtor == 'function' && objCtor instanceof objCtor &&\n          typeof othCtor == 'function' && othCtor instanceof othCtor)) {\n      result = false;\n    }\n  }\n  stack['delete'](object);\n  stack['delete'](other);\n  return result;\n}\n\n/**\n * Creates an array of own enumerable property names and symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction getAllKeys(object) {\n  return baseGetAllKeys(object, keys, getSymbols);\n}\n\n/**\n * Gets the data for `map`.\n *\n * @private\n * @param {Object} map The map to query.\n * @param {string} key The reference key.\n * @returns {*} Returns the map data.\n */\nfunction getMapData(map, key) {\n  var data = map.__data__;\n  return isKeyable(key)\n    ? data[typeof key == 'string' ? 'string' : 'hash']\n    : data.map;\n}\n\n/**\n * Gets the native function at `key` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the method to get.\n * @returns {*} Returns the function if it's native, else `undefined`.\n */\nfunction getNative(object, key) {\n  var value = getValue(object, key);\n  return baseIsNative(value) ? value : undefined;\n}\n\n/**\n * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the raw `toStringTag`.\n */\nfunction getRawTag(value) {\n  var isOwn = hasOwnProperty.call(value, symToStringTag),\n      tag = value[symToStringTag];\n\n  try {\n    value[symToStringTag] = undefined;\n    var unmasked = true;\n  } catch (e) {}\n\n  var result = nativeObjectToString.call(value);\n  if (unmasked) {\n    if (isOwn) {\n      value[symToStringTag] = tag;\n    } else {\n      delete value[symToStringTag];\n    }\n  }\n  return result;\n}\n\n/**\n * Creates an array of the own enumerable symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of symbols.\n */\nvar getSymbols = !nativeGetSymbols ? stubArray : function(object) {\n  if (object == null) {\n    return [];\n  }\n  object = Object(object);\n  return arrayFilter(nativeGetSymbols(object), function(symbol) {\n    return propertyIsEnumerable.call(object, symbol);\n  });\n};\n\n/**\n * Gets the `toStringTag` of `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nvar getTag = baseGetTag;\n\n// Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.\nif ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||\n    (Map && getTag(new Map) != mapTag) ||\n    (Promise && getTag(Promise.resolve()) != promiseTag) ||\n    (Set && getTag(new Set) != setTag) ||\n    (WeakMap && getTag(new WeakMap) != weakMapTag)) {\n  getTag = function(value) {\n    var result = baseGetTag(value),\n        Ctor = result == objectTag ? value.constructor : undefined,\n        ctorString = Ctor ? toSource(Ctor) : '';\n\n    if (ctorString) {\n      switch (ctorString) {\n        case dataViewCtorString: return dataViewTag;\n        case mapCtorString: return mapTag;\n        case promiseCtorString: return promiseTag;\n        case setCtorString: return setTag;\n        case weakMapCtorString: return weakMapTag;\n      }\n    }\n    return result;\n  };\n}\n\n/**\n * Checks if `value` is a valid array-like index.\n *\n * @private\n * @param {*} value The value to check.\n * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n */\nfunction isIndex(value, length) {\n  length = length == null ? MAX_SAFE_INTEGER : length;\n  return !!length &&\n    (typeof value == 'number' || reIsUint.test(value)) &&\n    (value > -1 && value % 1 == 0 && value < length);\n}\n\n/**\n * Checks if `value` is suitable for use as unique object key.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n */\nfunction isKeyable(value) {\n  var type = typeof value;\n  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')\n    ? (value !== '__proto__')\n    : (value === null);\n}\n\n/**\n * Checks if `func` has its source masked.\n *\n * @private\n * @param {Function} func The function to check.\n * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n */\nfunction isMasked(func) {\n  return !!maskSrcKey && (maskSrcKey in func);\n}\n\n/**\n * Checks if `value` is likely a prototype object.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n */\nfunction isPrototype(value) {\n  var Ctor = value && value.constructor,\n      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;\n\n  return value === proto;\n}\n\n/**\n * Converts `value` to a string using `Object.prototype.toString`.\n *\n * @private\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n */\nfunction objectToString(value) {\n  return nativeObjectToString.call(value);\n}\n\n/**\n * Converts `func` to its source code.\n *\n * @private\n * @param {Function} func The function to convert.\n * @returns {string} Returns the source code.\n */\nfunction toSource(func) {\n  if (func != null) {\n    try {\n      return funcToString.call(func);\n    } catch (e) {}\n    try {\n      return (func + '');\n    } catch (e) {}\n  }\n  return '';\n}\n\n/**\n * Performs a\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * comparison between two values to determine if they are equivalent.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.eq(object, object);\n * // => true\n *\n * _.eq(object, other);\n * // => false\n *\n * _.eq('a', 'a');\n * // => true\n *\n * _.eq('a', Object('a'));\n * // => false\n *\n * _.eq(NaN, NaN);\n * // => true\n */\nfunction eq(value, other) {\n  return value === other || (value !== value && other !== other);\n}\n\n/**\n * Checks if `value` is likely an `arguments` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n *  else `false`.\n * @example\n *\n * _.isArguments(function() { return arguments; }());\n * // => true\n *\n * _.isArguments([1, 2, 3]);\n * // => false\n */\nvar isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {\n  return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&\n    !propertyIsEnumerable.call(value, 'callee');\n};\n\n/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\n/**\n * Checks if `value` is array-like. A value is considered array-like if it's\n * not a function and has a `value.length` that's an integer greater than or\n * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n * @example\n *\n * _.isArrayLike([1, 2, 3]);\n * // => true\n *\n * _.isArrayLike(document.body.children);\n * // => true\n *\n * _.isArrayLike('abc');\n * // => true\n *\n * _.isArrayLike(_.noop);\n * // => false\n */\nfunction isArrayLike(value) {\n  return value != null && isLength(value.length) && !isFunction(value);\n}\n\n/**\n * Checks if `value` is a buffer.\n *\n * @static\n * @memberOf _\n * @since 4.3.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.\n * @example\n *\n * _.isBuffer(new Buffer(2));\n * // => true\n *\n * _.isBuffer(new Uint8Array(2));\n * // => false\n */\nvar isBuffer = nativeIsBuffer || stubFalse;\n\n/**\n * Performs a deep comparison between two values to determine if they are\n * equivalent.\n *\n * **Note:** This method supports comparing arrays, array buffers, booleans,\n * date objects, error objects, maps, numbers, `Object` objects, regexes,\n * sets, strings, symbols, and typed arrays. `Object` objects are compared\n * by their own, not inherited, enumerable properties. Functions and DOM\n * nodes are compared by strict equality, i.e. `===`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.isEqual(object, other);\n * // => true\n *\n * object === other;\n * // => false\n */\nfunction isEqual(value, other) {\n  return baseIsEqual(value, other);\n}\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n  if (!isObject(value)) {\n    return false;\n  }\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in Safari 9 which returns 'object' for typed arrays and other constructors.\n  var tag = baseGetTag(value);\n  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;\n}\n\n/**\n * Checks if `value` is a valid array-like length.\n *\n * **Note:** This method is loosely based on\n * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n * @example\n *\n * _.isLength(3);\n * // => true\n *\n * _.isLength(Number.MIN_VALUE);\n * // => false\n *\n * _.isLength(Infinity);\n * // => false\n *\n * _.isLength('3');\n * // => false\n */\nfunction isLength(value) {\n  return typeof value == 'number' &&\n    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n}\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return value != null && (type == 'object' || type == 'function');\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return value != null && typeof value == 'object';\n}\n\n/**\n * Checks if `value` is classified as a typed array.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n * @example\n *\n * _.isTypedArray(new Uint8Array);\n * // => true\n *\n * _.isTypedArray([]);\n * // => false\n */\nvar isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;\n\n/**\n * Creates an array of the own enumerable property names of `object`.\n *\n * **Note:** Non-object values are coerced to objects. See the\n * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n * for more details.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.keys(new Foo);\n * // => ['a', 'b'] (iteration order is not guaranteed)\n *\n * _.keys('hi');\n * // => ['0', '1']\n */\nfunction keys(object) {\n  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);\n}\n\n/**\n * This method returns a new empty array.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {Array} Returns the new empty array.\n * @example\n *\n * var arrays = _.times(2, _.stubArray);\n *\n * console.log(arrays);\n * // => [[], []]\n *\n * console.log(arrays[0] === arrays[1]);\n * // => false\n */\nfunction stubArray() {\n  return [];\n}\n\n/**\n * This method returns `false`.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {boolean} Returns `false`.\n * @example\n *\n * _.times(2, _.stubFalse);\n * // => [false, false]\n */\nfunction stubFalse() {\n  return false;\n}\n\nmodule.exports = isEqual;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=api.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.EventType = void 0;\nvar EventType;\n(function (EventType) {\n    EventType[EventType[\"START\"] = 0] = \"START\";\n    EventType[EventType[\"END\"] = 1] = \"END\";\n    EventType[EventType[\"KEYFRAME\"] = 2] = \"KEYFRAME\";\n})(EventType = exports.EventType || (exports.EventType = {}));\n//# sourceMappingURL=enums.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.validateKeyframe = exports.validateObject = exports.validateTimeline = exports.Resolver = void 0;\nconst tslib_1 = require(\"tslib\");\n(0, tslib_1.__exportStar)(require(\"./api/enums\"), exports);\n(0, tslib_1.__exportStar)(require(\"./api/api\"), exports);\nvar resolver_1 = require(\"./resolver/resolver\");\nObject.defineProperty(exports, \"Resolver\", { enumerable: true, get: function () { return resolver_1.Resolver; } });\nvar validate_1 = require(\"./resolver/validate\");\nObject.defineProperty(exports, \"validateTimeline\", { enumerable: true, get: function () { return validate_1.validateTimeline; } });\nObject.defineProperty(exports, \"validateObject\", { enumerable: true, get: function () { return validate_1.validateObject; } });\nObject.defineProperty(exports, \"validateKeyframe\", { enumerable: true, get: function () { return validate_1.validateKeyframe; } });\n//# sourceMappingURL=index.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.cleanCacheResult = exports.cacheResult = exports.applyParentInstances = exports.setInstanceStartTime = exports.setInstanceEndTime = exports.resetId = exports.getId = exports.joinCaps = exports.addCapsToResuming = exports.joinReferences = exports.isReference = exports.capInstances = exports.applyRepeatingInstances = exports.operateOnArrays = exports.invertInstances = exports.convertEventsToInstances = exports.cleanInstances = exports.sortEvents = exports.isNumeric = exports.isConstant = exports.extendMandadory = void 0;\nconst _ = require(\"underscore\");\n/**\n * Somewhat like _.extend, but with strong types & mandated additional properties\n * @param original Object to be extended\n * @param extendObj properties to add\n */\nfunction extendMandadory(original, extendObj) {\n    return _.extend(original, extendObj);\n}\nexports.extendMandadory = extendMandadory;\nfunction isConstant(str) {\n    return !!(isNumeric(str) || (_.isString(str) && (str.match(/^true$/) || str.match(/^false$/))));\n}\nexports.isConstant = isConstant;\nfunction isNumeric(str) {\n    if (str === null)\n        return false;\n    if (_.isNumber(str))\n        return true;\n    if (_.isString(str))\n        return !!(str.match(/^[-+]?[0-9.]+$/) && !_.isNaN(parseFloat(str)));\n    return false;\n}\nexports.isNumeric = isNumeric;\nfunction sortEvents(events) {\n    return events.sort((a, b) => {\n        if (a.time > b.time)\n            return 1;\n        if (a.time < b.time)\n            return -1;\n        const aId = a.data && (a.data.id || (a.data.instance && a.data.instance.id));\n        const bId = b.data && (b.data.id || (b.data.instance && b.data.instance.id));\n        if (aId && bId && aId === bId) {\n            // If the event refer to the same ID, let the ending event be first:\n            if (a.value && !b.value)\n                return -1;\n            if (!a.value && b.value)\n                return 1;\n        }\n        if (a.value && !b.value)\n            return 1;\n        if (!a.value && b.value)\n            return -1;\n        return 0;\n    });\n}\nexports.sortEvents = sortEvents;\n/**\n * Clean up instances, join overlapping etc..\n * @param instances\n */\nfunction cleanInstances(instances, allowMerge, allowZeroGaps = false) {\n    // First, optimize for certain common situations:\n    if (instances.length === 0)\n        return [];\n    if (instances.length === 1)\n        return instances;\n    const events = [];\n    for (let i = 0; i < instances.length; i++) {\n        const instance = instances[i];\n        events.push({\n            time: instance.start,\n            value: true,\n            data: { instance: instance },\n            references: instance.references,\n        });\n        if (instance.end !== null) {\n            events.push({\n                time: instance.end,\n                value: false,\n                data: { instance: instance },\n                references: instance.references,\n            });\n        }\n    }\n    return convertEventsToInstances(events, allowMerge, allowZeroGaps);\n}\nexports.cleanInstances = cleanInstances;\nfunction convertEventsToInstances(events, allowMerge, allowZeroGaps = false) {\n    sortEvents(events);\n    const activeInstances = {};\n    let activeInstanceId = null;\n    let previousActive = false;\n    const negativeInstances = {};\n    let previousNegative = false;\n    let negativeInstanceId = null;\n    const returnInstances = [];\n    for (let i = 0; i < events.length; i++) {\n        const event = events[i];\n        const eventId = event.data.id || event.data.instance.id;\n        const lastInstance = returnInstances[returnInstances.length - 1];\n        if (event.value) {\n            activeInstances[eventId] = event;\n            delete negativeInstances[eventId];\n        }\n        else {\n            delete activeInstances[eventId];\n            negativeInstances[eventId] = event;\n        }\n        if (Object.keys(activeInstances).length) {\n            // There is an active instance\n            if (!allowMerge && !allowZeroGaps && lastInstance && previousNegative) {\n                // There is previously an inActive (negative) instance\n                lastInstance.start = event.time;\n            }\n            else {\n                const o = handleActiveInstances(event, lastInstance, activeInstanceId, eventId, activeInstances, allowMerge, allowZeroGaps);\n                activeInstanceId = o.activeInstanceId;\n                if (o.returnInstance) {\n                    returnInstances.push(o.returnInstance);\n                }\n            }\n            previousActive = true;\n            previousNegative = false;\n        }\n        else {\n            // No instances are active\n            if (lastInstance && previousActive) {\n                lastInstance.end = event.time;\n            }\n            else {\n                if (Object.keys(negativeInstances).length) {\n                    // There is a negative instance running\n                    const o = handleActiveInstances(event, lastInstance, negativeInstanceId, eventId, negativeInstances, allowMerge, allowZeroGaps);\n                    negativeInstanceId = o.activeInstanceId;\n                    if (o.returnInstance) {\n                        returnInstances.push({\n                            ...o.returnInstance,\n                            start: o.returnInstance.end || 0,\n                            end: o.returnInstance.start,\n                        });\n                    }\n                    previousNegative = true;\n                }\n            }\n            previousActive = false;\n        }\n    }\n    return returnInstances;\n}\nexports.convertEventsToInstances = convertEventsToInstances;\nfunction handleActiveInstances(event, lastInstance, activeInstanceId, eventId, activeInstances, allowMerge, allowZeroGaps = false) {\n    let returnInstance = null;\n    if (!allowMerge &&\n        event.value &&\n        lastInstance &&\n        lastInstance.end === null &&\n        activeInstanceId !== null &&\n        activeInstanceId !== eventId) {\n        // Start a new instance:\n        lastInstance.end = event.time;\n        returnInstance = {\n            id: getId(),\n            start: event.time,\n            end: null,\n            references: event.references,\n            originalEnd: event.data.instance.originalEnd,\n            originalStart: event.data.instance.originalStart,\n        };\n        activeInstanceId = eventId;\n    }\n    else if (!allowMerge && !event.value && lastInstance && activeInstanceId === eventId) {\n        // The active instance stopped playing, but another is still playing\n        const latestInstance = _.reduce(activeInstances, (memo, instanceEvent, id) => {\n            if (memo === null || memo.event.time < instanceEvent.time) {\n                return {\n                    event: instanceEvent,\n                    id: id,\n                };\n            }\n            return memo;\n        }, null);\n        if (latestInstance) {\n            // Restart that instance now:\n            lastInstance.end = event.time;\n            returnInstance = {\n                id: eventId + '_' + getId(),\n                start: event.time,\n                end: null,\n                references: latestInstance.event.references,\n                originalEnd: event.data.instance.originalEnd,\n                originalStart: event.data.instance.originalStart,\n            };\n            activeInstanceId = latestInstance.id;\n        }\n    }\n    else if (allowMerge && !allowZeroGaps && lastInstance && lastInstance.end === event.time) {\n        // The previously running ended just now\n        // resume previous instance:\n        lastInstance.end = null;\n        lastInstance.references = joinReferences(lastInstance.references, event.references);\n        addCapsToResuming(lastInstance, event.data.instance.caps);\n    }\n    else if (!lastInstance || lastInstance.end !== null) {\n        // There is no previously running instance\n        // Start a new instance:\n        returnInstance = {\n            id: eventId,\n            start: event.time,\n            end: null,\n            references: event.references,\n            caps: event.data.instance.caps,\n            originalEnd: event.data.instance.originalEnd,\n            originalStart: event.data.instance.originalStart,\n        };\n        activeInstanceId = eventId;\n    }\n    else {\n        // There is already a running instance\n        lastInstance.references = joinReferences(lastInstance.references, event.references);\n        addCapsToResuming(lastInstance, event.data.instance.caps);\n    }\n    if (lastInstance && lastInstance.caps && !lastInstance.caps.length)\n        delete lastInstance.caps;\n    if (returnInstance &&\n        lastInstance &&\n        lastInstance.start === lastInstance.end &&\n        lastInstance.end === returnInstance.start) {\n        // replace the previous zero-length with this one instead\n        lastInstance.id = returnInstance.id;\n        lastInstance.start = returnInstance.start;\n        lastInstance.end = returnInstance.end;\n        lastInstance.references = returnInstance.references;\n        lastInstance.caps = returnInstance.caps;\n        lastInstance.originalStart = returnInstance.originalStart;\n        lastInstance.originalEnd = returnInstance.originalEnd;\n        returnInstance = null;\n    }\n    return {\n        activeInstanceId,\n        returnInstance,\n    };\n}\nfunction invertInstances(instances) {\n    if (instances.length) {\n        instances = cleanInstances(instances, true, true);\n        const invertedInstances = [];\n        if (instances[0].start !== 0) {\n            invertedInstances.push({\n                id: getId(),\n                isFirst: true,\n                start: 0,\n                end: null,\n                references: joinReferences(instances[0].references, instances[0].id),\n            });\n        }\n        for (let i = 0; i < instances.length; i++) {\n            const instance = instances[i];\n            const last = _.last(invertedInstances);\n            if (last) {\n                last.end = instance.start;\n            }\n            if (instance.end !== null) {\n                invertedInstances.push({\n                    id: getId(),\n                    start: instance.end,\n                    end: null,\n                    references: joinReferences(instance.references, instance.id),\n                    caps: instance.caps,\n                });\n            }\n        }\n        return invertedInstances;\n    }\n    else {\n        return [\n            {\n                id: getId(),\n                isFirst: true,\n                start: 0,\n                end: null,\n                references: [],\n            },\n        ];\n    }\n}\nexports.invertInstances = invertInstances;\n/**\n * Perform an action on 2 arrays. Behaves somewhat like the \".*\"-operator in Matlab\n * @param array0\n * @param array1\n * @param operate\n */\nfunction operateOnArrays(array0, array1, operate) {\n    if (array0 === null || array1 === null)\n        return null;\n    if (isReference(array0) && isReference(array1)) {\n        return operate(array0, array1);\n    }\n    const result = [];\n    const minLength = Math.min(_.isArray(array0) ? array0.length : Infinity, _.isArray(array1) ? array1.length : Infinity);\n    for (let i = 0; i < minLength; i++) {\n        const a = _.isArray(array0)\n            ? array0[i]\n            : { id: '', start: array0.value, end: array0.value, references: array0.references };\n        const b = _.isArray(array1)\n            ? array1[i]\n            : { id: '', start: array1.value, end: array1.value, references: array1.references };\n        const start = a.isFirst\n            ? { value: a.start, references: a.references }\n            : b.isFirst\n                ? { value: b.start, references: b.references }\n                : operate({ value: a.start, references: joinReferences(a.id, a.references) }, { value: b.start, references: joinReferences(b.id, b.references) });\n        const end = a.isFirst\n            ? a.end !== null\n                ? { value: a.end, references: a.references }\n                : null\n            : b.isFirst\n                ? b.end !== null\n                    ? { value: b.end, references: b.references }\n                    : null\n                : operate(a.end !== null ? { value: a.end, references: joinReferences(a.id, a.references) } : null, b.end !== null ? { value: b.end, references: joinReferences(b.id, b.references) } : null);\n        if (start !== null) {\n            result.push({\n                id: getId(),\n                start: start.value,\n                end: end === null ? null : end.value,\n                references: joinReferences(start.references, end !== null ? end.references : []),\n                caps: joinCaps(a.caps, b.caps),\n            });\n        }\n    }\n    return cleanInstances(result, false);\n}\nexports.operateOnArrays = operateOnArrays;\nfunction applyRepeatingInstances(instances, repeatTime0, options) {\n    if (repeatTime0 === null || !repeatTime0.value)\n        return instances;\n    const repeatTime = repeatTime0.value;\n    if (isReference(instances)) {\n        instances = [\n            {\n                id: '',\n                start: instances.value,\n                end: null,\n                references: instances.references,\n            },\n        ];\n    }\n    const repeatedInstances = [];\n    for (let i = 0; i < instances.length; i++) {\n        const instance = instances[i];\n        let startTime = Math.max(options.time - ((options.time - instance.start) % repeatTime), instance.start);\n        let endTime = instance.end === null ? null : instance.end + (startTime - instance.start);\n        const cap = (instance.caps ? _.find(instance.caps, (cap) => instance.references.indexOf(cap.id) !== -1) : null) || null;\n        const limit = options.limitCount || 2;\n        for (let i = 0; i < limit; i++) {\n            if (options.limitTime && startTime >= options.limitTime)\n                break;\n            const cappedStartTime = cap ? Math.max(cap.start, startTime) : startTime;\n            const cappedEndTime = cap && cap.end !== null && endTime !== null ? Math.min(cap.end, endTime) : endTime;\n            if ((cappedEndTime !== null && cappedEndTime !== void 0 ? cappedEndTime : Infinity) > cappedStartTime) {\n                repeatedInstances.push({\n                    id: getId(),\n                    start: cappedStartTime,\n                    end: cappedEndTime,\n                    references: joinReferences(instance.id, instance.references, repeatTime0.references),\n                });\n            }\n            startTime += repeatTime;\n            if (endTime !== null)\n                endTime += repeatTime;\n        }\n    }\n    return cleanInstances(repeatedInstances, false);\n}\nexports.applyRepeatingInstances = applyRepeatingInstances;\n/**\n * Cap instances so that they are within their parentInstances\n * @param instances\n * @param parentInstances\n */\nfunction capInstances(instances, parentInstances) {\n    var _a, _b, _c, _d, _e, _f;\n    if (isReference(parentInstances) || parentInstances === null)\n        return instances;\n    let returnInstances = [];\n    for (let i = 0; i < instances.length; i++) {\n        const instanceOrg = instances[i];\n        const addedInstanceTimes = new Set();\n        for (let j = 0; j < parentInstances.length; j++) {\n            const parent = parentInstances[j];\n            // First, check if the instance crosses the parent at all:\n            if (instanceOrg.start <= ((_a = parent.end) !== null && _a !== void 0 ? _a : Infinity) && ((_b = instanceOrg.end) !== null && _b !== void 0 ? _b : Infinity) >= parent.start) {\n                const instance = _.clone(instanceOrg);\n                // Cap start\n                if (instance.start < parent.start) {\n                    setInstanceStartTime(instance, parent.start);\n                }\n                // Cap end\n                if (((_c = instance.end) !== null && _c !== void 0 ? _c : Infinity) > ((_d = parent.end) !== null && _d !== void 0 ? _d : Infinity)) {\n                    setInstanceEndTime(instance, parent.end);\n                }\n                if (instance.start >= parent.start && ((_e = instance.end) !== null && _e !== void 0 ? _e : Infinity) <= ((_f = parent.end) !== null && _f !== void 0 ? _f : Infinity)) {\n                    // The instance is within the parent\n                    if (instance.start === instance.end && addedInstanceTimes.has(instance.start)) {\n                        // Don't add zero-length instances if there are already is instances covering that time\n                    }\n                    else {\n                        instance.references = joinReferences(instance.references, parent.references);\n                        returnInstances.push(instance);\n                        addedInstanceTimes.add(instance.start);\n                        if (instance.end)\n                            addedInstanceTimes.add(instance.end);\n                    }\n                }\n            }\n        }\n    }\n    returnInstances.sort((a, b) => a.start - b.start);\n    // Ensure unique ids:\n    const ids = {};\n    for (let i = 0; i < returnInstances.length; i++) {\n        const instance = returnInstances[i];\n        // tslint:disable-next-line\n        if (ids[instance.id] !== undefined) {\n            instance.id = instance.id + ++ids[instance.id];\n        }\n        else {\n            ids[instance.id] = 0;\n        }\n    }\n    // Clean up the instances, to remove duplicates\n    returnInstances = cleanInstances(returnInstances, true, true);\n    return returnInstances;\n}\nexports.capInstances = capInstances;\nfunction isReference(ref0) {\n    const ref = ref0;\n    return (typeof ref === 'object' &&\n        !_.isArray(ref) &&\n        ref.value !== undefined &&\n        _.isArray(ref.references) &&\n        ref !== null);\n}\nexports.isReference = isReference;\nfunction joinReferences(...references) {\n    const refMap = {};\n    const refs = [];\n    for (let i = 0; i < references.length; i++) {\n        const reference = references[i];\n        if (reference) {\n            if (typeof reference === 'string') {\n                if (!refMap[reference])\n                    refs.push(reference);\n                refMap[reference] = true;\n            }\n            else {\n                for (let j = 0; j < reference.length; j++) {\n                    const ref = reference[j];\n                    if (ref) {\n                        if (!refMap[ref])\n                            refs.push(ref);\n                        refMap[ref] = true;\n                    }\n                }\n            }\n        }\n    }\n    return refs.sort((a, b) => {\n        if (a > b)\n            return 1;\n        if (a < b)\n            return -1;\n        return 0;\n    });\n}\nexports.joinReferences = joinReferences;\nfunction addCapsToResuming(instance, ...caps) {\n    const capsToAdd = [];\n    const joinedCaps = joinCaps(...caps);\n    for (let i = 0; i < joinedCaps.length; i++) {\n        const cap = joinedCaps[i];\n        if (cap.end !== null && instance.end !== null && cap.end > instance.end) {\n            capsToAdd.push({\n                id: cap.id,\n                start: 0,\n                end: cap.end,\n            });\n        }\n    }\n    instance.caps = joinCaps(instance.caps, capsToAdd);\n}\nexports.addCapsToResuming = addCapsToResuming;\nfunction joinCaps(...caps) {\n    const capMap = {};\n    for (let i = 0; i < caps.length; i++) {\n        const caps2 = caps[i];\n        if (caps2) {\n            for (let j = 0; j < caps2.length; j++) {\n                const cap2 = caps2[j];\n                capMap[cap2.id] = cap2;\n            }\n        }\n    }\n    return Object.values(capMap);\n}\nexports.joinCaps = joinCaps;\nlet idCount = 0;\n/**\n * Returns a unique id\n */\nfunction getId() {\n    return '@' + (idCount++).toString(36);\n}\nexports.getId = getId;\nfunction resetId() {\n    idCount = 0;\n}\nexports.resetId = resetId;\nfunction setInstanceEndTime(instance, endTime) {\n    instance.originalEnd = instance.originalEnd !== undefined ? instance.originalEnd : instance.end;\n    instance.end = endTime;\n}\nexports.setInstanceEndTime = setInstanceEndTime;\nfunction setInstanceStartTime(instance, startTime) {\n    instance.originalStart = instance.originalStart !== undefined ? instance.originalStart : instance.start;\n    instance.start = startTime;\n}\nexports.setInstanceStartTime = setInstanceStartTime;\nfunction applyParentInstances(parentInstances, value) {\n    return operateOnArrays(parentInstances, value, operate);\n}\nexports.applyParentInstances = applyParentInstances;\nfunction operate(a, b) {\n    if (a === null || b === null)\n        return null;\n    return {\n        value: a.value + b.value,\n        references: joinReferences(a.references, b.references),\n    };\n}\nconst cacheResultCache = {};\nlet cleanCacheResultTimeout = null;\n/** Cache the result of function for a limited time */\nfunction cacheResult(name, fcn, limitTime = 1000) {\n    if (Math.random() < 0.01) {\n        if (cleanCacheResultTimeout)\n            clearTimeout(cleanCacheResultTimeout);\n        cleanCacheResultTimeout = setTimeout(() => {\n            cleanCacheResult();\n        }, 100);\n    }\n    const cache = cacheResultCache[name];\n    if (!cache || cache.ttl < Date.now()) {\n        const value = fcn();\n        cacheResultCache[name] = {\n            ttl: Date.now() + limitTime,\n            value: value,\n        };\n        return value;\n    }\n    else {\n        return cache.value;\n    }\n}\nexports.cacheResult = cacheResult;\nfunction cleanCacheResult() {\n    if (cleanCacheResultTimeout) {\n        clearTimeout(cleanCacheResultTimeout);\n        cleanCacheResultTimeout = null;\n    }\n    _.each(cacheResultCache, (cache, name) => {\n        if (cache.ttl < Date.now())\n            delete cacheResultCache[name];\n    });\n}\nexports.cleanCacheResult = cleanCacheResult;\n//# sourceMappingURL=lib.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getObjectReferences = exports.hashTimelineObject = exports.initializeCache = void 0;\nfunction initializeCache(cacheOrg, resolvedTimeline) {\n    const cache = cacheOrg;\n    if (!cache.objHashes)\n        cache.objHashes = {};\n    if (!cache.resolvedTimeline)\n        cache.resolvedTimeline = resolvedTimeline;\n    // Todo: make statistics work when using cache\n    return cache;\n}\nexports.initializeCache = initializeCache;\n/** Return a \"hash-string\" which changes whenever anything that affects timing of a timeline-object has changed. */\nfunction hashTimelineObject(obj) {\n    const thingsThatMatter = [\n        JSON.stringify(obj.enable),\n        obj.disabled + '',\n        obj.priority + '',\n        obj.resolved.parentId || '',\n        obj.resolved.isKeyframe + '',\n        obj.classes ? obj.classes.join('.') : '',\n        obj.layer + '',\n        obj.seamless + '',\n        /*\n        Note: The following properties are ignored, as they don't affect timing or resolving:\n         * id\n         * children\n         * keyframes\n         * isGroup\n         * content\n         */\n    ];\n    return thingsThatMatter.join(',');\n}\nexports.hashTimelineObject = hashTimelineObject;\nfunction getObjectReferences(obj) {\n    return obj.resolved.directReferences;\n}\nexports.getObjectReferences = getObjectReferences;\n//# sourceMappingURL=cache.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.addObjectToResolvedTimeline = void 0;\nfunction addObjectToResolvedTimeline(resolvedTimeline, obj) {\n    resolvedTimeline.objects[obj.id] = obj;\n    if (obj.classes) {\n        for (let i = 0; i < obj.classes.length; i++) {\n            const className = obj.classes[i];\n            if (className) {\n                if (!resolvedTimeline.classes[className])\n                    resolvedTimeline.classes[className] = [];\n                resolvedTimeline.classes[className].push(obj.id);\n            }\n        }\n    }\n    if (obj.layer) {\n        if (!resolvedTimeline.layers[obj.layer])\n            resolvedTimeline.layers[obj.layer] = [];\n        resolvedTimeline.layers[obj.layer].push(obj.id);\n    }\n}\nexports.addObjectToResolvedTimeline = addObjectToResolvedTimeline;\n//# sourceMappingURL=common.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.validateExpression = exports.wrapInnerExpressions = exports.simplifyExpression = exports.interpretExpression = exports.OPERATORS = void 0;\nconst _ = require(\"underscore\");\nconst lib_1 = require(\"../lib\");\nexports.OPERATORS = ['&', '|', '+', '-', '*', '/', '%', '!'];\nconst REGEXP_OPERATORS = _.map(exports.OPERATORS, (o) => '\\\\' + o).join('');\nfunction interpretExpression(expression) {\n    if ((0, lib_1.isNumeric)(expression)) {\n        return parseFloat(expression);\n    }\n    else if (_.isString(expression)) {\n        const expressionString = expression;\n        return (0, lib_1.cacheResult)(expressionString, () => {\n            const expr = expressionString.replace(new RegExp('([' + REGEXP_OPERATORS + '\\\\(\\\\)])', 'g'), ' $1 '); // Make sure there's a space between every operator & operand\n            const words = _.compact(expr.split(' '));\n            if (words.length === 0)\n                return null; // empty expression\n            // Fix special case: a + - b\n            for (let i = words.length - 2; i >= 1; i--) {\n                if ((words[i] === '-' || words[i] === '+') && wordIsOperator(exports.OPERATORS, words[i - 1])) {\n                    words[i] = words[i] + words[i + 1];\n                    words.splice(i + 1, 1);\n                }\n            }\n            const innerExpression = wrapInnerExpressions(words);\n            if (innerExpression.rest.length)\n                throw new Error('interpretExpression: syntax error: parentheses don\\'t add up in \"' + expr + '\".');\n            if (innerExpression.inner.length % 2 !== 1)\n                throw new Error('interpretExpression: operands & operators don\\'t add up: \"' +\n                    innerExpression.inner.join(' ') +\n                    '\".');\n            const expression = words2Expression(exports.OPERATORS, innerExpression.inner);\n            validateExpression(exports.OPERATORS, expression);\n            return expression;\n        }, 100 * 1000);\n    }\n    else {\n        return expression;\n    }\n}\nexports.interpretExpression = interpretExpression;\n/** Try to simplify an expression, this includes:\n * * Combine constant operands, using arithmetic operators\n * ...more to come?\n */\nfunction simplifyExpression(expr0) {\n    const expr = _.isString(expr0) ? interpretExpression(expr0) : expr0;\n    if (!expr)\n        return expr;\n    if (isExpressionObject(expr)) {\n        const l = simplifyExpression(expr.l);\n        const o = expr.o;\n        const r = simplifyExpression(expr.r);\n        if ((0, lib_1.isConstant)(l) && (0, lib_1.isConstant)(r) && _.isNumber(l) && _.isNumber(r)) {\n            // The operands can be combined:\n            return o === '+'\n                ? l + r\n                : o === '-'\n                    ? l - r\n                    : o === '*'\n                        ? l * r\n                        : o === '/'\n                            ? l / r\n                            : o === '%'\n                                ? l % r\n                                : { l, o, r };\n        }\n        return { l, o, r };\n    }\n    return expr;\n}\nexports.simplifyExpression = simplifyExpression;\nfunction isExpressionObject(expr) {\n    return typeof expr === 'object' && _.has(expr, 'l') && _.has(expr, 'o') && _.has(expr, 'r');\n}\nfunction wordIsOperator(operatorList, word) {\n    if (operatorList.indexOf(word) !== -1)\n        return true;\n    return false;\n}\n// Turns ['a', '(', 'b', 'c', ')'] into ['a', ['b', 'c']]\n// or ['a', '&', '!', 'b'] into ['a', '&', ['', '!', 'b']]\nfunction wrapInnerExpressions(words) {\n    for (let i = 0; i < words.length; i++) {\n        if (words[i] === '(') {\n            const tmp = wrapInnerExpressions(words.slice(i + 1));\n            // insert inner expression and remove tha\n            words[i] = tmp.inner;\n            words.splice(i + 1, 99999, ...tmp.rest);\n        }\n        else if (words[i] === ')') {\n            return {\n                inner: words.slice(0, i),\n                rest: words.slice(i + 1),\n            };\n        }\n        else if (words[i] === '!') {\n            const tmp = wrapInnerExpressions(words.slice(i + 1));\n            // insert inner expression after the '!'\n            words[i] = ['', '!'].concat(tmp.inner);\n            words.splice(i + 1, 99999, ...tmp.rest);\n        }\n    }\n    return {\n        inner: words,\n        rest: [],\n    };\n}\nexports.wrapInnerExpressions = wrapInnerExpressions;\nfunction words2Expression(operatorList, words) {\n    if (!words || !words.length)\n        throw new Error('words2Expression: syntax error: unbalanced expression');\n    while (words.length === 1 && _.isArray(words[0]))\n        words = words[0];\n    if (words.length === 1)\n        return words[0];\n    // Find the operator with the highest priority:\n    let operatorI = -1;\n    for (let i = 0; i < operatorList.length; i++) {\n        const operator = operatorList[i];\n        if (operatorI === -1) {\n            operatorI = words.lastIndexOf(operator);\n        }\n    }\n    if (operatorI !== -1) {\n        const l = words.slice(0, operatorI);\n        const r = words.slice(operatorI + 1);\n        const expr = {\n            l: words2Expression(operatorList, l),\n            o: words[operatorI],\n            r: words2Expression(operatorList, r),\n        };\n        return expr;\n    }\n    else\n        throw new Error('words2Expression: syntax error: operator not found: \"' + words.join(' ') + '\"');\n}\n/** Validates an expression. Returns true on success, throws error if not */\nfunction validateExpression(operatorList, expr0, breadcrumbs) {\n    if (!breadcrumbs)\n        breadcrumbs = 'ROOT';\n    if (_.isObject(expr0) && !_.isArray(expr0)) {\n        const expr = expr0;\n        if (!_.has(expr, 'l'))\n            throw new Error(`validateExpression: ${breadcrumbs}.l missing in ${JSON.stringify(expr)}`);\n        if (!_.has(expr, 'o'))\n            throw new Error(`validateExpression: ${breadcrumbs}.o missing in ${JSON.stringify(expr)}`);\n        if (!_.has(expr, 'r'))\n            throw new Error(`validateExpression: ${breadcrumbs}.r missing in ${JSON.stringify(expr)}`);\n        if (!_.isString(expr.o))\n            throw new Error(`validateExpression: ${breadcrumbs}.o not a string`);\n        if (!wordIsOperator(operatorList, expr.o))\n            throw new Error(breadcrumbs + '.o not valid: \"' + expr.o + '\"');\n        return (validateExpression(operatorList, expr.l, breadcrumbs + '.l') &&\n            validateExpression(operatorList, expr.r, breadcrumbs + '.r'));\n    }\n    else if (!_.isNull(expr0) && !_.isString(expr0) && !_.isNumber(expr0)) {\n        throw new Error(`validateExpression: ${breadcrumbs} is of invalid type`);\n    }\n    return true;\n}\nexports.validateExpression = validateExpression;\n//# sourceMappingURL=expression.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.lookupExpression = exports.resolveTimelineObj = exports.Resolver = void 0;\nconst _ = require(\"underscore\");\nconst lib_1 = require(\"../lib\");\nconst validate_1 = require(\"./validate\");\nconst expression_1 = require(\"./expression\");\nconst state_1 = require(\"./state\");\nconst common_1 = require(\"./common\");\nconst cache_1 = require(\"./cache\");\nclass Resolver {\n    /**\n     * Go through all objects on the timeline and calculate all the timings.\n     * Returns a ResolvedTimeline which can be piped into Resolver.getState()\n     * @param timeline Array of timeline objects\n     * @param options Resolve options\n     */\n    static resolveTimeline(timeline, options) {\n        if (!_.isArray(timeline))\n            throw new Error('resolveTimeline: parameter timeline missing');\n        if (!options)\n            throw new Error('resolveTimeline: parameter options missing');\n        (0, validate_1.validateTimeline)(timeline, false);\n        (0, lib_1.resetId)();\n        const resolvedTimeline = {\n            options: { ...options },\n            objects: {},\n            classes: {},\n            layers: {},\n            statistics: {\n                unresolvedCount: 0,\n                resolvedCount: 0,\n                resolvedInstanceCount: 0,\n                resolvedObjectCount: 0,\n                resolvedGroupCount: 0,\n                resolvedKeyframeCount: 0,\n                resolvingCount: 0,\n            },\n        };\n        // Step 1: pre-populate resolvedTimeline with objects\n        const addToResolvedTimeline = (obj, levelDeep, parentId, isKeyframe) => {\n            if (resolvedTimeline.objects[obj.id])\n                throw Error(`All timelineObjects must be unique! (duplicate: \"${obj.id}\")`);\n            const o = (0, lib_1.extendMandadory)(_.clone(obj), {\n                resolved: {\n                    resolved: false,\n                    resolving: false,\n                    instances: [],\n                    levelDeep: levelDeep,\n                    isSelfReferencing: false,\n                    directReferences: [],\n                },\n            });\n            if (parentId) {\n                o.resolved.parentId = parentId;\n                o.resolved.directReferences.push(parentId);\n            }\n            if (isKeyframe)\n                o.resolved.isKeyframe = true;\n            (0, common_1.addObjectToResolvedTimeline)(resolvedTimeline, o);\n            // Add children:\n            if (obj.isGroup && obj.children) {\n                for (let i = 0; i < obj.children.length; i++) {\n                    const child = obj.children[i];\n                    addToResolvedTimeline(child, levelDeep + 1, obj.id);\n                }\n            }\n            // Add keyframes:\n            if (obj.keyframes) {\n                for (let i = 0; i < obj.keyframes.length; i++) {\n                    const keyframe = obj.keyframes[i];\n                    const kf2 = (0, lib_1.extendMandadory)(_.clone(keyframe), {\n                        layer: '',\n                    });\n                    addToResolvedTimeline(kf2, levelDeep + 1, obj.id, true);\n                }\n            }\n        };\n        for (let i = 0; i < timeline.length; i++) {\n            const obj = timeline[i];\n            addToResolvedTimeline(obj, 0);\n        }\n        // Step 2: go though and resolve the objects\n        if (options.cache) {\n            // Figure out which objects has changed since last time\n            const cache = (0, cache_1.initializeCache)(options.cache, resolvedTimeline);\n            // Go through all new objects, and determine whether they have changed:\n            const allNewObjects = {};\n            const changedReferences = {};\n            const getAllReferencesThisObjectAffects = (newObj) => {\n                const references = ['#' + newObj.id];\n                if (newObj.classes) {\n                    for (const className of newObj.classes) {\n                        references.push('.' + className);\n                    }\n                }\n                if (newObj.layer)\n                    references.push('$' + newObj.layer);\n                return references;\n            };\n            const addChangedObject = (obj) => {\n                const references = getAllReferencesThisObjectAffects(obj);\n                for (const ref of references) {\n                    changedReferences[ref] = true;\n                }\n            };\n            for (const obj of Object.values(resolvedTimeline.objects)) {\n                const oldHash = cache.objHashes[obj.id];\n                const newHash = (0, cache_1.hashTimelineObject)(obj);\n                allNewObjects[obj.id] = true;\n                if (!oldHash || oldHash !== newHash) {\n                    cache.objHashes[obj.id] = newHash;\n                    addChangedObject(obj);\n                    const oldObj = cache.resolvedTimeline.objects[obj.id];\n                    if (oldObj)\n                        addChangedObject(oldObj);\n                }\n                else {\n                    // No timing-affecting changes detected\n                    // Even though the timeline-properties hasn't changed,\n                    // the content (and other properties) might have:\n                    const oldObj = cache.resolvedTimeline.objects[obj.id];\n                    cache.resolvedTimeline.objects[obj.id] = {\n                        ...obj,\n                        resolved: oldObj.resolved,\n                    };\n                }\n            }\n            if (cache.hasOldData) {\n                // Go through all old hashes, removing the ones that doesn't exist anymore\n                for (const objId in cache.resolvedTimeline.objects) {\n                    if (!allNewObjects[objId]) {\n                        const obj = cache.resolvedTimeline.objects[objId];\n                        delete cache.objHashes[objId];\n                        addChangedObject(obj);\n                    }\n                }\n                // Invalidate objects, by gradually removing the invalidated ones from validObjects\n                // Prepare validObjects:\n                const validObjects = {};\n                for (const obj of Object.values(resolvedTimeline.objects)) {\n                    validObjects[obj.id] = obj;\n                }\n                /** All references that depend on another reference (ie objects, classs or layers): */\n                const affectReferenceMap = {};\n                for (const obj of Object.values(resolvedTimeline.objects)) {\n                    // Add everything that this object affects:\n                    const cachedObj = cache.resolvedTimeline.objects[obj.id];\n                    let affectedReferences = getAllReferencesThisObjectAffects(obj);\n                    if (cachedObj) {\n                        affectedReferences = _.uniq(affectedReferences.concat(getAllReferencesThisObjectAffects(cachedObj)));\n                    }\n                    for (let i = 0; i < affectedReferences.length; i++) {\n                        const ref = affectedReferences[i];\n                        const objRef = '#' + obj.id;\n                        if (ref !== objRef) {\n                            if (!affectReferenceMap[objRef])\n                                affectReferenceMap[objRef] = [];\n                            affectReferenceMap[objRef].push(ref);\n                        }\n                    }\n                    // Add everything that this object is affected by:\n                    if (changedReferences['#' + obj.id]) {\n                        // The object is directly said to be invalid, no need to add it to referencingObjects,\n                        // since it'll be easily invalidated anyway later\n                    }\n                    else {\n                        // Note: we only have to check for the OLD object, since if the old and the new object differs,\n                        // that would mean it'll be directly invalidated anyway.\n                        if (cachedObj) {\n                            // Fetch all references for the object from the last time it was resolved.\n                            // Note: This can be done, since _if_ the object was changed in any way since last resolve\n                            // it'll be invalidated anyway\n                            const dependOnReferences = (0, cache_1.getObjectReferences)(cachedObj);\n                            for (let i = 0; i < dependOnReferences.length; i++) {\n                                const ref = dependOnReferences[i];\n                                if (!affectReferenceMap[ref])\n                                    affectReferenceMap[ref] = [];\n                                affectReferenceMap[ref].push('#' + obj.id);\n                            }\n                        }\n                    }\n                }\n                // Invalidate all changed objects, and recursively invalidate all objects that reference those objects:\n                const handledReferences = {};\n                for (const reference of Object.keys(changedReferences)) {\n                    invalidateObjectsWithReference(handledReferences, reference, affectReferenceMap, validObjects);\n                }\n                // The objects that are left in validObjects at this point are still valid.\n                // We can reuse the old resolving for those:\n                for (const obj of Object.values(validObjects)) {\n                    if (!cache.resolvedTimeline.objects[obj.id])\n                        throw new Error(`Something went wrong: \"${obj.id}\" does not exist in cache.resolvedTimeline.objects`);\n                    resolvedTimeline.objects[obj.id] = cache.resolvedTimeline.objects[obj.id];\n                }\n            }\n            for (const obj of Object.values(resolvedTimeline.objects)) {\n                resolveTimelineObj(resolvedTimeline, obj);\n            }\n            // Save for next time:\n            cache.resolvedTimeline = resolvedTimeline;\n            cache.hasOldData = true;\n            // Update statistics, since that's not accurate after having used the cache:\n            resolvedTimeline.statistics.unresolvedCount = 0;\n            resolvedTimeline.statistics.resolvedCount = 0;\n            resolvedTimeline.statistics.resolvedInstanceCount = 0;\n            resolvedTimeline.statistics.resolvedObjectCount = 0;\n            resolvedTimeline.statistics.resolvedGroupCount = 0;\n            resolvedTimeline.statistics.resolvedKeyframeCount = 0;\n            for (const obj of Object.values(resolvedTimeline.objects)) {\n                updateStatistics(resolvedTimeline, obj);\n            }\n            return resolvedTimeline;\n        }\n        else {\n            // If there are no cache provided, just resolve all objects:\n            for (const obj of Object.values(resolvedTimeline.objects)) {\n                resolveTimelineObj(resolvedTimeline, obj);\n            }\n            return resolvedTimeline;\n        }\n    }\n    /** Calculate the state for all points in time.  */\n    static resolveAllStates(resolvedTimeline, cache) {\n        return (0, state_1.resolveStates)(resolvedTimeline, cache);\n    }\n    /**\n     * Calculate the state at a given point in time.\n     * Using a ResolvedTimeline calculated by Resolver.resolveTimeline() or\n     * a ResolvedStates calculated by Resolver.resolveAllStates()\n     * @param resolved ResolvedTimeline calculated by Resolver.resolveTimeline.\n     * @param time The point in time where to calculate the state\n     * @param eventLimit (Optional) Limits the number of returned upcoming events.\n     */\n    static getState(resolved, time, eventLimit) {\n        return (0, state_1.getState)(resolved, time, eventLimit);\n    }\n}\nexports.Resolver = Resolver;\nfunction resolveTimelineObj(resolvedTimeline, obj) {\n    if (obj.resolved.resolved)\n        return;\n    if (obj.resolved.resolving)\n        throw new Error(`Circular dependency when trying to resolve \"${obj.id}\"`);\n    obj.resolved.resolving = true;\n    resolvedTimeline.statistics.resolvingCount++;\n    let instances = [];\n    let directReferences = [];\n    const enables = _.isArray(obj.enable) ? obj.enable : [obj.enable];\n    for (let i = 0; i < enables.length; i++) {\n        const enable = enables[i];\n        let newInstances = [];\n        const repeatingExpr = enable.repeating !== undefined ? (0, expression_1.interpretExpression)(enable.repeating) : null;\n        const lookedRepeating = lookupExpression(resolvedTimeline, obj, repeatingExpr, 'duration');\n        const lookedupRepeating = lookedRepeating.instances;\n        directReferences = directReferences.concat(lookedRepeating.allReferences);\n        if (_.isArray(lookedupRepeating)) {\n            throw new Error(`lookupExpression should never return an array for .duration lookup`); // perhaps tmp? maybe revisit this at some point\n        }\n        let start = enable.while !== undefined ? enable.while : enable.start !== undefined ? enable.start : '';\n        if (enable.while + '' === '1') {\n            start = 'true';\n        }\n        else if (enable.while + '' === '0') {\n            start = 'false';\n        }\n        const startExpr = (0, expression_1.simplifyExpression)(start);\n        let parentInstances = null;\n        let hasParent = false;\n        let startRefersToParent = false;\n        if (obj.resolved.parentId) {\n            hasParent = true;\n            const lookup = lookupExpression(resolvedTimeline, obj, (0, expression_1.interpretExpression)(`#${obj.resolved.parentId}`), 'start');\n            parentInstances = lookup.instances; // a start-reference will always return an array, or null\n            directReferences = directReferences.concat(lookup.allReferences);\n            if ((0, lib_1.isConstant)(startExpr)) {\n                // Only use parent if the expression resolves to a number (ie doesn't contain any references)\n                startRefersToParent = true;\n            }\n        }\n        const lookupStart = lookupExpression(resolvedTimeline, obj, startExpr, 'start');\n        let lookedupStarts = lookupStart.instances;\n        directReferences = directReferences.concat(lookupStart.allReferences);\n        if (startRefersToParent) {\n            lookedupStarts = (0, lib_1.applyParentInstances)(parentInstances, lookedupStarts);\n        }\n        if (enable.while) {\n            if (_.isArray(lookedupStarts)) {\n                newInstances = lookedupStarts;\n            }\n            else if (lookedupStarts !== null) {\n                newInstances = [\n                    {\n                        id: (0, lib_1.getId)(),\n                        start: lookedupStarts.value,\n                        end: null,\n                        references: lookedupStarts.references,\n                    },\n                ];\n            }\n        }\n        else {\n            const events = [];\n            let iStart = 0;\n            let iEnd = 0;\n            if (_.isArray(lookedupStarts)) {\n                for (let i = 0; i < lookedupStarts.length; i++) {\n                    const instance = lookedupStarts[i];\n                    events.push({\n                        time: instance.start,\n                        value: true,\n                        data: { instance: instance, id: obj.id + '_' + iStart++ },\n                        references: instance.references,\n                    });\n                }\n            }\n            else if (lookedupStarts !== null) {\n                events.push({\n                    time: lookedupStarts.value,\n                    value: true,\n                    data: {\n                        instance: {\n                            id: (0, lib_1.getId)(),\n                            start: lookedupStarts.value,\n                            end: null,\n                            references: lookedupStarts.references,\n                        },\n                        id: obj.id + '_' + iStart++,\n                    },\n                    references: lookedupStarts.references,\n                });\n            }\n            if (enable.end !== undefined) {\n                const endExpr = (0, expression_1.interpretExpression)(enable.end);\n                let endRefersToParent = false;\n                if (obj.resolved.parentId) {\n                    if ((0, lib_1.isConstant)(endExpr)) {\n                        // Only use parent if the expression resolves to a number (ie doesn't contain any references)\n                        endRefersToParent = true;\n                    }\n                }\n                // lookedupEnds will contain an inverted list of instances. Therefore .start means an end\n                const lookupEnd = endExpr ? lookupExpression(resolvedTimeline, obj, endExpr, 'end') : null;\n                let lookedupEnds = lookupEnd ? lookupEnd.instances : null;\n                if (lookupEnd)\n                    directReferences = directReferences.concat(lookupEnd.allReferences);\n                if (endRefersToParent) {\n                    lookedupEnds = (0, lib_1.applyParentInstances)(parentInstances, lookedupEnds);\n                }\n                if (_.isArray(lookedupEnds)) {\n                    for (let i = 0; i < lookedupEnds.length; i++) {\n                        const instance = lookedupEnds[i];\n                        events.push({\n                            time: instance.start,\n                            value: false,\n                            data: { instance: instance, id: obj.id + '_' + iEnd++ },\n                            references: instance.references,\n                        });\n                    }\n                }\n                else if (lookedupEnds !== null) {\n                    events.push({\n                        time: lookedupEnds.value,\n                        value: false,\n                        data: {\n                            instance: {\n                                id: (0, lib_1.getId)(),\n                                start: lookedupEnds.value,\n                                end: null,\n                                references: lookedupEnds.references,\n                            },\n                            id: obj.id + '_' + iEnd++,\n                        },\n                        references: lookedupEnds.references,\n                    });\n                }\n            }\n            else if (enable.duration !== undefined) {\n                const durationExpr = (0, expression_1.interpretExpression)(enable.duration);\n                const lookupDuration = lookupExpression(resolvedTimeline, obj, durationExpr, 'duration');\n                let lookedupDuration = lookupDuration.instances;\n                directReferences = directReferences.concat(lookupDuration.allReferences);\n                if (_.isArray(lookedupDuration) && lookedupDuration.length === 1) {\n                    lookedupDuration = {\n                        value: lookedupDuration[0].start,\n                        references: lookedupDuration[0].references,\n                    };\n                }\n                if (_.isArray(lookedupDuration) && !lookedupDuration.length)\n                    lookedupDuration = null;\n                if (_.isArray(lookedupDuration)) {\n                    throw new Error(`lookupExpression should never return an array for .duration lookup`); // perhaps tmp? maybe revisit this at some point\n                }\n                else if (lookedupDuration !== null) {\n                    if (lookedupRepeating !== null && lookedupDuration.value > lookedupRepeating.value)\n                        lookedupDuration.value = lookedupRepeating.value;\n                    const tmpLookedupDuration = lookedupDuration; // cast type\n                    for (let i = 0; i < events.length; i++) {\n                        const e = events[i];\n                        if (e.value) {\n                            const time = e.time + tmpLookedupDuration.value;\n                            const references = (0, lib_1.joinReferences)(e.references, tmpLookedupDuration.references);\n                            events.push({\n                                time: time,\n                                value: false,\n                                data: {\n                                    id: e.data.id,\n                                    instance: {\n                                        id: e.data.instance.id,\n                                        start: time,\n                                        end: null,\n                                        references: references,\n                                    },\n                                },\n                                references: references,\n                            });\n                        }\n                    }\n                }\n            }\n            newInstances = (0, lib_1.convertEventsToInstances)(events, false);\n        }\n        if (hasParent) {\n            // figure out what parent-instance the instances are tied to, and cap them\n            const cappedInstances = [];\n            for (let i = 0; i < newInstances.length; i++) {\n                const instance = newInstances[i];\n                if (parentInstances) {\n                    const referredParentInstance = _.find(parentInstances, (parentInstance) => {\n                        return instance.references.indexOf(parentInstance.id) !== -1;\n                    });\n                    if (referredParentInstance) {\n                        // If the child refers to its parent, there should be one specific instance to cap into\n                        const cappedInstance = (0, lib_1.capInstances)([instance], [referredParentInstance])[0];\n                        if (cappedInstance) {\n                            if (!cappedInstance.caps)\n                                cappedInstance.caps = [];\n                            cappedInstance.caps.push({\n                                id: referredParentInstance.id,\n                                start: referredParentInstance.start,\n                                end: referredParentInstance.end,\n                            });\n                            cappedInstances.push(cappedInstance);\n                        }\n                    }\n                    else {\n                        // If the child doesn't refer to its parent, it should be capped within all of its parent instances\n                        for (let i = 0; i < parentInstances.length; i++) {\n                            const parentInstance = parentInstances[i];\n                            const cappedInstance = (0, lib_1.capInstances)([instance], [parentInstance])[0];\n                            if (cappedInstance) {\n                                if (parentInstance) {\n                                    if (!cappedInstance.caps)\n                                        cappedInstance.caps = [];\n                                    cappedInstance.caps.push({\n                                        id: parentInstance.id,\n                                        start: parentInstance.start,\n                                        end: parentInstance.end,\n                                    });\n                                }\n                                cappedInstances.push(cappedInstance);\n                            }\n                        }\n                    }\n                }\n            }\n            newInstances = cappedInstances;\n        }\n        newInstances = (0, lib_1.applyRepeatingInstances)(newInstances, lookedupRepeating, resolvedTimeline.options);\n        instances = instances.concat(newInstances);\n    }\n    // Make sure the instance ids are unique:\n    const ids = {};\n    for (const instance of instances) {\n        if (ids[instance.id]) {\n            instance.id = `${instance.id}_${(0, lib_1.getId)()}`;\n        }\n        ids[instance.id] = true;\n    }\n    if (obj.seamless && instances.length > 1) {\n        instances = (0, lib_1.cleanInstances)(instances, true, false);\n    }\n    obj.resolved.resolved = true;\n    obj.resolved.resolving = false;\n    obj.resolved.instances = instances;\n    obj.resolved.directReferences = directReferences;\n    updateStatistics(resolvedTimeline, obj);\n}\nexports.resolveTimelineObj = resolveTimelineObj;\nfunction updateStatistics(resolvedTimeline, obj) {\n    if (obj.resolved.instances.length) {\n        resolvedTimeline.statistics.resolvedInstanceCount += obj.resolved.instances.length;\n        resolvedTimeline.statistics.resolvedCount += 1;\n        if (obj.isGroup) {\n            resolvedTimeline.statistics.resolvedGroupCount += 1;\n        }\n        if (obj.resolved.isKeyframe) {\n            resolvedTimeline.statistics.resolvedKeyframeCount += 1;\n        }\n        else {\n            resolvedTimeline.statistics.resolvedObjectCount += 1;\n        }\n    }\n    else {\n        resolvedTimeline.statistics.unresolvedCount += 1;\n    }\n}\n/** Invalidate all changed objects, and recursively invalidate all objects that reference those objects */\nfunction invalidateObjectsWithReference(handledReferences, reference, affectReferenceMap, validObjects) {\n    if (handledReferences[reference])\n        return; // to avoid infinite loops\n    handledReferences[reference] = true;\n    if (reference[0] === '#') {\n        // an id\n        const objId = reference.slice(1);\n        if (validObjects[objId]) {\n            delete validObjects[objId];\n        }\n    }\n    // Invalidate all objects that depend on any of the references that this reference affects:\n    const affectedReferences = affectReferenceMap[reference];\n    if (affectedReferences) {\n        for (let i = 0; i < affectedReferences.length; i++) {\n            const referencingReference = affectedReferences[i];\n            invalidateObjectsWithReference(handledReferences, referencingReference, affectReferenceMap, validObjects);\n        }\n    }\n}\n/**\n * Look up a reference on the timeline\n * Return values:\n * Array<TimelineObjectInstance>: Instances on the timeline where the reference expression is true\n * ValueWithReference: A singular value which can be combined arithmetically with Instances\n * null: Means \"something is invalid\", an null-value will always return null when combined with other values\n *\n * @param resolvedTimeline\n * @param obj\n * @param expr\n * @param context\n */\nfunction lookupExpression(resolvedTimeline, obj, expr, context) {\n    if (expr === null)\n        return { instances: null, allReferences: [] };\n    if (_.isString(expr) && (0, lib_1.isNumeric)(expr)) {\n        return {\n            instances: {\n                value: parseFloat(expr),\n                references: [],\n            },\n            allReferences: [],\n        };\n    }\n    else if (_.isNumber(expr)) {\n        return {\n            instances: {\n                value: expr,\n                references: [],\n            },\n            allReferences: [],\n        };\n    }\n    else if (_.isString(expr)) {\n        expr = expr.trim();\n        if ((0, lib_1.isConstant)(expr)) {\n            if (expr.match(/^true$/i)) {\n                return {\n                    instances: {\n                        value: 0,\n                        references: [],\n                    },\n                    allReferences: [],\n                };\n            }\n            else if (expr.match(/^false$/i)) {\n                return {\n                    instances: [],\n                    allReferences: [],\n                };\n            }\n        }\n        // Look up string\n        let invert = false;\n        let ignoreFirstIfZero = false;\n        let referencedObjs = [];\n        let ref = context;\n        let rest = '';\n        let objIdsToReference = [];\n        const allReferences = [];\n        let referenceIsOk = false;\n        // Match id, example: \"#objectId.start\"\n        const m = expr.match(/^\\W*#([^.]+)(.*)/);\n        if (m) {\n            const id = m[1];\n            rest = m[2];\n            referenceIsOk = true;\n            objIdsToReference = [id];\n            allReferences.push('#' + id);\n        }\n        else {\n            // Match class, example: \".className.start\"\n            const m = expr.match(/^\\W*\\.([^.]+)(.*)/);\n            if (m) {\n                const className = m[1];\n                rest = m[2];\n                referenceIsOk = true;\n                objIdsToReference = resolvedTimeline.classes[className] || [];\n                allReferences.push('.' + className);\n            }\n            else {\n                // Match layer, example: \"$layer\"\n                const m = expr.match(/^\\W*\\$([^.]+)(.*)/);\n                if (m) {\n                    const layer = m[1];\n                    rest = m[2];\n                    referenceIsOk = true;\n                    objIdsToReference = resolvedTimeline.layers[layer] || [];\n                    allReferences.push('$' + layer);\n                }\n            }\n        }\n        for (let i = 0; i < objIdsToReference.length; i++) {\n            const refObjId = objIdsToReference[i];\n            if (refObjId !== obj.id) {\n                const refObj = resolvedTimeline.objects[refObjId];\n                if (refObj) {\n                    referencedObjs.push(refObj);\n                }\n            }\n            else {\n                // Looks like the object is referencing itself!\n                if (obj.resolved.resolving) {\n                    obj.resolved.isSelfReferencing = true;\n                }\n            }\n        }\n        if (!referenceIsOk) {\n            return { instances: null, allReferences: [] };\n        }\n        if (obj.resolved.isSelfReferencing) {\n            // Exclude any self-referencing objects:\n            referencedObjs = _.filter(referencedObjs, (refObj) => {\n                return !refObj.resolved.isSelfReferencing;\n            });\n        }\n        if (referencedObjs.length) {\n            if (rest.match(/start/))\n                ref = 'start';\n            if (rest.match(/end/))\n                ref = 'end';\n            if (rest.match(/duration/))\n                ref = 'duration';\n            if (ref === 'duration') {\n                // Duration refers to the first object on the resolved timeline\n                const instanceDurations = [];\n                for (let i = 0; i < referencedObjs.length; i++) {\n                    const referencedObj = referencedObjs[i];\n                    resolveTimelineObj(resolvedTimeline, referencedObj);\n                    if (referencedObj.resolved.resolved) {\n                        if (obj.resolved.isSelfReferencing && referencedObj.resolved.isSelfReferencing) {\n                            // If the querying object is self-referencing, exclude any other self-referencing objects,\n                            // ignore the object\n                        }\n                        else {\n                            const firstInstance = _.first(referencedObj.resolved.instances);\n                            if (firstInstance) {\n                                const duration = firstInstance.end !== null ? firstInstance.end - firstInstance.start : null;\n                                if (duration !== null) {\n                                    instanceDurations.push({\n                                        value: duration,\n                                        references: (0, lib_1.joinReferences)(referencedObj.id, firstInstance.references),\n                                    });\n                                }\n                            }\n                        }\n                    }\n                }\n                let firstDuration = null;\n                for (let i = 0; i < instanceDurations.length; i++) {\n                    const d = instanceDurations[i];\n                    if (firstDuration === null || d.value < firstDuration.value)\n                        firstDuration = d;\n                }\n                return { instances: firstDuration, allReferences: allReferences };\n            }\n            else {\n                let returnInstances = [];\n                if (ref === 'start') {\n                    // nothing\n                }\n                else if (ref === 'end') {\n                    invert = !invert;\n                    ignoreFirstIfZero = true;\n                }\n                else\n                    throw Error(`Unknown ref: \"${ref}\"`);\n                for (let i = 0; i < referencedObjs.length; i++) {\n                    const referencedObj = referencedObjs[i];\n                    resolveTimelineObj(resolvedTimeline, referencedObj);\n                    if (referencedObj.resolved.resolved) {\n                        if (obj.resolved.isSelfReferencing && referencedObj.resolved.isSelfReferencing) {\n                            // If the querying object is self-referencing, exclude any other self-referencing objects,\n                            // ignore the object\n                        }\n                        else {\n                            returnInstances = returnInstances.concat(referencedObj.resolved.instances);\n                        }\n                    }\n                }\n                if (returnInstances.length) {\n                    if (invert) {\n                        returnInstances = (0, lib_1.invertInstances)(returnInstances);\n                    }\n                    else {\n                        returnInstances = (0, lib_1.cleanInstances)(returnInstances, true, true);\n                    }\n                    if (ignoreFirstIfZero) {\n                        const first = _.first(returnInstances);\n                        if (first && first.start === 0) {\n                            returnInstances.splice(0, 1);\n                        }\n                    }\n                    return { instances: returnInstances, allReferences: allReferences };\n                }\n                else {\n                    return { instances: [], allReferences: allReferences };\n                }\n            }\n        }\n        else {\n            return { instances: [], allReferences: allReferences };\n        }\n    }\n    else {\n        if (expr) {\n            const l = lookupExpression(resolvedTimeline, obj, expr.l, context);\n            const r = lookupExpression(resolvedTimeline, obj, expr.r, context);\n            const lookupExpr = {\n                l: l.instances,\n                o: expr.o,\n                r: r.instances,\n            };\n            const allReferences = l.allReferences.concat(r.allReferences);\n            if (lookupExpr.o === '!') {\n                // Discard l, invert and return r:\n                if (lookupExpr.r && _.isArray(lookupExpr.r)) {\n                    return {\n                        instances: (0, lib_1.invertInstances)(lookupExpr.r),\n                        allReferences: allReferences,\n                    };\n                }\n                else {\n                    // We can't invert a value\n                    return {\n                        instances: lookupExpr.r,\n                        allReferences: allReferences,\n                    };\n                }\n            }\n            else {\n                if (_.isNull(lookupExpr.l) || _.isNull(lookupExpr.r)) {\n                    return { instances: null, allReferences: allReferences };\n                }\n                if (lookupExpr.o === '&' || lookupExpr.o === '|') {\n                    let events = [];\n                    const addEvents = (instances, left) => {\n                        for (let i = 0; i < instances.length; i++) {\n                            const instance = instances[i];\n                            if (instance.start !== instance.end) {\n                                // event doesn't actually exist...\n                                events.push({\n                                    left: left,\n                                    time: instance.start,\n                                    value: true,\n                                    references: [],\n                                    data: true,\n                                    instance: instance,\n                                });\n                                if (instance.end !== null) {\n                                    events.push({\n                                        left: left,\n                                        time: instance.end,\n                                        value: false,\n                                        references: [],\n                                        data: false,\n                                        instance: instance,\n                                    });\n                                }\n                            }\n                        }\n                    };\n                    if (_.isArray(lookupExpr.l))\n                        addEvents(lookupExpr.l, true);\n                    if (_.isArray(lookupExpr.r))\n                        addEvents(lookupExpr.r, false);\n                    events = (0, lib_1.sortEvents)(events);\n                    const calcResult = lookupExpr.o === '&'\n                        ? (left, right) => !!(left && right)\n                        : lookupExpr.o === '|'\n                            ? (left, right) => !!(left || right)\n                            : () => {\n                                return false;\n                            };\n                    let leftValue = (0, lib_1.isReference)(lookupExpr.l) ? !!lookupExpr.l.value : false;\n                    let rightValue = (0, lib_1.isReference)(lookupExpr.r) ? !!lookupExpr.r.value : false;\n                    let leftInstance = null;\n                    let rightInstance = null;\n                    let resultValue = calcResult(leftValue, rightValue);\n                    const instances = [];\n                    const updateInstance = (time, value, references, caps) => {\n                        if (value) {\n                            instances.push({\n                                id: (0, lib_1.getId)(),\n                                start: time,\n                                end: null,\n                                references: references,\n                                caps: caps,\n                            });\n                        }\n                        else {\n                            const last = _.last(instances);\n                            if (last) {\n                                last.end = time;\n                                // don't update reference on end\n                            }\n                        }\n                    };\n                    updateInstance(0, resultValue, (0, lib_1.joinReferences)((0, lib_1.isReference)(lookupExpr.l) ? lookupExpr.l.references : [], (0, lib_1.isReference)(lookupExpr.r) ? lookupExpr.r.references : []), []);\n                    for (let i = 0; i < events.length; i++) {\n                        const e = events[i];\n                        const next = events[i + 1];\n                        if (e.left) {\n                            leftValue = e.value;\n                            leftInstance = e.instance;\n                        }\n                        else {\n                            rightValue = e.value;\n                            rightInstance = e.instance;\n                        }\n                        if (!next || next.time !== e.time) {\n                            const newResultValue = calcResult(leftValue, rightValue);\n                            const resultCaps = (leftInstance ? leftInstance.caps || [] : []).concat(rightInstance ? rightInstance.caps || [] : []);\n                            if (newResultValue !== resultValue) {\n                                updateInstance(e.time, newResultValue, (0, lib_1.joinReferences)(leftInstance ? leftInstance.references : [], rightInstance ? rightInstance.references : []), resultCaps);\n                                resultValue = newResultValue;\n                            }\n                        }\n                    }\n                    return { instances: instances, allReferences: allReferences };\n                }\n                else {\n                    const operateInner = lookupExpr.o === '+'\n                        ? (a, b) => {\n                            return {\n                                value: a.value + b.value,\n                                references: (0, lib_1.joinReferences)(a.references, b.references),\n                            };\n                        }\n                        : lookupExpr.o === '-'\n                            ? (a, b) => {\n                                return {\n                                    value: a.value - b.value,\n                                    references: (0, lib_1.joinReferences)(a.references, b.references),\n                                };\n                            }\n                            : lookupExpr.o === '*'\n                                ? (a, b) => {\n                                    return {\n                                        value: a.value * b.value,\n                                        references: (0, lib_1.joinReferences)(a.references, b.references),\n                                    };\n                                }\n                                : lookupExpr.o === '/'\n                                    ? (a, b) => {\n                                        return {\n                                            value: a.value / b.value,\n                                            references: (0, lib_1.joinReferences)(a.references, b.references),\n                                        };\n                                    }\n                                    : lookupExpr.o === '%'\n                                        ? (a, b) => {\n                                            return {\n                                                value: a.value % b.value,\n                                                references: (0, lib_1.joinReferences)(a.references, b.references),\n                                            };\n                                        }\n                                        : () => null;\n                    const operate = (a, b) => {\n                        if (a === null || b === null)\n                            return null;\n                        return operateInner(a, b);\n                    };\n                    const result = (0, lib_1.operateOnArrays)(lookupExpr.l, lookupExpr.r, operate);\n                    return { instances: result, allReferences: allReferences };\n                }\n            }\n        }\n    }\n    return { instances: null, allReferences: [] };\n}\nexports.lookupExpression = lookupExpression;\n//# sourceMappingURL=resolver.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.applyKeyframeContent = exports.resolveStates = exports.getState = void 0;\nconst _ = require(\"underscore\");\nconst common_1 = require(\"./common\");\nconst enums_1 = require(\"../api/enums\");\nconst lib_1 = require(\"../lib\");\nfunction getState(resolved, time, eventLimit = 0) {\n    const resolvedStates = isResolvedStates(resolved) ? resolved : resolveStates(resolved);\n    const state = {\n        time: time,\n        layers: {},\n        nextEvents: _.filter(resolvedStates.nextEvents, (e) => e.time > time),\n    };\n    if (eventLimit)\n        state.nextEvents = state.nextEvents.slice(0, eventLimit);\n    const layerKeys = Object.keys(resolvedStates.layers);\n    for (let i = 0; i < layerKeys.length; i++) {\n        const layer = layerKeys[i];\n        const o = getStateAtTime(resolvedStates.state, layer, time);\n        if (o)\n            state.layers[layer] = o;\n    }\n    return state;\n}\nexports.getState = getState;\nfunction resolveStates(resolved, cache) {\n    var _a, _b, _c, _d, _e, _f, _g, _h;\n    const resolvedStates = {\n        options: resolved.options,\n        statistics: resolved.statistics,\n        // These will be re-created during the state-resolving:\n        objects: {},\n        classes: {},\n        layers: {},\n        state: {},\n        nextEvents: [],\n    };\n    if (cache && resolved.statistics.resolvingCount === 0 && cache.resolvedStates) {\n        // Nothing has changed since last time, just return the states right away:\n        return cache.resolvedStates;\n    }\n    const resolvedObjects = _.values(resolved.objects);\n    // Sort to make sure parent groups are evaluated before their children:\n    resolvedObjects.sort((a, b) => {\n        if ((a.resolved.levelDeep || 0) > (b.resolved.levelDeep || 0))\n            return 1;\n        if ((a.resolved.levelDeep || 0) < (b.resolved.levelDeep || 0))\n            return -1;\n        if (a.id > b.id)\n            return 1;\n        if (a.id < b.id)\n            return -1;\n        return 0;\n    });\n    // Step 1: Collect all points-of-interest (which points in time we want to evaluate)\n    // and which instances that are interesting\n    const pointsInTime = {};\n    const addPointInTime = (time, checkId, order, obj, instance) => {\n        // Note on order: Ending events come before starting events\n        if (!pointsInTime[time + ''])\n            pointsInTime[time + ''] = [];\n        pointsInTime[time + ''].push({ obj, instance, checkId, order });\n    };\n    for (const obj of resolvedObjects) {\n        if (!obj.disabled && obj.resolved.resolved) {\n            if (!obj.resolved.isKeyframe) {\n                const parentTimes = getTimesFromParents(resolved, obj);\n                if (obj.layer) {\n                    // if layer is empty, don't put in state\n                    for (const instance of obj.resolved.instances) {\n                        const timeEvents = [];\n                        timeEvents.push({ time: instance.start, enable: true });\n                        if (instance.end)\n                            timeEvents.push({ time: instance.end, enable: false });\n                        // Also include times from parents, as they could affect the state of this instance:\n                        for (let i = 0; i < parentTimes.length; i++) {\n                            const parentTime = parentTimes[i];\n                            if (parentTime &&\n                                parentTime.time > (instance.start || 0) &&\n                                parentTime.time < ((_a = instance.end) !== null && _a !== void 0 ? _a : Infinity)) {\n                                timeEvents.push(parentTime);\n                            }\n                        }\n                        // Save a reference to this instance on all points in time that could affect it:\n                        for (let i = 0; i < timeEvents.length; i++) {\n                            const timeEvent = timeEvents[i];\n                            if (timeEvent.enable) {\n                                addPointInTime(timeEvent.time, 'start', 1, obj, instance);\n                            }\n                            else {\n                                addPointInTime(timeEvent.time, 'end', 0, obj, instance);\n                            }\n                        }\n                    }\n                }\n            }\n            else if (obj.resolved.isKeyframe && obj.resolved.parentId) {\n                const keyframe = obj;\n                // Also add keyframes to pointsInTime:\n                for (const instance of keyframe.resolved.instances) {\n                    // Keyframe start time\n                    addPointInTime(instance.start, 'start', 1, keyframe, instance);\n                    // Keyframe end time\n                    if (instance.end !== null) {\n                        addPointInTime(instance.end, 'end', 0, keyframe, instance);\n                    }\n                }\n            }\n        }\n    }\n    // Step 2: Resolve the state for the points-of-interest\n    // This is done by sweeping the points-of-interest chronologically,\n    // determining the state for every point in time by adding & removing objects from aspiringInstances\n    // Then sorting it to determine who takes precedence\n    const eventObjectTimes = {};\n    const currentState = {};\n    const activeObjIds = {};\n    const activeKeyframes = {};\n    const activeKeyframesChecked = {};\n    /** The objects in aspiringInstances  */\n    const aspiringInstances = {};\n    const keyframeEvents = [];\n    const times = Object.keys(pointsInTime)\n        .map((time) => parseFloat(time))\n        // Sort chronologically:\n        .sort((a, b) => a - b);\n    // Iterate through all points-of-interest times:\n    for (let i = 0; i < times.length; i++) {\n        const time = times[i];\n        const instancesToCheck = pointsInTime[time];\n        const checkedObjectsThisTime = {};\n        instancesToCheck.sort((a, b) => {\n            if (a.obj.resolved && b.obj.resolved) {\n                // Keyframes comes first:\n                if (a.obj.resolved.isKeyframe && !b.obj.resolved.isKeyframe)\n                    return -1;\n                if (!a.obj.resolved.isKeyframe && b.obj.resolved.isKeyframe)\n                    return 1;\n                if (a.order > b.order)\n                    return 1;\n                if (a.order < b.order)\n                    return -1;\n                // Deeper objects (children in groups) comes later, we want to check the parent groups first:\n                if ((a.obj.resolved.levelDeep || 0) > (b.obj.resolved.levelDeep || 0))\n                    return 1;\n                if ((a.obj.resolved.levelDeep || 0) < (b.obj.resolved.levelDeep || 0))\n                    return -1;\n            }\n            return 0;\n        });\n        for (let j = 0; j < instancesToCheck.length; j++) {\n            const o = instancesToCheck[j];\n            const obj = o.obj;\n            const instance = o.instance;\n            let toBeEnabled = (instance.start || 0) <= time && ((_b = instance.end) !== null && _b !== void 0 ? _b : Infinity) > time;\n            const layer = obj.layer + '';\n            const identifier = obj.id + '_' + instance.id + '_' + o.checkId;\n            if (!checkedObjectsThisTime[identifier]) {\n                // Only check each object and event-type once for every point in time\n                checkedObjectsThisTime[identifier] = true;\n                if (!obj.resolved.isKeyframe) {\n                    // If object has a parent, only set if parent is on a layer (if layer is set for parent)\n                    if (toBeEnabled && obj.resolved.parentId) {\n                        const parentObj = obj.resolved.parentId ? resolved.objects[obj.resolved.parentId] : null;\n                        toBeEnabled = !!(parentObj && (!parentObj.layer || activeObjIds[parentObj.id]));\n                    }\n                    if (!aspiringInstances[obj.layer])\n                        aspiringInstances[obj.layer] = [];\n                    if (toBeEnabled) {\n                        // The instance wants to be enabled (is starting)\n                        // Add to aspiringInstances:\n                        aspiringInstances[obj.layer].push({ obj, instance });\n                    }\n                    else {\n                        // The instance doesn't want to be enabled (is ending)\n                        // Remove from aspiringInstances:\n                        aspiringInstances[layer] = _.reject(aspiringInstances[layer] || [], (o) => o.obj.id === obj.id);\n                    }\n                    // Evaluate the layer to determine who has the throne:\n                    aspiringInstances[layer].sort((a, b) => {\n                        // Determine who takes precedence:\n                        // First, sort using priority\n                        if ((a.obj.priority || 0) < (b.obj.priority || 0))\n                            return 1;\n                        if ((a.obj.priority || 0) > (b.obj.priority || 0))\n                            return -1;\n                        // Then, sort using the start time\n                        if ((a.instance.start || 0) < (b.instance.start || 0))\n                            return 1;\n                        if ((a.instance.start || 0) > (b.instance.start || 0))\n                            return -1;\n                        // Last resort: sort using id:\n                        if (a.obj.id > b.obj.id)\n                            return 1;\n                        if (a.obj.id < b.obj.id)\n                            return -1;\n                        return 0;\n                    });\n                    // Now, the one on top has the throne\n                    // Update current state:\n                    const currentOnTopOfLayer = aspiringInstances[layer][0];\n                    const prevObj = currentState[layer];\n                    const replaceOldObj = currentOnTopOfLayer &&\n                        (!prevObj ||\n                            prevObj.id !== currentOnTopOfLayer.obj.id ||\n                            prevObj.instance.id !== currentOnTopOfLayer.instance.id);\n                    const removeOldObj = !currentOnTopOfLayer && prevObj;\n                    if (replaceOldObj || removeOldObj) {\n                        if (prevObj) {\n                            // Cap the old instance, so it'll end at this point in time:\n                            (0, lib_1.setInstanceEndTime)(prevObj.instance, time);\n                            // Update activeObjIds:\n                            delete activeObjIds[prevObj.id];\n                            // Add to nextEvents:\n                            resolvedStates.nextEvents.push({\n                                type: enums_1.EventType.END,\n                                time: time,\n                                objId: prevObj.id,\n                            });\n                            eventObjectTimes[instance.end + ''] = enums_1.EventType.END;\n                        }\n                    }\n                    let changed = false;\n                    if (replaceOldObj) {\n                        // Set the new object to State\n                        // Construct a new object clone:\n                        let newObj;\n                        if (resolvedStates.objects[currentOnTopOfLayer.obj.id]) {\n                            // Use the already existing one\n                            newObj = resolvedStates.objects[currentOnTopOfLayer.obj.id];\n                        }\n                        else {\n                            newObj = _.clone(currentOnTopOfLayer.obj);\n                            newObj.content = JSON.parse(JSON.stringify(newObj.content));\n                            newObj.resolved = {\n                                ...(newObj.resolved || {}),\n                                instances: [],\n                            };\n                            (0, common_1.addObjectToResolvedTimeline)(resolvedStates, newObj);\n                        }\n                        const newInstance = {\n                            ...currentOnTopOfLayer.instance,\n                            // We're setting new start & end times so they match up with the state:\n                            start: time,\n                            end: null,\n                            fromInstanceId: currentOnTopOfLayer.instance.id,\n                            originalEnd: currentOnTopOfLayer.instance.originalEnd !== undefined\n                                ? currentOnTopOfLayer.instance.originalEnd\n                                : currentOnTopOfLayer.instance.end,\n                            originalStart: currentOnTopOfLayer.instance.originalStart !== undefined\n                                ? currentOnTopOfLayer.instance.originalStart\n                                : currentOnTopOfLayer.instance.start,\n                        };\n                        // Make the instance id unique:\n                        for (let i = 0; i < newObj.resolved.instances.length; i++) {\n                            if (newObj.resolved.instances[i].id === newInstance.id) {\n                                newInstance.id = newInstance.id + '_$' + newObj.resolved.instances.length;\n                            }\n                        }\n                        newObj.resolved.instances.push(newInstance);\n                        const newObjInstance = {\n                            ...newObj,\n                            instance: newInstance,\n                        };\n                        // Save to current state:\n                        currentState[layer] = newObjInstance;\n                        // Update activeObjIds:\n                        activeObjIds[newObjInstance.id] = newObjInstance;\n                        // Add to nextEvents:\n                        resolvedStates.nextEvents.push({\n                            type: enums_1.EventType.START,\n                            time: newInstance.start,\n                            objId: obj.id,\n                        });\n                        eventObjectTimes[newInstance.start + ''] = enums_1.EventType.START;\n                        changed = true;\n                    }\n                    else if (removeOldObj) {\n                        // Remove from current state:\n                        delete currentState[layer];\n                        changed = true;\n                    }\n                    if (changed) {\n                        // Also make sure any children are updated:\n                        // Go through the object on hand, but also the one in the currentState\n                        const parentsToCheck = [];\n                        if (obj.isGroup)\n                            parentsToCheck.push(obj);\n                        if ((_c = currentState[layer]) === null || _c === void 0 ? void 0 : _c.isGroup)\n                            parentsToCheck.push(currentState[layer]);\n                        for (const parent of parentsToCheck) {\n                            if ((_d = parent.children) === null || _d === void 0 ? void 0 : _d.length) {\n                                for (const child0 of parent.children) {\n                                    const child = resolved.objects[child0.id];\n                                    for (const instance of child.resolved.instances) {\n                                        if (instance.start <= time && ((_e = instance.end) !== null && _e !== void 0 ? _e : Infinity) > time) {\n                                            // Add the child instance, because that might be affected:\n                                            addPointInTime(time, 'child', 99, child, instance);\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n                else {\n                    // Is a keyframe\n                    const keyframe = obj;\n                    // Add keyframe to resolvedStates.objects:\n                    resolvedStates.objects[keyframe.id] = keyframe;\n                    const toBeEnabled = (instance.start || 0) <= time && ((_f = instance.end) !== null && _f !== void 0 ? _f : Infinity) > time;\n                    if (toBeEnabled) {\n                        const newObjInstance = {\n                            ...keyframe,\n                            instance: instance,\n                        };\n                        activeKeyframes[keyframe.id] = newObjInstance;\n                    }\n                    else {\n                        delete activeKeyframes[keyframe.id];\n                        delete activeKeyframesChecked[keyframe.id];\n                    }\n                }\n            }\n        }\n        // Go through keyframes:\n        const activeKeyframesObjIds = Object.keys(activeKeyframes);\n        for (let i = 0; i < activeKeyframesObjIds.length; i++) {\n            const objId = activeKeyframesObjIds[i];\n            const objInstance = activeKeyframes[objId];\n            const keyframe = objInstance;\n            const instance = objInstance.instance;\n            // Check if the keyframe's parent is currently active?\n            if (keyframe.resolved.parentId) {\n                const parentObj = activeObjIds[keyframe.resolved.parentId];\n                if (parentObj && parentObj.layer) {\n                    // keyframe is on an active object\n                    const parentObjInstance = currentState[parentObj.layer];\n                    if (parentObjInstance) {\n                        if (!activeKeyframesChecked[objId]) {\n                            // hasn't started before\n                            activeKeyframesChecked[objId] = true;\n                            // Note: The keyframes are a little bit special, since their contents are applied to their parents.\n                            // That application is done in the getStateAtTime function.\n                            // Add keyframe to nextEvents:\n                            keyframeEvents.push({\n                                type: enums_1.EventType.KEYFRAME,\n                                time: instance.start,\n                                objId: keyframe.id,\n                            });\n                            // Cap end within parent\n                            let instanceEnd = Math.min((_g = instance.end) !== null && _g !== void 0 ? _g : Infinity, (_h = parentObjInstance.instance.end) !== null && _h !== void 0 ? _h : Infinity);\n                            if (instanceEnd === Infinity)\n                                instanceEnd = null;\n                            if (instanceEnd !== null) {\n                                keyframeEvents.push({\n                                    type: enums_1.EventType.KEYFRAME,\n                                    time: instanceEnd,\n                                    objId: keyframe.id,\n                                });\n                            }\n                        }\n                        continue;\n                    }\n                }\n            }\n            // else: the keyframe:s parent isn't active, remove/stop the keyframe then:\n            delete activeKeyframesChecked[objId];\n        }\n    }\n    // At this point, the instances of all objects (excluding keyframes) are properly calculated,\n    // taking into account priorities, clashes etc.\n    // Cap children inside their parents:\n    {\n        const allChildren = Object.values(resolvedStates.objects)\n            .filter((obj) => !!obj.resolved.parentId)\n            // Sort, so that the outermost are handled first:\n            .sort((a, b) => {\n            var _a, _b;\n            return ((_a = a.resolved.levelDeep) !== null && _a !== void 0 ? _a : 0) - ((_b = b.resolved.levelDeep) !== null && _b !== void 0 ? _b : 0);\n        });\n        for (const obj of allChildren) {\n            if (obj.resolved.parentId) {\n                const parent = resolvedStates.objects[obj.resolved.parentId];\n                if (parent) {\n                    obj.resolved.instances = (0, lib_1.cleanInstances)((0, lib_1.capInstances)(obj.resolved.instances, parent.resolved.instances), false, false);\n                }\n            }\n        }\n    }\n    // At this point, all instances of the objects should be properly calculated.\n    // Go through all instances of all objects to create temporary states of all layers and times:\n    {\n        const states = {};\n        for (const id of Object.keys(resolvedStates.objects)) {\n            const obj = resolvedStates.objects[id];\n            const layer = `${obj.layer}`;\n            if (!states[layer])\n                states[layer] = {};\n            const stateLayer = states[layer];\n            if (!obj.resolved.isKeyframe) {\n                for (const instance of obj.resolved.instances) {\n                    const startTime = instance.start + '';\n                    if (!stateLayer[startTime]) {\n                        stateLayer[startTime] = {\n                            startCount: 0,\n                            endCount: 0,\n                            objectInstance: null,\n                        };\n                    }\n                    const newObjInstance = {\n                        ...obj,\n                        instance: instance,\n                    };\n                    stateLayer[startTime].startCount++;\n                    stateLayer[startTime].objectInstance = newObjInstance;\n                    if (instance.end !== null) {\n                        const endTime = instance.end + '';\n                        if (!stateLayer[endTime]) {\n                            stateLayer[endTime] = {\n                                startCount: 0,\n                                endCount: 0,\n                                objectInstance: null,\n                            };\n                        }\n                        stateLayer[endTime].endCount++;\n                    }\n                }\n            }\n        }\n        // Go through the temporary states and apply the changes to the resolvedStates.state:\n        for (const layer of Object.keys(states)) {\n            let sum = 0;\n            const times = Object.keys(states[layer])\n                .map((time) => parseFloat(time))\n                // Sort chronologically:\n                .sort((a, b) => a - b);\n            for (let i = 0; i < times.length; i++) {\n                const time = times[i];\n                const s = states[layer][`${time}`];\n                sum += s.startCount;\n                sum -= s.endCount;\n                // Check for fatal bugs:\n                // If the sum is larger than one, more than one start was found at the same time, which should not be possible.\n                if (sum > 1)\n                    throw new Error(`Too many start events at ${layer} ${time}: ${sum}`);\n                // If the sum is less than zero, there have been more ends than starts, which should not be possible.\n                if (sum < 0)\n                    throw new Error(`Too many end events at ${layer} ${time}: ${sum}`);\n                // Apply the state:\n                if (!resolvedStates.state[layer])\n                    resolvedStates.state[layer] = {};\n                if (sum) {\n                    // This means that the object has started\n                    if (!s.objectInstance)\n                        throw new Error(`objectInstance not set, event though sum=${sum} at ${layer} ${time}`);\n                    resolvedStates.state[layer][time] = [s.objectInstance];\n                }\n                else {\n                    // This means that the object has ended\n                    resolvedStates.state[layer][time] = null;\n                }\n            }\n        }\n    }\n    // Cap keyframes inside their parents:\n    for (const id of Object.keys(resolvedStates.objects)) {\n        {\n            const keyframe = resolvedStates.objects[id];\n            if (keyframe.resolved.isKeyframe && keyframe.resolved.parentId) {\n                const parent = resolvedStates.objects[keyframe.resolved.parentId];\n                if (parent) {\n                    // Cap the keyframe instances within its parents instances:\n                    keyframe.resolved.instances = (0, lib_1.capInstances)(keyframe.resolved.instances, parent.resolved.instances);\n                    // Ensure sure the instances are in the state\n                    for (let i = 0; i < keyframe.resolved.instances.length; i++) {\n                        const instance = keyframe.resolved.instances[i];\n                        const keyframeInstance = {\n                            ...keyframe,\n                            instance: instance,\n                            isKeyframe: true,\n                            keyframeEndTime: instance.end,\n                        };\n                        // Add keyframe to the tracking state:\n                        addKeyframeAtTime(resolvedStates.state, parent.layer + '', instance.start, keyframeInstance);\n                    }\n                }\n            }\n        }\n        // Fix (merge) instances of seamless objects:\n        {\n            const obj = resolvedStates.objects[id];\n            if (obj.seamless && obj.resolved.instances.length > 1) {\n                obj.resolved.instances = (0, lib_1.cleanInstances)(obj.resolved.instances, true, false);\n            }\n        }\n    }\n    // At this point, ALL instances are properly calculated.\n    // Go through the keyframe events and add them to nextEvents:\n    for (let i = 0; i < keyframeEvents.length; i++) {\n        const keyframeEvent = keyframeEvents[i];\n        // tslint:disable-next-line\n        if (eventObjectTimes[keyframeEvent.time + ''] === undefined) {\n            // no need to put a keyframe event if there's already another event there\n            resolvedStates.nextEvents.push(keyframeEvent);\n            eventObjectTimes[keyframeEvent.time + ''] = enums_1.EventType.KEYFRAME;\n        }\n    }\n    resolvedStates.nextEvents.sort((a, b) => {\n        if (a.time > b.time)\n            return 1;\n        if (a.time < b.time)\n            return -1;\n        if (a.type > b.type)\n            return -1;\n        if (a.type < b.type)\n            return 1;\n        if (a.objId < b.objId)\n            return -1;\n        if (a.objId > b.objId)\n            return 1;\n        return 0;\n    });\n    if (cache) {\n        cache.resolvedStates = resolvedStates;\n    }\n    return resolvedStates;\n}\nexports.resolveStates = resolveStates;\nfunction applyKeyframeContent(parentContent, keyframeContent) {\n    for (const [attr, value] of Object.entries(keyframeContent)) {\n        if (_.isArray(value)) {\n            if (!_.isArray(parentContent[attr]))\n                parentContent[attr] = [];\n            applyKeyframeContent(parentContent[attr], value);\n            parentContent[attr].splice(value.length, 99999);\n        }\n        else if (_.isObject(value)) {\n            if (!_.isObject(parentContent[attr]) || _.isArray(parentContent[attr]))\n                parentContent[attr] = {};\n            applyKeyframeContent(parentContent[attr], value);\n        }\n        else {\n            parentContent[attr] = value;\n        }\n    }\n}\nexports.applyKeyframeContent = applyKeyframeContent;\nfunction getTimesFromParents(resolved, obj) {\n    let times = [];\n    const parentObj = obj.resolved.parentId ? resolved.objects[obj.resolved.parentId] : null;\n    if (parentObj && parentObj.resolved.resolved) {\n        for (const instance of parentObj.resolved.instances) {\n            times.push({ time: instance.start, enable: true });\n            if (instance.end)\n                times.push({ time: instance.end, enable: false });\n        }\n        times = times.concat(getTimesFromParents(resolved, parentObj));\n    }\n    return times;\n}\nfunction addKeyframeAtTime(states, layer, time, objInstanceKf) {\n    if (!states[layer])\n        states[layer] = {};\n    const inner = states[layer][time + ''];\n    if (!inner) {\n        states[layer][time + ''] = [objInstanceKf];\n    }\n    else {\n        inner.push(objInstanceKf);\n    }\n}\nfunction getStateAtTime(states, layer, requestTime) {\n    var _a;\n    const layerStates = states[layer] || {};\n    const times = Object.keys(layerStates)\n        .map((time) => parseFloat(time))\n        // Sort chronologically:\n        .sort((a, b) => {\n        return a - b;\n    });\n    let state = null;\n    let isCloned = false;\n    for (let i = 0; i < times.length; i++) {\n        const time = times[i];\n        if (time <= requestTime) {\n            const currentStateInstances = layerStates[time + ''];\n            if (currentStateInstances && currentStateInstances.length) {\n                const keyframes = [];\n                for (let i = 0; i < currentStateInstances.length; i++) {\n                    const currentState = currentStateInstances[i];\n                    if (currentState && currentState.isKeyframe) {\n                        keyframes.push(currentState);\n                    }\n                    else {\n                        state = currentState;\n                        isCloned = false;\n                    }\n                }\n                for (let i = 0; i < keyframes.length; i++) {\n                    const keyframe = keyframes[i];\n                    if (state && keyframe.resolved.parentId === state.id) {\n                        if (((_a = keyframe.keyframeEndTime) !== null && _a !== void 0 ? _a : Infinity) > requestTime) {\n                            if (!isCloned) {\n                                isCloned = true;\n                                state = {\n                                    ...state,\n                                    content: JSON.parse(JSON.stringify(state.content)),\n                                };\n                            }\n                            // Apply the keyframe on the state:\n                            applyKeyframeContent(state.content, keyframe.content);\n                        }\n                    }\n                }\n            }\n            else {\n                state = null;\n                isCloned = false;\n            }\n        }\n        else {\n            break;\n        }\n    }\n    return state;\n}\nfunction isResolvedStates(resolved) {\n    return !!(resolved && typeof resolved === 'object' && resolved.objects && resolved.state && resolved.nextEvents);\n}\n//# sourceMappingURL=state.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.validateKeyframe = exports.validateObject = exports.validateTimeline = void 0;\nconst _ = require(\"underscore\");\nfunction validateObject0(obj, strict, uniqueIds) {\n    if (!uniqueIds)\n        uniqueIds = {};\n    if (!obj)\n        throw new Error(`Object is undefined`);\n    if (typeof obj !== 'object')\n        throw new Error(`Object is not an object`);\n    if (!obj.id)\n        throw new Error(`Object missing \"id\" attribute`);\n    if (typeof obj.id !== 'string')\n        throw new Error(`Object \"id\" attribute is not a string: \"${obj.id}\"`);\n    if (uniqueIds[obj.id])\n        throw new Error(`Object id \"${obj.id}\" is not unique`);\n    uniqueIds[obj.id] = true;\n    if (obj.layer === undefined)\n        throw new Error(`Object \"${obj.id}\": \"layer\" attribute is undefined`);\n    if (!obj.content)\n        throw new Error(`Object \"${obj.id}\": \"content\" attribute must be set`);\n    if (!obj.enable)\n        throw new Error(`Object \"${obj.id}\": \"enable\" attribute must be set`);\n    const enables = _.isArray(obj.enable) ? obj.enable : [obj.enable];\n    for (let i = 0; i < enables.length; i++) {\n        const enable = enables[i];\n        if (enable.start !== undefined) {\n            if (strict && enable.while !== undefined)\n                throw new Error(`Object \"${obj.id}\": \"enable.start\" and \"enable.while\" cannot be combined`);\n            if (strict && enable.end !== undefined && enable.duration !== undefined)\n                throw new Error(`Object \"${obj.id}\": \"enable.end\" and \"enable.duration\" cannot be combined`);\n        }\n        else if (enable.while !== undefined) {\n            if (strict && enable.end !== undefined)\n                throw new Error(`Object \"${obj.id}\": \"enable.while\" and \"enable.end\" cannot be combined`);\n            if (strict && enable.duration !== undefined)\n                throw new Error(`Object \"${obj.id}\": \"enable.while\" and \"enable.duration\" cannot be combined`);\n        }\n        else\n            throw new Error(`Object \"${obj.id}\": \"enable.start\" or \"enable.while\" must be set`);\n    }\n    if (obj.keyframes) {\n        for (let i = 0; i < obj.keyframes.length; i++) {\n            const keyframe = obj.keyframes[i];\n            try {\n                validateKeyframe0(keyframe, strict, uniqueIds);\n            }\n            catch (e) {\n                throw new Error(`Object \"${obj.id}\" keyframe[${i}]: ${e}`);\n            }\n        }\n    }\n    if (obj.classes) {\n        for (let i = 0; i < obj.classes.length; i++) {\n            const className = obj.classes[i];\n            if (className && typeof className !== 'string')\n                throw new Error(`Object \"${obj.id}\": \"classes[${i}]\" is not a string`);\n        }\n    }\n    if (obj.children && !obj.isGroup)\n        throw new Error(`Object \"${obj.id}\": attribute \"children\" is set but \"isGroup\" is not`);\n    if (obj.isGroup && !obj.children)\n        throw new Error(`Object \"${obj.id}\": attribute \"isGroup\" is set but \"children\" missing`);\n    if (obj.children) {\n        for (let i = 0; i < obj.children.length; i++) {\n            const child = obj.children[i];\n            try {\n                validateObject0(child, strict, uniqueIds);\n            }\n            catch (e) {\n                throw new Error(`Object \"${obj.id}\" child[${i}]: ${e}`);\n            }\n        }\n    }\n    if (obj.priority !== undefined && !_.isNumber(obj.priority))\n        throw new Error(`Object \"${obj.id}\": attribute \"priority\" is not a number`);\n}\nfunction validateKeyframe0(keyframe, strict, uniqueIds) {\n    if (!uniqueIds)\n        uniqueIds = {};\n    if (!keyframe)\n        throw new Error(`Keyframe is undefined`);\n    if (typeof keyframe !== 'object')\n        throw new Error(`Keyframe is not an object`);\n    if (!keyframe.id)\n        throw new Error(`Keyframe missing id attribute`);\n    if (typeof keyframe.id !== 'string')\n        throw new Error(`Keyframe id attribute is not a string: \"${keyframe.id}\"`);\n    if (uniqueIds[keyframe.id])\n        throw new Error(`Keyframe id \"${keyframe.id}\" is not unique`);\n    uniqueIds[keyframe.id] = true;\n    if (!keyframe.content)\n        throw new Error(`Keyframe \"${keyframe.id}\": \"content\" attribute must be set`);\n    if (!keyframe.enable)\n        throw new Error(`Keyframe \"${keyframe.id}\": \"enable\" attribute must be set`);\n    const enables = _.isArray(keyframe.enable) ? keyframe.enable : [keyframe.enable];\n    for (let i = 0; i < enables.length; i++) {\n        const enable = enables[i];\n        if (enable.start !== undefined) {\n            if (strict && enable.while !== undefined)\n                throw new Error(`Keyframe \"${keyframe.id}\": \"enable.start\" and \"enable.while\" cannot be combined`);\n            if (strict && enable.end !== undefined && enable.duration !== undefined)\n                throw new Error(`Keyframe \"${keyframe.id}\": \"enable.end\" and \"enable.duration\" cannot be combined`);\n        }\n        else if (enable.while !== undefined) {\n            if (strict && enable.end !== undefined)\n                throw new Error(`Keyframe \"${keyframe.id}\": \"enable.while\" and \"enable.end\" cannot be combined`);\n            if (strict && enable.duration !== undefined)\n                throw new Error(`Keyframe \"${keyframe.id}\": \"enable.while\" and \"enable.duration\" cannot be combined`);\n        }\n        else\n            throw new Error(`Keyframe \"${keyframe.id}\": \"enable.start\" or \"enable.while\" must be set`);\n    }\n    if (keyframe.classes) {\n        for (let i = 0; i < keyframe.classes.length; i++) {\n            const className = keyframe.classes[i];\n            if (className && !_.isString(className))\n                throw new Error(`Keyframe \"${keyframe.id}\": \"classes[${i}]\" is not a string`);\n        }\n    }\n}\n/**\n * Validates all objects in the timeline. Throws an error if something's wrong\n * @param timeline The timeline to validate\n * @param strict Set to true to enable some strict rules (rules that can possibly be ignored)\n */\nfunction validateTimeline(timeline, strict) {\n    const uniqueIds = {};\n    for (let i = 0; i < timeline.length; i++) {\n        const obj = timeline[i];\n        validateObject0(obj, strict, uniqueIds);\n    }\n}\nexports.validateTimeline = validateTimeline;\n/**\n * Validates a Timeline-object. Throws an error if something's wrong\n * @param timeline The timeline to validate\n * @param strict Set to true to enable some strict rules (rules that can possibly be ignored)\n */\nfunction validateObject(obj, strict) {\n    validateObject0(obj, strict);\n}\nexports.validateObject = validateObject;\n/**\n * Validates a Timeline-keyframe. Throws an error if something's wrong\n * @param timeline The timeline to validate\n * @param strict Set to true to enable some strict rules (rules that can possibly be ignored)\n */\nfunction validateKeyframe(keyframe, strict) {\n    validateKeyframe0(keyframe, strict);\n}\nexports.validateKeyframe = validateKeyframe;\n//# sourceMappingURL=validate.js.map","/******************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global global, define, System, Reflect, Promise */\r\nvar __extends;\r\nvar __assign;\r\nvar __rest;\r\nvar __decorate;\r\nvar __param;\r\nvar __metadata;\r\nvar __awaiter;\r\nvar __generator;\r\nvar __exportStar;\r\nvar __values;\r\nvar __read;\r\nvar __spread;\r\nvar __spreadArrays;\r\nvar __spreadArray;\r\nvar __await;\r\nvar __asyncGenerator;\r\nvar __asyncDelegator;\r\nvar __asyncValues;\r\nvar __makeTemplateObject;\r\nvar __importStar;\r\nvar __importDefault;\r\nvar __classPrivateFieldGet;\r\nvar __classPrivateFieldSet;\r\nvar __classPrivateFieldIn;\r\nvar __createBinding;\r\n(function (factory) {\r\n    var root = typeof global === \"object\" ? global : typeof self === \"object\" ? self : typeof this === \"object\" ? this : {};\r\n    if (typeof define === \"function\" && define.amd) {\r\n        define(\"tslib\", [\"exports\"], function (exports) { factory(createExporter(root, createExporter(exports))); });\r\n    }\r\n    else if (typeof module === \"object\" && typeof module.exports === \"object\") {\r\n        factory(createExporter(root, createExporter(module.exports)));\r\n    }\r\n    else {\r\n        factory(createExporter(root));\r\n    }\r\n    function createExporter(exports, previous) {\r\n        if (exports !== root) {\r\n            if (typeof Object.create === \"function\") {\r\n                Object.defineProperty(exports, \"__esModule\", { value: true });\r\n            }\r\n            else {\r\n                exports.__esModule = true;\r\n            }\r\n        }\r\n        return function (id, v) { return exports[id] = previous ? previous(id, v) : v; };\r\n    }\r\n})\r\n(function (exporter) {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n\r\n    __extends = function (d, b) {\r\n        if (typeof b !== \"function\" && b !== null)\r\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n\r\n    __assign = Object.assign || function (t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    };\r\n\r\n    __rest = function (s, e) {\r\n        var t = {};\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n            t[p] = s[p];\r\n        if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                    t[p[i]] = s[p[i]];\r\n            }\r\n        return t;\r\n    };\r\n\r\n    __decorate = function (decorators, target, key, desc) {\r\n        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n        if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n        return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n    };\r\n\r\n    __param = function (paramIndex, decorator) {\r\n        return function (target, key) { decorator(target, key, paramIndex); }\r\n    };\r\n\r\n    __metadata = function (metadataKey, metadataValue) {\r\n        if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n    };\r\n\r\n    __awaiter = function (thisArg, _arguments, P, generator) {\r\n        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n        return new (P || (P = Promise))(function (resolve, reject) {\r\n            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n            function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n            step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n        });\r\n    };\r\n\r\n    __generator = function (thisArg, body) {\r\n        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n        return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n        function verb(n) { return function (v) { return step([n, v]); }; }\r\n        function step(op) {\r\n            if (f) throw new TypeError(\"Generator is already executing.\");\r\n            while (_) try {\r\n                if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n                if (y = 0, t) op = [op[0] & 2, t.value];\r\n                switch (op[0]) {\r\n                    case 0: case 1: t = op; break;\r\n                    case 4: _.label++; return { value: op[1], done: false };\r\n                    case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                    case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                    default:\r\n                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                        if (t[2]) _.ops.pop();\r\n                        _.trys.pop(); continue;\r\n                }\r\n                op = body.call(thisArg, _);\r\n            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n        }\r\n    };\r\n\r\n    __exportStar = function(m, o) {\r\n        for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\r\n    };\r\n\r\n    __createBinding = Object.create ? (function(o, m, k, k2) {\r\n        if (k2 === undefined) k2 = k;\r\n        var desc = Object.getOwnPropertyDescriptor(m, k);\r\n        if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\r\n            desc = { enumerable: true, get: function() { return m[k]; } };\r\n        }\r\n        Object.defineProperty(o, k2, desc);\r\n    }) : (function(o, m, k, k2) {\r\n        if (k2 === undefined) k2 = k;\r\n        o[k2] = m[k];\r\n    });\r\n\r\n    __values = function (o) {\r\n        var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n        if (m) return m.call(o);\r\n        if (o && typeof o.length === \"number\") return {\r\n            next: function () {\r\n                if (o && i >= o.length) o = void 0;\r\n                return { value: o && o[i++], done: !o };\r\n            }\r\n        };\r\n        throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n    };\r\n\r\n    __read = function (o, n) {\r\n        var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n        if (!m) return o;\r\n        var i = m.call(o), r, ar = [], e;\r\n        try {\r\n            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n        }\r\n        catch (error) { e = { error: error }; }\r\n        finally {\r\n            try {\r\n                if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n            }\r\n            finally { if (e) throw e.error; }\r\n        }\r\n        return ar;\r\n    };\r\n\r\n    /** @deprecated */\r\n    __spread = function () {\r\n        for (var ar = [], i = 0; i < arguments.length; i++)\r\n            ar = ar.concat(__read(arguments[i]));\r\n        return ar;\r\n    };\r\n\r\n    /** @deprecated */\r\n    __spreadArrays = function () {\r\n        for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n        for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n                r[k] = a[j];\r\n        return r;\r\n    };\r\n\r\n    __spreadArray = function (to, from, pack) {\r\n        if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\r\n            if (ar || !(i in from)) {\r\n                if (!ar) ar = Array.prototype.slice.call(from, 0, i);\r\n                ar[i] = from[i];\r\n            }\r\n        }\r\n        return to.concat(ar || Array.prototype.slice.call(from));\r\n    };\r\n\r\n    __await = function (v) {\r\n        return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n    };\r\n\r\n    __asyncGenerator = function (thisArg, _arguments, generator) {\r\n        if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n        var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n        return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n        function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n        function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);  }\r\n        function fulfill(value) { resume(\"next\", value); }\r\n        function reject(value) { resume(\"throw\", value); }\r\n        function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n    };\r\n\r\n    __asyncDelegator = function (o) {\r\n        var i, p;\r\n        return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n    };\r\n\r\n    __asyncValues = function (o) {\r\n        if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n        var m = o[Symbol.asyncIterator], i;\r\n        return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n    };\r\n\r\n    __makeTemplateObject = function (cooked, raw) {\r\n        if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n        return cooked;\r\n    };\r\n\r\n    var __setModuleDefault = Object.create ? (function(o, v) {\r\n        Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n    }) : function(o, v) {\r\n        o[\"default\"] = v;\r\n    };\r\n\r\n    __importStar = function (mod) {\r\n        if (mod && mod.__esModule) return mod;\r\n        var result = {};\r\n        if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n        __setModuleDefault(result, mod);\r\n        return result;\r\n    };\r\n\r\n    __importDefault = function (mod) {\r\n        return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n    };\r\n\r\n    __classPrivateFieldGet = function (receiver, state, kind, f) {\r\n        if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\r\n        if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\r\n        return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\r\n    };\r\n\r\n    __classPrivateFieldSet = function (receiver, state, value, kind, f) {\r\n        if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\r\n        if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\r\n        if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\r\n        return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\r\n    };\r\n\r\n    __classPrivateFieldIn = function (state, receiver) {\r\n        if (receiver === null || (typeof receiver !== \"object\" && typeof receiver !== \"function\")) throw new TypeError(\"Cannot use 'in' operator on non-object\");\r\n        return typeof state === \"function\" ? receiver === state : state.has(receiver);\r\n    };\r\n\r\n    exporter(\"__extends\", __extends);\r\n    exporter(\"__assign\", __assign);\r\n    exporter(\"__rest\", __rest);\r\n    exporter(\"__decorate\", __decorate);\r\n    exporter(\"__param\", __param);\r\n    exporter(\"__metadata\", __metadata);\r\n    exporter(\"__awaiter\", __awaiter);\r\n    exporter(\"__generator\", __generator);\r\n    exporter(\"__exportStar\", __exportStar);\r\n    exporter(\"__createBinding\", __createBinding);\r\n    exporter(\"__values\", __values);\r\n    exporter(\"__read\", __read);\r\n    exporter(\"__spread\", __spread);\r\n    exporter(\"__spreadArrays\", __spreadArrays);\r\n    exporter(\"__spreadArray\", __spreadArray);\r\n    exporter(\"__await\", __await);\r\n    exporter(\"__asyncGenerator\", __asyncGenerator);\r\n    exporter(\"__asyncDelegator\", __asyncDelegator);\r\n    exporter(\"__asyncValues\", __asyncValues);\r\n    exporter(\"__makeTemplateObject\", __makeTemplateObject);\r\n    exporter(\"__importStar\", __importStar);\r\n    exporter(\"__importDefault\", __importDefault);\r\n    exporter(\"__classPrivateFieldGet\", __classPrivateFieldGet);\r\n    exporter(\"__classPrivateFieldSet\", __classPrivateFieldSet);\r\n    exporter(\"__classPrivateFieldIn\", __classPrivateFieldIn);\r\n});\r\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n\r\n/* global global, define, System, Reflect, Promise */\r\nvar __extends;\r\nvar __assign;\r\nvar __rest;\r\nvar __decorate;\r\nvar __param;\r\nvar __metadata;\r\nvar __awaiter;\r\nvar __generator;\r\nvar __exportStar;\r\nvar __values;\r\nvar __read;\r\nvar __spread;\r\nvar __spreadArrays;\r\nvar __await;\r\nvar __asyncGenerator;\r\nvar __asyncDelegator;\r\nvar __asyncValues;\r\nvar __makeTemplateObject;\r\nvar __importStar;\r\nvar __importDefault;\r\nvar __classPrivateFieldGet;\r\nvar __classPrivateFieldSet;\r\nvar __createBinding;\r\n(function (factory) {\r\n    var root = typeof global === \"object\" ? global : typeof self === \"object\" ? self : typeof this === \"object\" ? this : {};\r\n    if (typeof define === \"function\" && define.amd) {\r\n        define(\"tslib\", [\"exports\"], function (exports) { factory(createExporter(root, createExporter(exports))); });\r\n    }\r\n    else if (typeof module === \"object\" && typeof module.exports === \"object\") {\r\n        factory(createExporter(root, createExporter(module.exports)));\r\n    }\r\n    else {\r\n        factory(createExporter(root));\r\n    }\r\n    function createExporter(exports, previous) {\r\n        if (exports !== root) {\r\n            if (typeof Object.create === \"function\") {\r\n                Object.defineProperty(exports, \"__esModule\", { value: true });\r\n            }\r\n            else {\r\n                exports.__esModule = true;\r\n            }\r\n        }\r\n        return function (id, v) { return exports[id] = previous ? previous(id, v) : v; };\r\n    }\r\n})\r\n(function (exporter) {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\n    __extends = function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n\r\n    __assign = Object.assign || function (t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    };\r\n\r\n    __rest = function (s, e) {\r\n        var t = {};\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n            t[p] = s[p];\r\n        if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                    t[p[i]] = s[p[i]];\r\n            }\r\n        return t;\r\n    };\r\n\r\n    __decorate = function (decorators, target, key, desc) {\r\n        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n        if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n        return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n    };\r\n\r\n    __param = function (paramIndex, decorator) {\r\n        return function (target, key) { decorator(target, key, paramIndex); }\r\n    };\r\n\r\n    __metadata = function (metadataKey, metadataValue) {\r\n        if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n    };\r\n\r\n    __awaiter = function (thisArg, _arguments, P, generator) {\r\n        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n        return new (P || (P = Promise))(function (resolve, reject) {\r\n            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n            function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n            step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n        });\r\n    };\r\n\r\n    __generator = function (thisArg, body) {\r\n        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n        return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n        function verb(n) { return function (v) { return step([n, v]); }; }\r\n        function step(op) {\r\n            if (f) throw new TypeError(\"Generator is already executing.\");\r\n            while (_) try {\r\n                if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n                if (y = 0, t) op = [op[0] & 2, t.value];\r\n                switch (op[0]) {\r\n                    case 0: case 1: t = op; break;\r\n                    case 4: _.label++; return { value: op[1], done: false };\r\n                    case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                    case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                    default:\r\n                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                        if (t[2]) _.ops.pop();\r\n                        _.trys.pop(); continue;\r\n                }\r\n                op = body.call(thisArg, _);\r\n            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n        }\r\n    };\r\n\r\n    __createBinding = function(o, m, k, k2) {\r\n        if (k2 === undefined) k2 = k;\r\n        o[k2] = m[k];\r\n    };\r\n\r\n    __exportStar = function (m, exports) {\r\n        for (var p in m) if (p !== \"default\" && !exports.hasOwnProperty(p)) exports[p] = m[p];\r\n    };\r\n\r\n    __values = function (o) {\r\n        var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n        if (m) return m.call(o);\r\n        if (o && typeof o.length === \"number\") return {\r\n            next: function () {\r\n                if (o && i >= o.length) o = void 0;\r\n                return { value: o && o[i++], done: !o };\r\n            }\r\n        };\r\n        throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n    };\r\n\r\n    __read = function (o, n) {\r\n        var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n        if (!m) return o;\r\n        var i = m.call(o), r, ar = [], e;\r\n        try {\r\n            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n        }\r\n        catch (error) { e = { error: error }; }\r\n        finally {\r\n            try {\r\n                if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n            }\r\n            finally { if (e) throw e.error; }\r\n        }\r\n        return ar;\r\n    };\r\n\r\n    __spread = function () {\r\n        for (var ar = [], i = 0; i < arguments.length; i++)\r\n            ar = ar.concat(__read(arguments[i]));\r\n        return ar;\r\n    };\r\n\r\n    __spreadArrays = function () {\r\n        for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n        for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n                r[k] = a[j];\r\n        return r;\r\n    };\r\n\r\n    __await = function (v) {\r\n        return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n    };\r\n\r\n    __asyncGenerator = function (thisArg, _arguments, generator) {\r\n        if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n        var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n        return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n        function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n        function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);  }\r\n        function fulfill(value) { resume(\"next\", value); }\r\n        function reject(value) { resume(\"throw\", value); }\r\n        function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n    };\r\n\r\n    __asyncDelegator = function (o) {\r\n        var i, p;\r\n        return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n    };\r\n\r\n    __asyncValues = function (o) {\r\n        if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n        var m = o[Symbol.asyncIterator], i;\r\n        return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n    };\r\n\r\n    __makeTemplateObject = function (cooked, raw) {\r\n        if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n        return cooked;\r\n    };\r\n\r\n    __importStar = function (mod) {\r\n        if (mod && mod.__esModule) return mod;\r\n        var result = {};\r\n        if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n        result[\"default\"] = mod;\r\n        return result;\r\n    };\r\n\r\n    __importDefault = function (mod) {\r\n        return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n    };\r\n\r\n    __classPrivateFieldGet = function (receiver, privateMap) {\r\n        if (!privateMap.has(receiver)) {\r\n            throw new TypeError(\"attempted to get private field on non-instance\");\r\n        }\r\n        return privateMap.get(receiver);\r\n    };\r\n\r\n    __classPrivateFieldSet = function (receiver, privateMap, value) {\r\n        if (!privateMap.has(receiver)) {\r\n            throw new TypeError(\"attempted to set private field on non-instance\");\r\n        }\r\n        privateMap.set(receiver, value);\r\n        return value;\r\n    };\r\n\r\n    exporter(\"__extends\", __extends);\r\n    exporter(\"__assign\", __assign);\r\n    exporter(\"__rest\", __rest);\r\n    exporter(\"__decorate\", __decorate);\r\n    exporter(\"__param\", __param);\r\n    exporter(\"__metadata\", __metadata);\r\n    exporter(\"__awaiter\", __awaiter);\r\n    exporter(\"__generator\", __generator);\r\n    exporter(\"__exportStar\", __exportStar);\r\n    exporter(\"__createBinding\", __createBinding);\r\n    exporter(\"__values\", __values);\r\n    exporter(\"__read\", __read);\r\n    exporter(\"__spread\", __spread);\r\n    exporter(\"__spreadArrays\", __spreadArrays);\r\n    exporter(\"__await\", __await);\r\n    exporter(\"__asyncGenerator\", __asyncGenerator);\r\n    exporter(\"__asyncDelegator\", __asyncDelegator);\r\n    exporter(\"__asyncValues\", __asyncValues);\r\n    exporter(\"__makeTemplateObject\", __makeTemplateObject);\r\n    exporter(\"__importStar\", __importStar);\r\n    exporter(\"__importDefault\", __importDefault);\r\n    exporter(\"__classPrivateFieldGet\", __classPrivateFieldGet);\r\n    exporter(\"__classPrivateFieldSet\", __classPrivateFieldSet);\r\n});\r\n","(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n  typeof define === 'function' && define.amd ? define('underscore', factory) :\n  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, (function () {\n    var current = global._;\n    var exports = global._ = factory();\n    exports.noConflict = function () { global._ = current; return exports; };\n  }()));\n}(this, (function () {\n  //     Underscore.js 1.13.4\n  //     https://underscorejs.org\n  //     (c) 2009-2022 Jeremy Ashkenas, Julian Gonggrijp, and DocumentCloud and Investigative Reporters & Editors\n  //     Underscore may be freely distributed under the MIT license.\n\n  // Current version.\n  var VERSION = '1.13.4';\n\n  // Establish the root object, `window` (`self`) in the browser, `global`\n  // on the server, or `this` in some virtual machines. We use `self`\n  // instead of `window` for `WebWorker` support.\n  var root = (typeof self == 'object' && self.self === self && self) ||\n            (typeof global == 'object' && global.global === global && global) ||\n            Function('return this')() ||\n            {};\n\n  // Save bytes in the minified (but not gzipped) version:\n  var ArrayProto = Array.prototype, ObjProto = Object.prototype;\n  var SymbolProto = typeof Symbol !== 'undefined' ? Symbol.prototype : null;\n\n  // Create quick reference variables for speed access to core prototypes.\n  var push = ArrayProto.push,\n      slice = ArrayProto.slice,\n      toString = ObjProto.toString,\n      hasOwnProperty = ObjProto.hasOwnProperty;\n\n  // Modern feature detection.\n  var supportsArrayBuffer = typeof ArrayBuffer !== 'undefined',\n      supportsDataView = typeof DataView !== 'undefined';\n\n  // All **ECMAScript 5+** native function implementations that we hope to use\n  // are declared here.\n  var nativeIsArray = Array.isArray,\n      nativeKeys = Object.keys,\n      nativeCreate = Object.create,\n      nativeIsView = supportsArrayBuffer && ArrayBuffer.isView;\n\n  // Create references to these builtin functions because we override them.\n  var _isNaN = isNaN,\n      _isFinite = isFinite;\n\n  // Keys in IE < 9 that won't be iterated by `for key in ...` and thus missed.\n  var hasEnumBug = !{toString: null}.propertyIsEnumerable('toString');\n  var nonEnumerableProps = ['valueOf', 'isPrototypeOf', 'toString',\n    'propertyIsEnumerable', 'hasOwnProperty', 'toLocaleString'];\n\n  // The largest integer that can be represented exactly.\n  var MAX_ARRAY_INDEX = Math.pow(2, 53) - 1;\n\n  // Some functions take a variable number of arguments, or a few expected\n  // arguments at the beginning and then a variable number of values to operate\n  // on. This helper accumulates all remaining arguments past the function’s\n  // argument length (or an explicit `startIndex`), into an array that becomes\n  // the last argument. Similar to ES6’s \"rest parameter\".\n  function restArguments(func, startIndex) {\n    startIndex = startIndex == null ? func.length - 1 : +startIndex;\n    return function() {\n      var length = Math.max(arguments.length - startIndex, 0),\n          rest = Array(length),\n          index = 0;\n      for (; index < length; index++) {\n        rest[index] = arguments[index + startIndex];\n      }\n      switch (startIndex) {\n        case 0: return func.call(this, rest);\n        case 1: return func.call(this, arguments[0], rest);\n        case 2: return func.call(this, arguments[0], arguments[1], rest);\n      }\n      var args = Array(startIndex + 1);\n      for (index = 0; index < startIndex; index++) {\n        args[index] = arguments[index];\n      }\n      args[startIndex] = rest;\n      return func.apply(this, args);\n    };\n  }\n\n  // Is a given variable an object?\n  function isObject(obj) {\n    var type = typeof obj;\n    return type === 'function' || (type === 'object' && !!obj);\n  }\n\n  // Is a given value equal to null?\n  function isNull(obj) {\n    return obj === null;\n  }\n\n  // Is a given variable undefined?\n  function isUndefined(obj) {\n    return obj === void 0;\n  }\n\n  // Is a given value a boolean?\n  function isBoolean(obj) {\n    return obj === true || obj === false || toString.call(obj) === '[object Boolean]';\n  }\n\n  // Is a given value a DOM element?\n  function isElement(obj) {\n    return !!(obj && obj.nodeType === 1);\n  }\n\n  // Internal function for creating a `toString`-based type tester.\n  function tagTester(name) {\n    var tag = '[object ' + name + ']';\n    return function(obj) {\n      return toString.call(obj) === tag;\n    };\n  }\n\n  var isString = tagTester('String');\n\n  var isNumber = tagTester('Number');\n\n  var isDate = tagTester('Date');\n\n  var isRegExp = tagTester('RegExp');\n\n  var isError = tagTester('Error');\n\n  var isSymbol = tagTester('Symbol');\n\n  var isArrayBuffer = tagTester('ArrayBuffer');\n\n  var isFunction = tagTester('Function');\n\n  // Optimize `isFunction` if appropriate. Work around some `typeof` bugs in old\n  // v8, IE 11 (#1621), Safari 8 (#1929), and PhantomJS (#2236).\n  var nodelist = root.document && root.document.childNodes;\n  if (typeof /./ != 'function' && typeof Int8Array != 'object' && typeof nodelist != 'function') {\n    isFunction = function(obj) {\n      return typeof obj == 'function' || false;\n    };\n  }\n\n  var isFunction$1 = isFunction;\n\n  var hasObjectTag = tagTester('Object');\n\n  // In IE 10 - Edge 13, `DataView` has string tag `'[object Object]'`.\n  // In IE 11, the most common among them, this problem also applies to\n  // `Map`, `WeakMap` and `Set`.\n  var hasStringTagBug = (\n        supportsDataView && hasObjectTag(new DataView(new ArrayBuffer(8)))\n      ),\n      isIE11 = (typeof Map !== 'undefined' && hasObjectTag(new Map));\n\n  var isDataView = tagTester('DataView');\n\n  // In IE 10 - Edge 13, we need a different heuristic\n  // to determine whether an object is a `DataView`.\n  function ie10IsDataView(obj) {\n    return obj != null && isFunction$1(obj.getInt8) && isArrayBuffer(obj.buffer);\n  }\n\n  var isDataView$1 = (hasStringTagBug ? ie10IsDataView : isDataView);\n\n  // Is a given value an array?\n  // Delegates to ECMA5's native `Array.isArray`.\n  var isArray = nativeIsArray || tagTester('Array');\n\n  // Internal function to check whether `key` is an own property name of `obj`.\n  function has$1(obj, key) {\n    return obj != null && hasOwnProperty.call(obj, key);\n  }\n\n  var isArguments = tagTester('Arguments');\n\n  // Define a fallback version of the method in browsers (ahem, IE < 9), where\n  // there isn't any inspectable \"Arguments\" type.\n  (function() {\n    if (!isArguments(arguments)) {\n      isArguments = function(obj) {\n        return has$1(obj, 'callee');\n      };\n    }\n  }());\n\n  var isArguments$1 = isArguments;\n\n  // Is a given object a finite number?\n  function isFinite$1(obj) {\n    return !isSymbol(obj) && _isFinite(obj) && !isNaN(parseFloat(obj));\n  }\n\n  // Is the given value `NaN`?\n  function isNaN$1(obj) {\n    return isNumber(obj) && _isNaN(obj);\n  }\n\n  // Predicate-generating function. Often useful outside of Underscore.\n  function constant(value) {\n    return function() {\n      return value;\n    };\n  }\n\n  // Common internal logic for `isArrayLike` and `isBufferLike`.\n  function createSizePropertyCheck(getSizeProperty) {\n    return function(collection) {\n      var sizeProperty = getSizeProperty(collection);\n      return typeof sizeProperty == 'number' && sizeProperty >= 0 && sizeProperty <= MAX_ARRAY_INDEX;\n    }\n  }\n\n  // Internal helper to generate a function to obtain property `key` from `obj`.\n  function shallowProperty(key) {\n    return function(obj) {\n      return obj == null ? void 0 : obj[key];\n    };\n  }\n\n  // Internal helper to obtain the `byteLength` property of an object.\n  var getByteLength = shallowProperty('byteLength');\n\n  // Internal helper to determine whether we should spend extensive checks against\n  // `ArrayBuffer` et al.\n  var isBufferLike = createSizePropertyCheck(getByteLength);\n\n  // Is a given value a typed array?\n  var typedArrayPattern = /\\[object ((I|Ui)nt(8|16|32)|Float(32|64)|Uint8Clamped|Big(I|Ui)nt64)Array\\]/;\n  function isTypedArray(obj) {\n    // `ArrayBuffer.isView` is the most future-proof, so use it when available.\n    // Otherwise, fall back on the above regular expression.\n    return nativeIsView ? (nativeIsView(obj) && !isDataView$1(obj)) :\n                  isBufferLike(obj) && typedArrayPattern.test(toString.call(obj));\n  }\n\n  var isTypedArray$1 = supportsArrayBuffer ? isTypedArray : constant(false);\n\n  // Internal helper to obtain the `length` property of an object.\n  var getLength = shallowProperty('length');\n\n  // Internal helper to create a simple lookup structure.\n  // `collectNonEnumProps` used to depend on `_.contains`, but this led to\n  // circular imports. `emulatedSet` is a one-off solution that only works for\n  // arrays of strings.\n  function emulatedSet(keys) {\n    var hash = {};\n    for (var l = keys.length, i = 0; i < l; ++i) hash[keys[i]] = true;\n    return {\n      contains: function(key) { return hash[key] === true; },\n      push: function(key) {\n        hash[key] = true;\n        return keys.push(key);\n      }\n    };\n  }\n\n  // Internal helper. Checks `keys` for the presence of keys in IE < 9 that won't\n  // be iterated by `for key in ...` and thus missed. Extends `keys` in place if\n  // needed.\n  function collectNonEnumProps(obj, keys) {\n    keys = emulatedSet(keys);\n    var nonEnumIdx = nonEnumerableProps.length;\n    var constructor = obj.constructor;\n    var proto = (isFunction$1(constructor) && constructor.prototype) || ObjProto;\n\n    // Constructor is a special case.\n    var prop = 'constructor';\n    if (has$1(obj, prop) && !keys.contains(prop)) keys.push(prop);\n\n    while (nonEnumIdx--) {\n      prop = nonEnumerableProps[nonEnumIdx];\n      if (prop in obj && obj[prop] !== proto[prop] && !keys.contains(prop)) {\n        keys.push(prop);\n      }\n    }\n  }\n\n  // Retrieve the names of an object's own properties.\n  // Delegates to **ECMAScript 5**'s native `Object.keys`.\n  function keys(obj) {\n    if (!isObject(obj)) return [];\n    if (nativeKeys) return nativeKeys(obj);\n    var keys = [];\n    for (var key in obj) if (has$1(obj, key)) keys.push(key);\n    // Ahem, IE < 9.\n    if (hasEnumBug) collectNonEnumProps(obj, keys);\n    return keys;\n  }\n\n  // Is a given array, string, or object empty?\n  // An \"empty\" object has no enumerable own-properties.\n  function isEmpty(obj) {\n    if (obj == null) return true;\n    // Skip the more expensive `toString`-based type checks if `obj` has no\n    // `.length`.\n    var length = getLength(obj);\n    if (typeof length == 'number' && (\n      isArray(obj) || isString(obj) || isArguments$1(obj)\n    )) return length === 0;\n    return getLength(keys(obj)) === 0;\n  }\n\n  // Returns whether an object has a given set of `key:value` pairs.\n  function isMatch(object, attrs) {\n    var _keys = keys(attrs), length = _keys.length;\n    if (object == null) return !length;\n    var obj = Object(object);\n    for (var i = 0; i < length; i++) {\n      var key = _keys[i];\n      if (attrs[key] !== obj[key] || !(key in obj)) return false;\n    }\n    return true;\n  }\n\n  // If Underscore is called as a function, it returns a wrapped object that can\n  // be used OO-style. This wrapper holds altered versions of all functions added\n  // through `_.mixin`. Wrapped objects may be chained.\n  function _$1(obj) {\n    if (obj instanceof _$1) return obj;\n    if (!(this instanceof _$1)) return new _$1(obj);\n    this._wrapped = obj;\n  }\n\n  _$1.VERSION = VERSION;\n\n  // Extracts the result from a wrapped and chained object.\n  _$1.prototype.value = function() {\n    return this._wrapped;\n  };\n\n  // Provide unwrapping proxies for some methods used in engine operations\n  // such as arithmetic and JSON stringification.\n  _$1.prototype.valueOf = _$1.prototype.toJSON = _$1.prototype.value;\n\n  _$1.prototype.toString = function() {\n    return String(this._wrapped);\n  };\n\n  // Internal function to wrap or shallow-copy an ArrayBuffer,\n  // typed array or DataView to a new view, reusing the buffer.\n  function toBufferView(bufferSource) {\n    return new Uint8Array(\n      bufferSource.buffer || bufferSource,\n      bufferSource.byteOffset || 0,\n      getByteLength(bufferSource)\n    );\n  }\n\n  // We use this string twice, so give it a name for minification.\n  var tagDataView = '[object DataView]';\n\n  // Internal recursive comparison function for `_.isEqual`.\n  function eq(a, b, aStack, bStack) {\n    // Identical objects are equal. `0 === -0`, but they aren't identical.\n    // See the [Harmony `egal` proposal](https://wiki.ecmascript.org/doku.php?id=harmony:egal).\n    if (a === b) return a !== 0 || 1 / a === 1 / b;\n    // `null` or `undefined` only equal to itself (strict comparison).\n    if (a == null || b == null) return false;\n    // `NaN`s are equivalent, but non-reflexive.\n    if (a !== a) return b !== b;\n    // Exhaust primitive checks\n    var type = typeof a;\n    if (type !== 'function' && type !== 'object' && typeof b != 'object') return false;\n    return deepEq(a, b, aStack, bStack);\n  }\n\n  // Internal recursive comparison function for `_.isEqual`.\n  function deepEq(a, b, aStack, bStack) {\n    // Unwrap any wrapped objects.\n    if (a instanceof _$1) a = a._wrapped;\n    if (b instanceof _$1) b = b._wrapped;\n    // Compare `[[Class]]` names.\n    var className = toString.call(a);\n    if (className !== toString.call(b)) return false;\n    // Work around a bug in IE 10 - Edge 13.\n    if (hasStringTagBug && className == '[object Object]' && isDataView$1(a)) {\n      if (!isDataView$1(b)) return false;\n      className = tagDataView;\n    }\n    switch (className) {\n      // These types are compared by value.\n      case '[object RegExp]':\n        // RegExps are coerced to strings for comparison (Note: '' + /a/i === '/a/i')\n      case '[object String]':\n        // Primitives and their corresponding object wrappers are equivalent; thus, `\"5\"` is\n        // equivalent to `new String(\"5\")`.\n        return '' + a === '' + b;\n      case '[object Number]':\n        // `NaN`s are equivalent, but non-reflexive.\n        // Object(NaN) is equivalent to NaN.\n        if (+a !== +a) return +b !== +b;\n        // An `egal` comparison is performed for other numeric values.\n        return +a === 0 ? 1 / +a === 1 / b : +a === +b;\n      case '[object Date]':\n      case '[object Boolean]':\n        // Coerce dates and booleans to numeric primitive values. Dates are compared by their\n        // millisecond representations. Note that invalid dates with millisecond representations\n        // of `NaN` are not equivalent.\n        return +a === +b;\n      case '[object Symbol]':\n        return SymbolProto.valueOf.call(a) === SymbolProto.valueOf.call(b);\n      case '[object ArrayBuffer]':\n      case tagDataView:\n        // Coerce to typed array so we can fall through.\n        return deepEq(toBufferView(a), toBufferView(b), aStack, bStack);\n    }\n\n    var areArrays = className === '[object Array]';\n    if (!areArrays && isTypedArray$1(a)) {\n        var byteLength = getByteLength(a);\n        if (byteLength !== getByteLength(b)) return false;\n        if (a.buffer === b.buffer && a.byteOffset === b.byteOffset) return true;\n        areArrays = true;\n    }\n    if (!areArrays) {\n      if (typeof a != 'object' || typeof b != 'object') return false;\n\n      // Objects with different constructors are not equivalent, but `Object`s or `Array`s\n      // from different frames are.\n      var aCtor = a.constructor, bCtor = b.constructor;\n      if (aCtor !== bCtor && !(isFunction$1(aCtor) && aCtor instanceof aCtor &&\n                               isFunction$1(bCtor) && bCtor instanceof bCtor)\n                          && ('constructor' in a && 'constructor' in b)) {\n        return false;\n      }\n    }\n    // Assume equality for cyclic structures. The algorithm for detecting cyclic\n    // structures is adapted from ES 5.1 section 15.12.3, abstract operation `JO`.\n\n    // Initializing stack of traversed objects.\n    // It's done here since we only need them for objects and arrays comparison.\n    aStack = aStack || [];\n    bStack = bStack || [];\n    var length = aStack.length;\n    while (length--) {\n      // Linear search. Performance is inversely proportional to the number of\n      // unique nested structures.\n      if (aStack[length] === a) return bStack[length] === b;\n    }\n\n    // Add the first object to the stack of traversed objects.\n    aStack.push(a);\n    bStack.push(b);\n\n    // Recursively compare objects and arrays.\n    if (areArrays) {\n      // Compare array lengths to determine if a deep comparison is necessary.\n      length = a.length;\n      if (length !== b.length) return false;\n      // Deep compare the contents, ignoring non-numeric properties.\n      while (length--) {\n        if (!eq(a[length], b[length], aStack, bStack)) return false;\n      }\n    } else {\n      // Deep compare objects.\n      var _keys = keys(a), key;\n      length = _keys.length;\n      // Ensure that both objects contain the same number of properties before comparing deep equality.\n      if (keys(b).length !== length) return false;\n      while (length--) {\n        // Deep compare each member\n        key = _keys[length];\n        if (!(has$1(b, key) && eq(a[key], b[key], aStack, bStack))) return false;\n      }\n    }\n    // Remove the first object from the stack of traversed objects.\n    aStack.pop();\n    bStack.pop();\n    return true;\n  }\n\n  // Perform a deep comparison to check if two objects are equal.\n  function isEqual(a, b) {\n    return eq(a, b);\n  }\n\n  // Retrieve all the enumerable property names of an object.\n  function allKeys(obj) {\n    if (!isObject(obj)) return [];\n    var keys = [];\n    for (var key in obj) keys.push(key);\n    // Ahem, IE < 9.\n    if (hasEnumBug) collectNonEnumProps(obj, keys);\n    return keys;\n  }\n\n  // Since the regular `Object.prototype.toString` type tests don't work for\n  // some types in IE 11, we use a fingerprinting heuristic instead, based\n  // on the methods. It's not great, but it's the best we got.\n  // The fingerprint method lists are defined below.\n  function ie11fingerprint(methods) {\n    var length = getLength(methods);\n    return function(obj) {\n      if (obj == null) return false;\n      // `Map`, `WeakMap` and `Set` have no enumerable keys.\n      var keys = allKeys(obj);\n      if (getLength(keys)) return false;\n      for (var i = 0; i < length; i++) {\n        if (!isFunction$1(obj[methods[i]])) return false;\n      }\n      // If we are testing against `WeakMap`, we need to ensure that\n      // `obj` doesn't have a `forEach` method in order to distinguish\n      // it from a regular `Map`.\n      return methods !== weakMapMethods || !isFunction$1(obj[forEachName]);\n    };\n  }\n\n  // In the interest of compact minification, we write\n  // each string in the fingerprints only once.\n  var forEachName = 'forEach',\n      hasName = 'has',\n      commonInit = ['clear', 'delete'],\n      mapTail = ['get', hasName, 'set'];\n\n  // `Map`, `WeakMap` and `Set` each have slightly different\n  // combinations of the above sublists.\n  var mapMethods = commonInit.concat(forEachName, mapTail),\n      weakMapMethods = commonInit.concat(mapTail),\n      setMethods = ['add'].concat(commonInit, forEachName, hasName);\n\n  var isMap = isIE11 ? ie11fingerprint(mapMethods) : tagTester('Map');\n\n  var isWeakMap = isIE11 ? ie11fingerprint(weakMapMethods) : tagTester('WeakMap');\n\n  var isSet = isIE11 ? ie11fingerprint(setMethods) : tagTester('Set');\n\n  var isWeakSet = tagTester('WeakSet');\n\n  // Retrieve the values of an object's properties.\n  function values(obj) {\n    var _keys = keys(obj);\n    var length = _keys.length;\n    var values = Array(length);\n    for (var i = 0; i < length; i++) {\n      values[i] = obj[_keys[i]];\n    }\n    return values;\n  }\n\n  // Convert an object into a list of `[key, value]` pairs.\n  // The opposite of `_.object` with one argument.\n  function pairs(obj) {\n    var _keys = keys(obj);\n    var length = _keys.length;\n    var pairs = Array(length);\n    for (var i = 0; i < length; i++) {\n      pairs[i] = [_keys[i], obj[_keys[i]]];\n    }\n    return pairs;\n  }\n\n  // Invert the keys and values of an object. The values must be serializable.\n  function invert(obj) {\n    var result = {};\n    var _keys = keys(obj);\n    for (var i = 0, length = _keys.length; i < length; i++) {\n      result[obj[_keys[i]]] = _keys[i];\n    }\n    return result;\n  }\n\n  // Return a sorted list of the function names available on the object.\n  function functions(obj) {\n    var names = [];\n    for (var key in obj) {\n      if (isFunction$1(obj[key])) names.push(key);\n    }\n    return names.sort();\n  }\n\n  // An internal function for creating assigner functions.\n  function createAssigner(keysFunc, defaults) {\n    return function(obj) {\n      var length = arguments.length;\n      if (defaults) obj = Object(obj);\n      if (length < 2 || obj == null) return obj;\n      for (var index = 1; index < length; index++) {\n        var source = arguments[index],\n            keys = keysFunc(source),\n            l = keys.length;\n        for (var i = 0; i < l; i++) {\n          var key = keys[i];\n          if (!defaults || obj[key] === void 0) obj[key] = source[key];\n        }\n      }\n      return obj;\n    };\n  }\n\n  // Extend a given object with all the properties in passed-in object(s).\n  var extend = createAssigner(allKeys);\n\n  // Assigns a given object with all the own properties in the passed-in\n  // object(s).\n  // (https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object/assign)\n  var extendOwn = createAssigner(keys);\n\n  // Fill in a given object with default properties.\n  var defaults = createAssigner(allKeys, true);\n\n  // Create a naked function reference for surrogate-prototype-swapping.\n  function ctor() {\n    return function(){};\n  }\n\n  // An internal function for creating a new object that inherits from another.\n  function baseCreate(prototype) {\n    if (!isObject(prototype)) return {};\n    if (nativeCreate) return nativeCreate(prototype);\n    var Ctor = ctor();\n    Ctor.prototype = prototype;\n    var result = new Ctor;\n    Ctor.prototype = null;\n    return result;\n  }\n\n  // Creates an object that inherits from the given prototype object.\n  // If additional properties are provided then they will be added to the\n  // created object.\n  function create(prototype, props) {\n    var result = baseCreate(prototype);\n    if (props) extendOwn(result, props);\n    return result;\n  }\n\n  // Create a (shallow-cloned) duplicate of an object.\n  function clone(obj) {\n    if (!isObject(obj)) return obj;\n    return isArray(obj) ? obj.slice() : extend({}, obj);\n  }\n\n  // Invokes `interceptor` with the `obj` and then returns `obj`.\n  // The primary purpose of this method is to \"tap into\" a method chain, in\n  // order to perform operations on intermediate results within the chain.\n  function tap(obj, interceptor) {\n    interceptor(obj);\n    return obj;\n  }\n\n  // Normalize a (deep) property `path` to array.\n  // Like `_.iteratee`, this function can be customized.\n  function toPath$1(path) {\n    return isArray(path) ? path : [path];\n  }\n  _$1.toPath = toPath$1;\n\n  // Internal wrapper for `_.toPath` to enable minification.\n  // Similar to `cb` for `_.iteratee`.\n  function toPath(path) {\n    return _$1.toPath(path);\n  }\n\n  // Internal function to obtain a nested property in `obj` along `path`.\n  function deepGet(obj, path) {\n    var length = path.length;\n    for (var i = 0; i < length; i++) {\n      if (obj == null) return void 0;\n      obj = obj[path[i]];\n    }\n    return length ? obj : void 0;\n  }\n\n  // Get the value of the (deep) property on `path` from `object`.\n  // If any property in `path` does not exist or if the value is\n  // `undefined`, return `defaultValue` instead.\n  // The `path` is normalized through `_.toPath`.\n  function get(object, path, defaultValue) {\n    var value = deepGet(object, toPath(path));\n    return isUndefined(value) ? defaultValue : value;\n  }\n\n  // Shortcut function for checking if an object has a given property directly on\n  // itself (in other words, not on a prototype). Unlike the internal `has`\n  // function, this public version can also traverse nested properties.\n  function has(obj, path) {\n    path = toPath(path);\n    var length = path.length;\n    for (var i = 0; i < length; i++) {\n      var key = path[i];\n      if (!has$1(obj, key)) return false;\n      obj = obj[key];\n    }\n    return !!length;\n  }\n\n  // Keep the identity function around for default iteratees.\n  function identity(value) {\n    return value;\n  }\n\n  // Returns a predicate for checking whether an object has a given set of\n  // `key:value` pairs.\n  function matcher(attrs) {\n    attrs = extendOwn({}, attrs);\n    return function(obj) {\n      return isMatch(obj, attrs);\n    };\n  }\n\n  // Creates a function that, when passed an object, will traverse that object’s\n  // properties down the given `path`, specified as an array of keys or indices.\n  function property(path) {\n    path = toPath(path);\n    return function(obj) {\n      return deepGet(obj, path);\n    };\n  }\n\n  // Internal function that returns an efficient (for current engines) version\n  // of the passed-in callback, to be repeatedly applied in other Underscore\n  // functions.\n  function optimizeCb(func, context, argCount) {\n    if (context === void 0) return func;\n    switch (argCount == null ? 3 : argCount) {\n      case 1: return function(value) {\n        return func.call(context, value);\n      };\n      // The 2-argument case is omitted because we’re not using it.\n      case 3: return function(value, index, collection) {\n        return func.call(context, value, index, collection);\n      };\n      case 4: return function(accumulator, value, index, collection) {\n        return func.call(context, accumulator, value, index, collection);\n      };\n    }\n    return function() {\n      return func.apply(context, arguments);\n    };\n  }\n\n  // An internal function to generate callbacks that can be applied to each\n  // element in a collection, returning the desired result — either `_.identity`,\n  // an arbitrary callback, a property matcher, or a property accessor.\n  function baseIteratee(value, context, argCount) {\n    if (value == null) return identity;\n    if (isFunction$1(value)) return optimizeCb(value, context, argCount);\n    if (isObject(value) && !isArray(value)) return matcher(value);\n    return property(value);\n  }\n\n  // External wrapper for our callback generator. Users may customize\n  // `_.iteratee` if they want additional predicate/iteratee shorthand styles.\n  // This abstraction hides the internal-only `argCount` argument.\n  function iteratee(value, context) {\n    return baseIteratee(value, context, Infinity);\n  }\n  _$1.iteratee = iteratee;\n\n  // The function we call internally to generate a callback. It invokes\n  // `_.iteratee` if overridden, otherwise `baseIteratee`.\n  function cb(value, context, argCount) {\n    if (_$1.iteratee !== iteratee) return _$1.iteratee(value, context);\n    return baseIteratee(value, context, argCount);\n  }\n\n  // Returns the results of applying the `iteratee` to each element of `obj`.\n  // In contrast to `_.map` it returns an object.\n  function mapObject(obj, iteratee, context) {\n    iteratee = cb(iteratee, context);\n    var _keys = keys(obj),\n        length = _keys.length,\n        results = {};\n    for (var index = 0; index < length; index++) {\n      var currentKey = _keys[index];\n      results[currentKey] = iteratee(obj[currentKey], currentKey, obj);\n    }\n    return results;\n  }\n\n  // Predicate-generating function. Often useful outside of Underscore.\n  function noop(){}\n\n  // Generates a function for a given object that returns a given property.\n  function propertyOf(obj) {\n    if (obj == null) return noop;\n    return function(path) {\n      return get(obj, path);\n    };\n  }\n\n  // Run a function **n** times.\n  function times(n, iteratee, context) {\n    var accum = Array(Math.max(0, n));\n    iteratee = optimizeCb(iteratee, context, 1);\n    for (var i = 0; i < n; i++) accum[i] = iteratee(i);\n    return accum;\n  }\n\n  // Return a random integer between `min` and `max` (inclusive).\n  function random(min, max) {\n    if (max == null) {\n      max = min;\n      min = 0;\n    }\n    return min + Math.floor(Math.random() * (max - min + 1));\n  }\n\n  // A (possibly faster) way to get the current timestamp as an integer.\n  var now = Date.now || function() {\n    return new Date().getTime();\n  };\n\n  // Internal helper to generate functions for escaping and unescaping strings\n  // to/from HTML interpolation.\n  function createEscaper(map) {\n    var escaper = function(match) {\n      return map[match];\n    };\n    // Regexes for identifying a key that needs to be escaped.\n    var source = '(?:' + keys(map).join('|') + ')';\n    var testRegexp = RegExp(source);\n    var replaceRegexp = RegExp(source, 'g');\n    return function(string) {\n      string = string == null ? '' : '' + string;\n      return testRegexp.test(string) ? string.replace(replaceRegexp, escaper) : string;\n    };\n  }\n\n  // Internal list of HTML entities for escaping.\n  var escapeMap = {\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;',\n    '\"': '&quot;',\n    \"'\": '&#x27;',\n    '`': '&#x60;'\n  };\n\n  // Function for escaping strings to HTML interpolation.\n  var _escape = createEscaper(escapeMap);\n\n  // Internal list of HTML entities for unescaping.\n  var unescapeMap = invert(escapeMap);\n\n  // Function for unescaping strings from HTML interpolation.\n  var _unescape = createEscaper(unescapeMap);\n\n  // By default, Underscore uses ERB-style template delimiters. Change the\n  // following template settings to use alternative delimiters.\n  var templateSettings = _$1.templateSettings = {\n    evaluate: /<%([\\s\\S]+?)%>/g,\n    interpolate: /<%=([\\s\\S]+?)%>/g,\n    escape: /<%-([\\s\\S]+?)%>/g\n  };\n\n  // When customizing `_.templateSettings`, if you don't want to define an\n  // interpolation, evaluation or escaping regex, we need one that is\n  // guaranteed not to match.\n  var noMatch = /(.)^/;\n\n  // Certain characters need to be escaped so that they can be put into a\n  // string literal.\n  var escapes = {\n    \"'\": \"'\",\n    '\\\\': '\\\\',\n    '\\r': 'r',\n    '\\n': 'n',\n    '\\u2028': 'u2028',\n    '\\u2029': 'u2029'\n  };\n\n  var escapeRegExp = /\\\\|'|\\r|\\n|\\u2028|\\u2029/g;\n\n  function escapeChar(match) {\n    return '\\\\' + escapes[match];\n  }\n\n  // In order to prevent third-party code injection through\n  // `_.templateSettings.variable`, we test it against the following regular\n  // expression. It is intentionally a bit more liberal than just matching valid\n  // identifiers, but still prevents possible loopholes through defaults or\n  // destructuring assignment.\n  var bareIdentifier = /^\\s*(\\w|\\$)+\\s*$/;\n\n  // JavaScript micro-templating, similar to John Resig's implementation.\n  // Underscore templating handles arbitrary delimiters, preserves whitespace,\n  // and correctly escapes quotes within interpolated code.\n  // NB: `oldSettings` only exists for backwards compatibility.\n  function template(text, settings, oldSettings) {\n    if (!settings && oldSettings) settings = oldSettings;\n    settings = defaults({}, settings, _$1.templateSettings);\n\n    // Combine delimiters into one regular expression via alternation.\n    var matcher = RegExp([\n      (settings.escape || noMatch).source,\n      (settings.interpolate || noMatch).source,\n      (settings.evaluate || noMatch).source\n    ].join('|') + '|$', 'g');\n\n    // Compile the template source, escaping string literals appropriately.\n    var index = 0;\n    var source = \"__p+='\";\n    text.replace(matcher, function(match, escape, interpolate, evaluate, offset) {\n      source += text.slice(index, offset).replace(escapeRegExp, escapeChar);\n      index = offset + match.length;\n\n      if (escape) {\n        source += \"'+\\n((__t=(\" + escape + \"))==null?'':_.escape(__t))+\\n'\";\n      } else if (interpolate) {\n        source += \"'+\\n((__t=(\" + interpolate + \"))==null?'':__t)+\\n'\";\n      } else if (evaluate) {\n        source += \"';\\n\" + evaluate + \"\\n__p+='\";\n      }\n\n      // Adobe VMs need the match returned to produce the correct offset.\n      return match;\n    });\n    source += \"';\\n\";\n\n    var argument = settings.variable;\n    if (argument) {\n      // Insure against third-party code injection. (CVE-2021-23358)\n      if (!bareIdentifier.test(argument)) throw new Error(\n        'variable is not a bare identifier: ' + argument\n      );\n    } else {\n      // If a variable is not specified, place data values in local scope.\n      source = 'with(obj||{}){\\n' + source + '}\\n';\n      argument = 'obj';\n    }\n\n    source = \"var __t,__p='',__j=Array.prototype.join,\" +\n      \"print=function(){__p+=__j.call(arguments,'');};\\n\" +\n      source + 'return __p;\\n';\n\n    var render;\n    try {\n      render = new Function(argument, '_', source);\n    } catch (e) {\n      e.source = source;\n      throw e;\n    }\n\n    var template = function(data) {\n      return render.call(this, data, _$1);\n    };\n\n    // Provide the compiled source as a convenience for precompilation.\n    template.source = 'function(' + argument + '){\\n' + source + '}';\n\n    return template;\n  }\n\n  // Traverses the children of `obj` along `path`. If a child is a function, it\n  // is invoked with its parent as context. Returns the value of the final\n  // child, or `fallback` if any child is undefined.\n  function result(obj, path, fallback) {\n    path = toPath(path);\n    var length = path.length;\n    if (!length) {\n      return isFunction$1(fallback) ? fallback.call(obj) : fallback;\n    }\n    for (var i = 0; i < length; i++) {\n      var prop = obj == null ? void 0 : obj[path[i]];\n      if (prop === void 0) {\n        prop = fallback;\n        i = length; // Ensure we don't continue iterating.\n      }\n      obj = isFunction$1(prop) ? prop.call(obj) : prop;\n    }\n    return obj;\n  }\n\n  // Generate a unique integer id (unique within the entire client session).\n  // Useful for temporary DOM ids.\n  var idCounter = 0;\n  function uniqueId(prefix) {\n    var id = ++idCounter + '';\n    return prefix ? prefix + id : id;\n  }\n\n  // Start chaining a wrapped Underscore object.\n  function chain(obj) {\n    var instance = _$1(obj);\n    instance._chain = true;\n    return instance;\n  }\n\n  // Internal function to execute `sourceFunc` bound to `context` with optional\n  // `args`. Determines whether to execute a function as a constructor or as a\n  // normal function.\n  function executeBound(sourceFunc, boundFunc, context, callingContext, args) {\n    if (!(callingContext instanceof boundFunc)) return sourceFunc.apply(context, args);\n    var self = baseCreate(sourceFunc.prototype);\n    var result = sourceFunc.apply(self, args);\n    if (isObject(result)) return result;\n    return self;\n  }\n\n  // Partially apply a function by creating a version that has had some of its\n  // arguments pre-filled, without changing its dynamic `this` context. `_` acts\n  // as a placeholder by default, allowing any combination of arguments to be\n  // pre-filled. Set `_.partial.placeholder` for a custom placeholder argument.\n  var partial = restArguments(function(func, boundArgs) {\n    var placeholder = partial.placeholder;\n    var bound = function() {\n      var position = 0, length = boundArgs.length;\n      var args = Array(length);\n      for (var i = 0; i < length; i++) {\n        args[i] = boundArgs[i] === placeholder ? arguments[position++] : boundArgs[i];\n      }\n      while (position < arguments.length) args.push(arguments[position++]);\n      return executeBound(func, bound, this, this, args);\n    };\n    return bound;\n  });\n\n  partial.placeholder = _$1;\n\n  // Create a function bound to a given object (assigning `this`, and arguments,\n  // optionally).\n  var bind = restArguments(function(func, context, args) {\n    if (!isFunction$1(func)) throw new TypeError('Bind must be called on a function');\n    var bound = restArguments(function(callArgs) {\n      return executeBound(func, bound, context, this, args.concat(callArgs));\n    });\n    return bound;\n  });\n\n  // Internal helper for collection methods to determine whether a collection\n  // should be iterated as an array or as an object.\n  // Related: https://people.mozilla.org/~jorendorff/es6-draft.html#sec-tolength\n  // Avoids a very nasty iOS 8 JIT bug on ARM-64. #2094\n  var isArrayLike = createSizePropertyCheck(getLength);\n\n  // Internal implementation of a recursive `flatten` function.\n  function flatten$1(input, depth, strict, output) {\n    output = output || [];\n    if (!depth && depth !== 0) {\n      depth = Infinity;\n    } else if (depth <= 0) {\n      return output.concat(input);\n    }\n    var idx = output.length;\n    for (var i = 0, length = getLength(input); i < length; i++) {\n      var value = input[i];\n      if (isArrayLike(value) && (isArray(value) || isArguments$1(value))) {\n        // Flatten current level of array or arguments object.\n        if (depth > 1) {\n          flatten$1(value, depth - 1, strict, output);\n          idx = output.length;\n        } else {\n          var j = 0, len = value.length;\n          while (j < len) output[idx++] = value[j++];\n        }\n      } else if (!strict) {\n        output[idx++] = value;\n      }\n    }\n    return output;\n  }\n\n  // Bind a number of an object's methods to that object. Remaining arguments\n  // are the method names to be bound. Useful for ensuring that all callbacks\n  // defined on an object belong to it.\n  var bindAll = restArguments(function(obj, keys) {\n    keys = flatten$1(keys, false, false);\n    var index = keys.length;\n    if (index < 1) throw new Error('bindAll must be passed function names');\n    while (index--) {\n      var key = keys[index];\n      obj[key] = bind(obj[key], obj);\n    }\n    return obj;\n  });\n\n  // Memoize an expensive function by storing its results.\n  function memoize(func, hasher) {\n    var memoize = function(key) {\n      var cache = memoize.cache;\n      var address = '' + (hasher ? hasher.apply(this, arguments) : key);\n      if (!has$1(cache, address)) cache[address] = func.apply(this, arguments);\n      return cache[address];\n    };\n    memoize.cache = {};\n    return memoize;\n  }\n\n  // Delays a function for the given number of milliseconds, and then calls\n  // it with the arguments supplied.\n  var delay = restArguments(function(func, wait, args) {\n    return setTimeout(function() {\n      return func.apply(null, args);\n    }, wait);\n  });\n\n  // Defers a function, scheduling it to run after the current call stack has\n  // cleared.\n  var defer = partial(delay, _$1, 1);\n\n  // Returns a function, that, when invoked, will only be triggered at most once\n  // during a given window of time. Normally, the throttled function will run\n  // as much as it can, without ever going more than once per `wait` duration;\n  // but if you'd like to disable the execution on the leading edge, pass\n  // `{leading: false}`. To disable execution on the trailing edge, ditto.\n  function throttle(func, wait, options) {\n    var timeout, context, args, result;\n    var previous = 0;\n    if (!options) options = {};\n\n    var later = function() {\n      previous = options.leading === false ? 0 : now();\n      timeout = null;\n      result = func.apply(context, args);\n      if (!timeout) context = args = null;\n    };\n\n    var throttled = function() {\n      var _now = now();\n      if (!previous && options.leading === false) previous = _now;\n      var remaining = wait - (_now - previous);\n      context = this;\n      args = arguments;\n      if (remaining <= 0 || remaining > wait) {\n        if (timeout) {\n          clearTimeout(timeout);\n          timeout = null;\n        }\n        previous = _now;\n        result = func.apply(context, args);\n        if (!timeout) context = args = null;\n      } else if (!timeout && options.trailing !== false) {\n        timeout = setTimeout(later, remaining);\n      }\n      return result;\n    };\n\n    throttled.cancel = function() {\n      clearTimeout(timeout);\n      previous = 0;\n      timeout = context = args = null;\n    };\n\n    return throttled;\n  }\n\n  // When a sequence of calls of the returned function ends, the argument\n  // function is triggered. The end of a sequence is defined by the `wait`\n  // parameter. If `immediate` is passed, the argument function will be\n  // triggered at the beginning of the sequence instead of at the end.\n  function debounce(func, wait, immediate) {\n    var timeout, previous, args, result, context;\n\n    var later = function() {\n      var passed = now() - previous;\n      if (wait > passed) {\n        timeout = setTimeout(later, wait - passed);\n      } else {\n        timeout = null;\n        if (!immediate) result = func.apply(context, args);\n        // This check is needed because `func` can recursively invoke `debounced`.\n        if (!timeout) args = context = null;\n      }\n    };\n\n    var debounced = restArguments(function(_args) {\n      context = this;\n      args = _args;\n      previous = now();\n      if (!timeout) {\n        timeout = setTimeout(later, wait);\n        if (immediate) result = func.apply(context, args);\n      }\n      return result;\n    });\n\n    debounced.cancel = function() {\n      clearTimeout(timeout);\n      timeout = args = context = null;\n    };\n\n    return debounced;\n  }\n\n  // Returns the first function passed as an argument to the second,\n  // allowing you to adjust arguments, run code before and after, and\n  // conditionally execute the original function.\n  function wrap(func, wrapper) {\n    return partial(wrapper, func);\n  }\n\n  // Returns a negated version of the passed-in predicate.\n  function negate(predicate) {\n    return function() {\n      return !predicate.apply(this, arguments);\n    };\n  }\n\n  // Returns a function that is the composition of a list of functions, each\n  // consuming the return value of the function that follows.\n  function compose() {\n    var args = arguments;\n    var start = args.length - 1;\n    return function() {\n      var i = start;\n      var result = args[start].apply(this, arguments);\n      while (i--) result = args[i].call(this, result);\n      return result;\n    };\n  }\n\n  // Returns a function that will only be executed on and after the Nth call.\n  function after(times, func) {\n    return function() {\n      if (--times < 1) {\n        return func.apply(this, arguments);\n      }\n    };\n  }\n\n  // Returns a function that will only be executed up to (but not including) the\n  // Nth call.\n  function before(times, func) {\n    var memo;\n    return function() {\n      if (--times > 0) {\n        memo = func.apply(this, arguments);\n      }\n      if (times <= 1) func = null;\n      return memo;\n    };\n  }\n\n  // Returns a function that will be executed at most one time, no matter how\n  // often you call it. Useful for lazy initialization.\n  var once = partial(before, 2);\n\n  // Returns the first key on an object that passes a truth test.\n  function findKey(obj, predicate, context) {\n    predicate = cb(predicate, context);\n    var _keys = keys(obj), key;\n    for (var i = 0, length = _keys.length; i < length; i++) {\n      key = _keys[i];\n      if (predicate(obj[key], key, obj)) return key;\n    }\n  }\n\n  // Internal function to generate `_.findIndex` and `_.findLastIndex`.\n  function createPredicateIndexFinder(dir) {\n    return function(array, predicate, context) {\n      predicate = cb(predicate, context);\n      var length = getLength(array);\n      var index = dir > 0 ? 0 : length - 1;\n      for (; index >= 0 && index < length; index += dir) {\n        if (predicate(array[index], index, array)) return index;\n      }\n      return -1;\n    };\n  }\n\n  // Returns the first index on an array-like that passes a truth test.\n  var findIndex = createPredicateIndexFinder(1);\n\n  // Returns the last index on an array-like that passes a truth test.\n  var findLastIndex = createPredicateIndexFinder(-1);\n\n  // Use a comparator function to figure out the smallest index at which\n  // an object should be inserted so as to maintain order. Uses binary search.\n  function sortedIndex(array, obj, iteratee, context) {\n    iteratee = cb(iteratee, context, 1);\n    var value = iteratee(obj);\n    var low = 0, high = getLength(array);\n    while (low < high) {\n      var mid = Math.floor((low + high) / 2);\n      if (iteratee(array[mid]) < value) low = mid + 1; else high = mid;\n    }\n    return low;\n  }\n\n  // Internal function to generate the `_.indexOf` and `_.lastIndexOf` functions.\n  function createIndexFinder(dir, predicateFind, sortedIndex) {\n    return function(array, item, idx) {\n      var i = 0, length = getLength(array);\n      if (typeof idx == 'number') {\n        if (dir > 0) {\n          i = idx >= 0 ? idx : Math.max(idx + length, i);\n        } else {\n          length = idx >= 0 ? Math.min(idx + 1, length) : idx + length + 1;\n        }\n      } else if (sortedIndex && idx && length) {\n        idx = sortedIndex(array, item);\n        return array[idx] === item ? idx : -1;\n      }\n      if (item !== item) {\n        idx = predicateFind(slice.call(array, i, length), isNaN$1);\n        return idx >= 0 ? idx + i : -1;\n      }\n      for (idx = dir > 0 ? i : length - 1; idx >= 0 && idx < length; idx += dir) {\n        if (array[idx] === item) return idx;\n      }\n      return -1;\n    };\n  }\n\n  // Return the position of the first occurrence of an item in an array,\n  // or -1 if the item is not included in the array.\n  // If the array is large and already in sort order, pass `true`\n  // for **isSorted** to use binary search.\n  var indexOf = createIndexFinder(1, findIndex, sortedIndex);\n\n  // Return the position of the last occurrence of an item in an array,\n  // or -1 if the item is not included in the array.\n  var lastIndexOf = createIndexFinder(-1, findLastIndex);\n\n  // Return the first value which passes a truth test.\n  function find(obj, predicate, context) {\n    var keyFinder = isArrayLike(obj) ? findIndex : findKey;\n    var key = keyFinder(obj, predicate, context);\n    if (key !== void 0 && key !== -1) return obj[key];\n  }\n\n  // Convenience version of a common use case of `_.find`: getting the first\n  // object containing specific `key:value` pairs.\n  function findWhere(obj, attrs) {\n    return find(obj, matcher(attrs));\n  }\n\n  // The cornerstone for collection functions, an `each`\n  // implementation, aka `forEach`.\n  // Handles raw objects in addition to array-likes. Treats all\n  // sparse array-likes as if they were dense.\n  function each(obj, iteratee, context) {\n    iteratee = optimizeCb(iteratee, context);\n    var i, length;\n    if (isArrayLike(obj)) {\n      for (i = 0, length = obj.length; i < length; i++) {\n        iteratee(obj[i], i, obj);\n      }\n    } else {\n      var _keys = keys(obj);\n      for (i = 0, length = _keys.length; i < length; i++) {\n        iteratee(obj[_keys[i]], _keys[i], obj);\n      }\n    }\n    return obj;\n  }\n\n  // Return the results of applying the iteratee to each element.\n  function map(obj, iteratee, context) {\n    iteratee = cb(iteratee, context);\n    var _keys = !isArrayLike(obj) && keys(obj),\n        length = (_keys || obj).length,\n        results = Array(length);\n    for (var index = 0; index < length; index++) {\n      var currentKey = _keys ? _keys[index] : index;\n      results[index] = iteratee(obj[currentKey], currentKey, obj);\n    }\n    return results;\n  }\n\n  // Internal helper to create a reducing function, iterating left or right.\n  function createReduce(dir) {\n    // Wrap code that reassigns argument variables in a separate function than\n    // the one that accesses `arguments.length` to avoid a perf hit. (#1991)\n    var reducer = function(obj, iteratee, memo, initial) {\n      var _keys = !isArrayLike(obj) && keys(obj),\n          length = (_keys || obj).length,\n          index = dir > 0 ? 0 : length - 1;\n      if (!initial) {\n        memo = obj[_keys ? _keys[index] : index];\n        index += dir;\n      }\n      for (; index >= 0 && index < length; index += dir) {\n        var currentKey = _keys ? _keys[index] : index;\n        memo = iteratee(memo, obj[currentKey], currentKey, obj);\n      }\n      return memo;\n    };\n\n    return function(obj, iteratee, memo, context) {\n      var initial = arguments.length >= 3;\n      return reducer(obj, optimizeCb(iteratee, context, 4), memo, initial);\n    };\n  }\n\n  // **Reduce** builds up a single result from a list of values, aka `inject`,\n  // or `foldl`.\n  var reduce = createReduce(1);\n\n  // The right-associative version of reduce, also known as `foldr`.\n  var reduceRight = createReduce(-1);\n\n  // Return all the elements that pass a truth test.\n  function filter(obj, predicate, context) {\n    var results = [];\n    predicate = cb(predicate, context);\n    each(obj, function(value, index, list) {\n      if (predicate(value, index, list)) results.push(value);\n    });\n    return results;\n  }\n\n  // Return all the elements for which a truth test fails.\n  function reject(obj, predicate, context) {\n    return filter(obj, negate(cb(predicate)), context);\n  }\n\n  // Determine whether all of the elements pass a truth test.\n  function every(obj, predicate, context) {\n    predicate = cb(predicate, context);\n    var _keys = !isArrayLike(obj) && keys(obj),\n        length = (_keys || obj).length;\n    for (var index = 0; index < length; index++) {\n      var currentKey = _keys ? _keys[index] : index;\n      if (!predicate(obj[currentKey], currentKey, obj)) return false;\n    }\n    return true;\n  }\n\n  // Determine if at least one element in the object passes a truth test.\n  function some(obj, predicate, context) {\n    predicate = cb(predicate, context);\n    var _keys = !isArrayLike(obj) && keys(obj),\n        length = (_keys || obj).length;\n    for (var index = 0; index < length; index++) {\n      var currentKey = _keys ? _keys[index] : index;\n      if (predicate(obj[currentKey], currentKey, obj)) return true;\n    }\n    return false;\n  }\n\n  // Determine if the array or object contains a given item (using `===`).\n  function contains(obj, item, fromIndex, guard) {\n    if (!isArrayLike(obj)) obj = values(obj);\n    if (typeof fromIndex != 'number' || guard) fromIndex = 0;\n    return indexOf(obj, item, fromIndex) >= 0;\n  }\n\n  // Invoke a method (with arguments) on every item in a collection.\n  var invoke = restArguments(function(obj, path, args) {\n    var contextPath, func;\n    if (isFunction$1(path)) {\n      func = path;\n    } else {\n      path = toPath(path);\n      contextPath = path.slice(0, -1);\n      path = path[path.length - 1];\n    }\n    return map(obj, function(context) {\n      var method = func;\n      if (!method) {\n        if (contextPath && contextPath.length) {\n          context = deepGet(context, contextPath);\n        }\n        if (context == null) return void 0;\n        method = context[path];\n      }\n      return method == null ? method : method.apply(context, args);\n    });\n  });\n\n  // Convenience version of a common use case of `_.map`: fetching a property.\n  function pluck(obj, key) {\n    return map(obj, property(key));\n  }\n\n  // Convenience version of a common use case of `_.filter`: selecting only\n  // objects containing specific `key:value` pairs.\n  function where(obj, attrs) {\n    return filter(obj, matcher(attrs));\n  }\n\n  // Return the maximum element (or element-based computation).\n  function max(obj, iteratee, context) {\n    var result = -Infinity, lastComputed = -Infinity,\n        value, computed;\n    if (iteratee == null || (typeof iteratee == 'number' && typeof obj[0] != 'object' && obj != null)) {\n      obj = isArrayLike(obj) ? obj : values(obj);\n      for (var i = 0, length = obj.length; i < length; i++) {\n        value = obj[i];\n        if (value != null && value > result) {\n          result = value;\n        }\n      }\n    } else {\n      iteratee = cb(iteratee, context);\n      each(obj, function(v, index, list) {\n        computed = iteratee(v, index, list);\n        if (computed > lastComputed || (computed === -Infinity && result === -Infinity)) {\n          result = v;\n          lastComputed = computed;\n        }\n      });\n    }\n    return result;\n  }\n\n  // Return the minimum element (or element-based computation).\n  function min(obj, iteratee, context) {\n    var result = Infinity, lastComputed = Infinity,\n        value, computed;\n    if (iteratee == null || (typeof iteratee == 'number' && typeof obj[0] != 'object' && obj != null)) {\n      obj = isArrayLike(obj) ? obj : values(obj);\n      for (var i = 0, length = obj.length; i < length; i++) {\n        value = obj[i];\n        if (value != null && value < result) {\n          result = value;\n        }\n      }\n    } else {\n      iteratee = cb(iteratee, context);\n      each(obj, function(v, index, list) {\n        computed = iteratee(v, index, list);\n        if (computed < lastComputed || (computed === Infinity && result === Infinity)) {\n          result = v;\n          lastComputed = computed;\n        }\n      });\n    }\n    return result;\n  }\n\n  // Safely create a real, live array from anything iterable.\n  var reStrSymbol = /[^\\ud800-\\udfff]|[\\ud800-\\udbff][\\udc00-\\udfff]|[\\ud800-\\udfff]/g;\n  function toArray(obj) {\n    if (!obj) return [];\n    if (isArray(obj)) return slice.call(obj);\n    if (isString(obj)) {\n      // Keep surrogate pair characters together.\n      return obj.match(reStrSymbol);\n    }\n    if (isArrayLike(obj)) return map(obj, identity);\n    return values(obj);\n  }\n\n  // Sample **n** random values from a collection using the modern version of the\n  // [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher–Yates_shuffle).\n  // If **n** is not specified, returns a single random element.\n  // The internal `guard` argument allows it to work with `_.map`.\n  function sample(obj, n, guard) {\n    if (n == null || guard) {\n      if (!isArrayLike(obj)) obj = values(obj);\n      return obj[random(obj.length - 1)];\n    }\n    var sample = toArray(obj);\n    var length = getLength(sample);\n    n = Math.max(Math.min(n, length), 0);\n    var last = length - 1;\n    for (var index = 0; index < n; index++) {\n      var rand = random(index, last);\n      var temp = sample[index];\n      sample[index] = sample[rand];\n      sample[rand] = temp;\n    }\n    return sample.slice(0, n);\n  }\n\n  // Shuffle a collection.\n  function shuffle(obj) {\n    return sample(obj, Infinity);\n  }\n\n  // Sort the object's values by a criterion produced by an iteratee.\n  function sortBy(obj, iteratee, context) {\n    var index = 0;\n    iteratee = cb(iteratee, context);\n    return pluck(map(obj, function(value, key, list) {\n      return {\n        value: value,\n        index: index++,\n        criteria: iteratee(value, key, list)\n      };\n    }).sort(function(left, right) {\n      var a = left.criteria;\n      var b = right.criteria;\n      if (a !== b) {\n        if (a > b || a === void 0) return 1;\n        if (a < b || b === void 0) return -1;\n      }\n      return left.index - right.index;\n    }), 'value');\n  }\n\n  // An internal function used for aggregate \"group by\" operations.\n  function group(behavior, partition) {\n    return function(obj, iteratee, context) {\n      var result = partition ? [[], []] : {};\n      iteratee = cb(iteratee, context);\n      each(obj, function(value, index) {\n        var key = iteratee(value, index, obj);\n        behavior(result, value, key);\n      });\n      return result;\n    };\n  }\n\n  // Groups the object's values by a criterion. Pass either a string attribute\n  // to group by, or a function that returns the criterion.\n  var groupBy = group(function(result, value, key) {\n    if (has$1(result, key)) result[key].push(value); else result[key] = [value];\n  });\n\n  // Indexes the object's values by a criterion, similar to `_.groupBy`, but for\n  // when you know that your index values will be unique.\n  var indexBy = group(function(result, value, key) {\n    result[key] = value;\n  });\n\n  // Counts instances of an object that group by a certain criterion. Pass\n  // either a string attribute to count by, or a function that returns the\n  // criterion.\n  var countBy = group(function(result, value, key) {\n    if (has$1(result, key)) result[key]++; else result[key] = 1;\n  });\n\n  // Split a collection into two arrays: one whose elements all pass the given\n  // truth test, and one whose elements all do not pass the truth test.\n  var partition = group(function(result, value, pass) {\n    result[pass ? 0 : 1].push(value);\n  }, true);\n\n  // Return the number of elements in a collection.\n  function size(obj) {\n    if (obj == null) return 0;\n    return isArrayLike(obj) ? obj.length : keys(obj).length;\n  }\n\n  // Internal `_.pick` helper function to determine whether `key` is an enumerable\n  // property name of `obj`.\n  function keyInObj(value, key, obj) {\n    return key in obj;\n  }\n\n  // Return a copy of the object only containing the allowed properties.\n  var pick = restArguments(function(obj, keys) {\n    var result = {}, iteratee = keys[0];\n    if (obj == null) return result;\n    if (isFunction$1(iteratee)) {\n      if (keys.length > 1) iteratee = optimizeCb(iteratee, keys[1]);\n      keys = allKeys(obj);\n    } else {\n      iteratee = keyInObj;\n      keys = flatten$1(keys, false, false);\n      obj = Object(obj);\n    }\n    for (var i = 0, length = keys.length; i < length; i++) {\n      var key = keys[i];\n      var value = obj[key];\n      if (iteratee(value, key, obj)) result[key] = value;\n    }\n    return result;\n  });\n\n  // Return a copy of the object without the disallowed properties.\n  var omit = restArguments(function(obj, keys) {\n    var iteratee = keys[0], context;\n    if (isFunction$1(iteratee)) {\n      iteratee = negate(iteratee);\n      if (keys.length > 1) context = keys[1];\n    } else {\n      keys = map(flatten$1(keys, false, false), String);\n      iteratee = function(value, key) {\n        return !contains(keys, key);\n      };\n    }\n    return pick(obj, iteratee, context);\n  });\n\n  // Returns everything but the last entry of the array. Especially useful on\n  // the arguments object. Passing **n** will return all the values in\n  // the array, excluding the last N.\n  function initial(array, n, guard) {\n    return slice.call(array, 0, Math.max(0, array.length - (n == null || guard ? 1 : n)));\n  }\n\n  // Get the first element of an array. Passing **n** will return the first N\n  // values in the array. The **guard** check allows it to work with `_.map`.\n  function first(array, n, guard) {\n    if (array == null || array.length < 1) return n == null || guard ? void 0 : [];\n    if (n == null || guard) return array[0];\n    return initial(array, array.length - n);\n  }\n\n  // Returns everything but the first entry of the `array`. Especially useful on\n  // the `arguments` object. Passing an **n** will return the rest N values in the\n  // `array`.\n  function rest(array, n, guard) {\n    return slice.call(array, n == null || guard ? 1 : n);\n  }\n\n  // Get the last element of an array. Passing **n** will return the last N\n  // values in the array.\n  function last(array, n, guard) {\n    if (array == null || array.length < 1) return n == null || guard ? void 0 : [];\n    if (n == null || guard) return array[array.length - 1];\n    return rest(array, Math.max(0, array.length - n));\n  }\n\n  // Trim out all falsy values from an array.\n  function compact(array) {\n    return filter(array, Boolean);\n  }\n\n  // Flatten out an array, either recursively (by default), or up to `depth`.\n  // Passing `true` or `false` as `depth` means `1` or `Infinity`, respectively.\n  function flatten(array, depth) {\n    return flatten$1(array, depth, false);\n  }\n\n  // Take the difference between one array and a number of other arrays.\n  // Only the elements present in just the first array will remain.\n  var difference = restArguments(function(array, rest) {\n    rest = flatten$1(rest, true, true);\n    return filter(array, function(value){\n      return !contains(rest, value);\n    });\n  });\n\n  // Return a version of the array that does not contain the specified value(s).\n  var without = restArguments(function(array, otherArrays) {\n    return difference(array, otherArrays);\n  });\n\n  // Produce a duplicate-free version of the array. If the array has already\n  // been sorted, you have the option of using a faster algorithm.\n  // The faster algorithm will not work with an iteratee if the iteratee\n  // is not a one-to-one function, so providing an iteratee will disable\n  // the faster algorithm.\n  function uniq(array, isSorted, iteratee, context) {\n    if (!isBoolean(isSorted)) {\n      context = iteratee;\n      iteratee = isSorted;\n      isSorted = false;\n    }\n    if (iteratee != null) iteratee = cb(iteratee, context);\n    var result = [];\n    var seen = [];\n    for (var i = 0, length = getLength(array); i < length; i++) {\n      var value = array[i],\n          computed = iteratee ? iteratee(value, i, array) : value;\n      if (isSorted && !iteratee) {\n        if (!i || seen !== computed) result.push(value);\n        seen = computed;\n      } else if (iteratee) {\n        if (!contains(seen, computed)) {\n          seen.push(computed);\n          result.push(value);\n        }\n      } else if (!contains(result, value)) {\n        result.push(value);\n      }\n    }\n    return result;\n  }\n\n  // Produce an array that contains the union: each distinct element from all of\n  // the passed-in arrays.\n  var union = restArguments(function(arrays) {\n    return uniq(flatten$1(arrays, true, true));\n  });\n\n  // Produce an array that contains every item shared between all the\n  // passed-in arrays.\n  function intersection(array) {\n    var result = [];\n    var argsLength = arguments.length;\n    for (var i = 0, length = getLength(array); i < length; i++) {\n      var item = array[i];\n      if (contains(result, item)) continue;\n      var j;\n      for (j = 1; j < argsLength; j++) {\n        if (!contains(arguments[j], item)) break;\n      }\n      if (j === argsLength) result.push(item);\n    }\n    return result;\n  }\n\n  // Complement of zip. Unzip accepts an array of arrays and groups\n  // each array's elements on shared indices.\n  function unzip(array) {\n    var length = (array && max(array, getLength).length) || 0;\n    var result = Array(length);\n\n    for (var index = 0; index < length; index++) {\n      result[index] = pluck(array, index);\n    }\n    return result;\n  }\n\n  // Zip together multiple lists into a single array -- elements that share\n  // an index go together.\n  var zip = restArguments(unzip);\n\n  // Converts lists into objects. Pass either a single array of `[key, value]`\n  // pairs, or two parallel arrays of the same length -- one of keys, and one of\n  // the corresponding values. Passing by pairs is the reverse of `_.pairs`.\n  function object(list, values) {\n    var result = {};\n    for (var i = 0, length = getLength(list); i < length; i++) {\n      if (values) {\n        result[list[i]] = values[i];\n      } else {\n        result[list[i][0]] = list[i][1];\n      }\n    }\n    return result;\n  }\n\n  // Generate an integer Array containing an arithmetic progression. A port of\n  // the native Python `range()` function. See\n  // [the Python documentation](https://docs.python.org/library/functions.html#range).\n  function range(start, stop, step) {\n    if (stop == null) {\n      stop = start || 0;\n      start = 0;\n    }\n    if (!step) {\n      step = stop < start ? -1 : 1;\n    }\n\n    var length = Math.max(Math.ceil((stop - start) / step), 0);\n    var range = Array(length);\n\n    for (var idx = 0; idx < length; idx++, start += step) {\n      range[idx] = start;\n    }\n\n    return range;\n  }\n\n  // Chunk a single array into multiple arrays, each containing `count` or fewer\n  // items.\n  function chunk(array, count) {\n    if (count == null || count < 1) return [];\n    var result = [];\n    var i = 0, length = array.length;\n    while (i < length) {\n      result.push(slice.call(array, i, i += count));\n    }\n    return result;\n  }\n\n  // Helper function to continue chaining intermediate results.\n  function chainResult(instance, obj) {\n    return instance._chain ? _$1(obj).chain() : obj;\n  }\n\n  // Add your own custom functions to the Underscore object.\n  function mixin(obj) {\n    each(functions(obj), function(name) {\n      var func = _$1[name] = obj[name];\n      _$1.prototype[name] = function() {\n        var args = [this._wrapped];\n        push.apply(args, arguments);\n        return chainResult(this, func.apply(_$1, args));\n      };\n    });\n    return _$1;\n  }\n\n  // Add all mutator `Array` functions to the wrapper.\n  each(['pop', 'push', 'reverse', 'shift', 'sort', 'splice', 'unshift'], function(name) {\n    var method = ArrayProto[name];\n    _$1.prototype[name] = function() {\n      var obj = this._wrapped;\n      if (obj != null) {\n        method.apply(obj, arguments);\n        if ((name === 'shift' || name === 'splice') && obj.length === 0) {\n          delete obj[0];\n        }\n      }\n      return chainResult(this, obj);\n    };\n  });\n\n  // Add all accessor `Array` functions to the wrapper.\n  each(['concat', 'join', 'slice'], function(name) {\n    var method = ArrayProto[name];\n    _$1.prototype[name] = function() {\n      var obj = this._wrapped;\n      if (obj != null) obj = method.apply(obj, arguments);\n      return chainResult(this, obj);\n    };\n  });\n\n  // Named Exports\n\n  var allExports = {\n    __proto__: null,\n    VERSION: VERSION,\n    restArguments: restArguments,\n    isObject: isObject,\n    isNull: isNull,\n    isUndefined: isUndefined,\n    isBoolean: isBoolean,\n    isElement: isElement,\n    isString: isString,\n    isNumber: isNumber,\n    isDate: isDate,\n    isRegExp: isRegExp,\n    isError: isError,\n    isSymbol: isSymbol,\n    isArrayBuffer: isArrayBuffer,\n    isDataView: isDataView$1,\n    isArray: isArray,\n    isFunction: isFunction$1,\n    isArguments: isArguments$1,\n    isFinite: isFinite$1,\n    isNaN: isNaN$1,\n    isTypedArray: isTypedArray$1,\n    isEmpty: isEmpty,\n    isMatch: isMatch,\n    isEqual: isEqual,\n    isMap: isMap,\n    isWeakMap: isWeakMap,\n    isSet: isSet,\n    isWeakSet: isWeakSet,\n    keys: keys,\n    allKeys: allKeys,\n    values: values,\n    pairs: pairs,\n    invert: invert,\n    functions: functions,\n    methods: functions,\n    extend: extend,\n    extendOwn: extendOwn,\n    assign: extendOwn,\n    defaults: defaults,\n    create: create,\n    clone: clone,\n    tap: tap,\n    get: get,\n    has: has,\n    mapObject: mapObject,\n    identity: identity,\n    constant: constant,\n    noop: noop,\n    toPath: toPath$1,\n    property: property,\n    propertyOf: propertyOf,\n    matcher: matcher,\n    matches: matcher,\n    times: times,\n    random: random,\n    now: now,\n    escape: _escape,\n    unescape: _unescape,\n    templateSettings: templateSettings,\n    template: template,\n    result: result,\n    uniqueId: uniqueId,\n    chain: chain,\n    iteratee: iteratee,\n    partial: partial,\n    bind: bind,\n    bindAll: bindAll,\n    memoize: memoize,\n    delay: delay,\n    defer: defer,\n    throttle: throttle,\n    debounce: debounce,\n    wrap: wrap,\n    negate: negate,\n    compose: compose,\n    after: after,\n    before: before,\n    once: once,\n    findKey: findKey,\n    findIndex: findIndex,\n    findLastIndex: findLastIndex,\n    sortedIndex: sortedIndex,\n    indexOf: indexOf,\n    lastIndexOf: lastIndexOf,\n    find: find,\n    detect: find,\n    findWhere: findWhere,\n    each: each,\n    forEach: each,\n    map: map,\n    collect: map,\n    reduce: reduce,\n    foldl: reduce,\n    inject: reduce,\n    reduceRight: reduceRight,\n    foldr: reduceRight,\n    filter: filter,\n    select: filter,\n    reject: reject,\n    every: every,\n    all: every,\n    some: some,\n    any: some,\n    contains: contains,\n    includes: contains,\n    include: contains,\n    invoke: invoke,\n    pluck: pluck,\n    where: where,\n    max: max,\n    min: min,\n    shuffle: shuffle,\n    sample: sample,\n    sortBy: sortBy,\n    groupBy: groupBy,\n    indexBy: indexBy,\n    countBy: countBy,\n    partition: partition,\n    toArray: toArray,\n    size: size,\n    pick: pick,\n    omit: omit,\n    first: first,\n    head: first,\n    take: first,\n    initial: initial,\n    last: last,\n    rest: rest,\n    tail: rest,\n    drop: rest,\n    compact: compact,\n    flatten: flatten,\n    without: without,\n    uniq: uniq,\n    unique: uniq,\n    union: union,\n    intersection: intersection,\n    difference: difference,\n    unzip: unzip,\n    transpose: unzip,\n    zip: zip,\n    object: object,\n    range: range,\n    chunk: chunk,\n    mixin: mixin,\n    'default': _$1\n  };\n\n  // Default Export\n\n  // Add all of the Underscore functions to the wrapper object.\n  var _ = mixin(allExports);\n  // Legacy Node.js API.\n  _._ = _;\n\n  return _;\n\n})));\n//# sourceMappingURL=underscore-umd.js.map\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}