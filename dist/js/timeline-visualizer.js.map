{"version":3,"sources":["node_modules/browser-pack/_prelude.js","dist/index.js","dist/lib/timelineVisualizer.js","node_modules/events/events.js","node_modules/lodash.isequal/index.js","node_modules/superfly-timeline/dist/api/enums.js","node_modules/superfly-timeline/dist/index.js","node_modules/superfly-timeline/dist/lib.js","node_modules/superfly-timeline/dist/resolver/common.js","node_modules/superfly-timeline/dist/resolver/expression.js","node_modules/superfly-timeline/dist/resolver/resolver.js","node_modules/superfly-timeline/dist/resolver/state.js","node_modules/superfly-timeline/dist/resolver/validate.js","node_modules/tslib/tslib.js","node_modules/underscore/underscore.js"],"names":[],"mappingshCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AC3gxzdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrrkvbhnfile":"timeline-visualizer.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst tslib_1 = require(\"tslib\");\r\ntslib_1.__exportStar(require(\"./lib/timelineVisualizer\"), exports);\r\n//# sourceMappingURL=index.js.map","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst isEqual = require(\"lodash.isequal\");\r\nconst superfly_timeline_1 = require(\"superfly-timeline\");\r\nconst events_1 = require(\"events\");\r\n/** Step size/ time step. */\r\nconst DEFAULT_STEP_SIZE = 1;\r\n/** Width of label column. */\r\nconst LABEL_WIDTH_OF_TIMELINE = 0.25;\r\n/** Default zoom */\r\nconst DEFAULT_ZOOM_VALUE = 100;\r\n/** Factor to zoom by */\r\nconst ZOOM_FACTOR = 1.001;\r\n/** Factor to pan by (pan = PAN_FACTOR * STEP_SIZE) */\r\nconst PAN_FACTOR = 10;\r\n/** Maximum layer height */\r\nconst MAX_LAYER_HEIGHT = 60;\r\n/** Amount to move playhead per second. */\r\nconst DEFAULT_PLAYHEAD_SPEED = 1;\r\n/** BEGIN STYLING VALUES */\r\n/** Timeline background color. */\r\nconst COLOR_BACKGROUND = '#333333';\r\n/** Layer label background color. */\r\nconst COLOR_LABEL_BACKGROUND = '#666666';\r\n/** Color of the ruler lines */\r\nconst RULER_LINE_COLOR = '#999999';\r\n/** Width of the ruler lines */\r\nconst RULER_LINE_WIDTH = 1;\r\n/** Playhead color. */\r\nconst COLOR_PLAYHEAD = 'rgba(255, 0, 0, 0.5)';\r\n/** Playhead thickness. */\r\nconst THICKNESS_PLAYHEAD = 5;\r\n/** Color of line separating timeline rows. */\r\nconst COLOR_LINE = 'black';\r\n/** Height of line separating rows. */\r\nconst THICKNESS_LINE = 1;\r\n/** Text properties. */\r\nconst TEXT_FONT_FAMILY = 'Calibri';\r\nconst TEXT_FONT_SIZE = 16;\r\nconst TEXT_COLOR = 'white';\r\n/** Timeline object properties. */\r\nconst COLOR_TIMELINE_OBJECT_FILL = 'rgb(22, 102, 247, 0.75)';\r\nconst COLOR_TIMELINE_OBJECT_BORDER = 'rgba(232, 240, 255, 0.85)';\r\nconst THICKNESS_TIMELINE_OBJECT_BORDER = 1;\r\n/** Timeline object height as a proportion of the row height. */\r\nconst TIMELINE_OBJECT_HEIGHT = 1;\r\n/** END STYLING VALUES */\r\n/** BEGIN CONSTANTS FOR STATE MANAGEMENT */\r\nconst MOUSEIN = 0;\r\nconst MOUSEOUT = 1;\r\nclass TimelineVisualizer extends events_1.EventEmitter {\r\n    /**\r\n     * @param {string} canvasId The ID of the canvas object to draw within.\r\n     */\r\n    constructor(canvasId, options = {}) {\r\n        super();\r\n        // Step size.\r\n        this.stepSize = DEFAULT_STEP_SIZE;\r\n        /** @private @readonly Proportion of the canvas to be used for the layer labels column. */\r\n        this._layerLabelWidthProportionOfCanvas = LABEL_WIDTH_OF_TIMELINE;\r\n        /** Layers on timeline. */\r\n        this._layerLabels = {};\r\n        /** State of the timeline. */\r\n        this._timelineState = {};\r\n        /** Map of objects for determining hovered object */\r\n        this._hoveredObjectMap = {};\r\n        /** Start time of the current view. Defines the objects within view on the timeline [time] */\r\n        this._viewStartTime = 0;\r\n        /** Range of the current view [time] */\r\n        // private _viewTimeRange: number = 1\r\n        // private _drawTimeEnd: number\r\n        /** Store whether the mouse is held down, for scrolling. */\r\n        this._mouseDown = false;\r\n        /** Current zoom amount. */\r\n        this._timelineZoom = DEFAULT_ZOOM_VALUE;\r\n        /** Whether or not the playhead should move. */\r\n        this._playHeadPlaying = false;\r\n        /** Speed of the playhead [units / second] */\r\n        this._playSpeed = DEFAULT_PLAYHEAD_SPEED;\r\n        /** The current time position of the playhead. */\r\n        this._playHeadTime = 0;\r\n        /** The last time updateDraw() did a draw. */\r\n        this._updateDrawLastTime = 0;\r\n        /** Whether the mouse last moved over an object or out. */\r\n        this._lastHoverAction = MOUSEOUT;\r\n        /** Name of object that was last hovered over. */\r\n        this._lastHoveredHash = '';\r\n        /** If the visualizer automatically should re-resolve the timeline when navigating the viewport */\r\n        this._timelineResolveAuto = false;\r\n        /** At what time the timeline was resolved [time] */\r\n        this._timelineResolveStart = 0;\r\n        this._timelineResolveEnd = 0;\r\n        this._timelineResolveZoom = 1;\r\n        this._timelineResolveCount = 100;\r\n        this._timelineResolveCountAdjust = 1;\r\n        /** How much extra (outside the current viewport) the timeline should be resolved to [ratio] */\r\n        this._timelineResolveExpand = 3;\r\n        this.latestUpdateTime = 0;\r\n        this.reresolveTimeout = null;\r\n        this._mergeIterator = 0;\r\n        // Initialise other values.\r\n        this._canvasId = canvasId;\r\n        this.initCanvas();\r\n        this._drawPlayhead = !!options.drawPlayhead;\r\n        // Calculate width of label column.\r\n        this._layerLabelWidth = this._canvasWidth * this._layerLabelWidthProportionOfCanvas;\r\n        // Calculate timeline width and start point.\r\n        this._viewDrawX = this._layerLabelWidth;\r\n        this._viewDrawWidth = this._canvasWidth - this._layerLabelWidth;\r\n        // Draw background.\r\n        this.drawBackground();\r\n        // Draw playhead.\r\n        this.drawPlayhead();\r\n        this.updateDraw();\r\n    }\r\n    /**\r\n     * Initialises the canvas and registers canvas events.\r\n     */\r\n    initCanvas() {\r\n        // Create new canvas object.\r\n        this._canvasContainer = document.getElementById(this._canvasId);\r\n        if (!this._canvasContainer)\r\n            throw new Error(`Canvas \"${this._canvasId}\" not found`);\r\n        // Get rendering context.\r\n        this._canvas = this._canvasContainer.getContext('2d');\r\n        // Register canvas interaction event handlers.\r\n        this._canvasContainer.addEventListener('mousedown', (event) => this.canvasMouseDown(event));\r\n        this._canvasContainer.addEventListener('mouseup', (event) => this.canvasMouseUp(event));\r\n        this._canvasContainer.addEventListener('mousemove', (event) => this.canvasMouseMove(event));\r\n        this._canvasContainer.addEventListener('wheel', (event) => this.canvasScrollWheel(event));\r\n        // Get width and height of canvas.\r\n        this._canvasWidth = this._canvasContainer.width;\r\n        this._canvasHeight = this._canvasContainer.height;\r\n    }\r\n    /**\r\n     * Updates the timeline, should be called when actions are added/removed from a timeline\r\n     * but the same timeline is being drawn.\r\n     * @param {TimelineObject[]} timeline Timeline to draw.\r\n     * @param {ResolveOptions} options Resolve options.\r\n     */\r\n    updateTimeline(timeline, options) {\r\n        // If options have not been specified set time to 0.\r\n        if (options === undefined) {\r\n            options = {\r\n                time: 0,\r\n                limitCount: 10\r\n            };\r\n        }\r\n        this.latestTimeline = timeline;\r\n        this.latestOptions = options;\r\n        if (!options.limitTime) {\r\n            this._timelineResolveAuto = true;\r\n        }\r\n        else {\r\n            this._timelineResolveAuto = false;\r\n        }\r\n        const options2 = Object.assign({}, options);\r\n        if (this._timelineResolveAuto) {\r\n            this.updateTimelineResolveWindow();\r\n        }\r\n        if (this._resolvedStates === undefined) { // If first time this runs\r\n            // Set timeline start and end times.\r\n            if (options2.time !== undefined) {\r\n                this._viewStartTime = options2.time;\r\n            }\r\n            // Move playhead to start time.\r\n            this._playHeadTime = this._viewStartTime;\r\n        }\r\n        this._updateTimeline(true);\r\n    }\r\n    _updateTimeline(fromNewTimeline = false) {\r\n        const options2 = Object.assign({}, this.latestOptions);\r\n        if (this._timelineResolveAuto) {\r\n            options2.time = this._timelineResolveStart;\r\n            options2.limitTime = this._timelineResolveEnd;\r\n            options2.limitCount = Math.ceil(this._timelineResolveCount * this._timelineResolveCountAdjust);\r\n        }\r\n        // If the playhead is being drawn, the resolve time should be at the playhead time.\r\n        if (this._drawPlayhead && this._playHeadTime > options2.time) {\r\n            options2.time = this._playHeadTime;\r\n        }\r\n        // Resolve the timeline.\r\n        const startResolve = Date.now();\r\n        const resolvedTimeline = superfly_timeline_1.Resolver.resolveTimeline(this.latestTimeline, options2);\r\n        let newResolvedStates = superfly_timeline_1.Resolver.resolveAllStates(resolvedTimeline);\r\n        if (this._resolvedStates === undefined) { // If first time this runs\r\n            this._resolvedStates = newResolvedStates;\r\n        }\r\n        else {\r\n            if (this._drawPlayhead) {\r\n                // Trim the current timeline:\r\n                if (newResolvedStates) {\r\n                    // Merge the timelines.\r\n                    this._resolvedStates = this.mergeTimelineObjects(this._resolvedStates, newResolvedStates, fromNewTimeline);\r\n                }\r\n            }\r\n            else {\r\n                // Otherwise we only see one timeline at a time.\r\n                // Overwrite the previous timeline:\r\n                this._resolvedStates = newResolvedStates;\r\n            }\r\n        }\r\n        // Update layers.\r\n        this.updateLayerLabels();\r\n        this.latestUpdateTime = Date.now() - startResolve;\r\n        // Redraw the timeline.\r\n        this.redrawTimeline();\r\n        this.latestUpdateTime = Date.now() - startResolve;\r\n    }\r\n    /**\r\n     * Sets the viewport to a position, zoom, and playback speed.\r\n     * Playback speed currently not implemented.\r\n     * @param viewPort Object to update viewport with.\r\n     */\r\n    setViewPort(viewPort) {\r\n        // Whether the viewport has changed.\r\n        let changed = false;\r\n        // If zoom has been specified.\r\n        if (viewPort.zoom !== undefined) {\r\n            // Zoom to specified zoom.\r\n            this._timelineZoom = viewPort.zoom;\r\n            changed = true;\r\n        }\r\n        // If timestamp has been specified.\r\n        if (viewPort.timestamp !== undefined) {\r\n            // Set start time to specified time.\r\n            if (viewPort.timestamp > 0) {\r\n                this._viewStartTime = viewPort.timestamp;\r\n                changed = true;\r\n            }\r\n        }\r\n        if (viewPort.playViewPort !== undefined) {\r\n            this._playViewPort = viewPort.playViewPort;\r\n        }\r\n        // If the playback speed has been set, set the new playback speed.\r\n        if (viewPort.playSpeed !== undefined) {\r\n            if (!this._drawPlayhead)\r\n                throw new Error('setViewPort: viewPort.playSpeed was set, but drawPlayhead was not set in constructor');\r\n            this._playSpeed = viewPort.playSpeed;\r\n        }\r\n        // Set playhead playing/ not playing.\r\n        if (viewPort.playPlayhead !== undefined) {\r\n            if (!this._drawPlayhead)\r\n                throw new Error('setViewPort: viewPort.playPlayhead was set, but drawPlayhead was not set in constructor');\r\n            this._playHeadPlaying = viewPort.playPlayhead;\r\n        }\r\n        if (viewPort.playheadTime !== undefined) {\r\n            if (!this._drawPlayhead)\r\n                throw new Error('setViewPort: viewPort.playheadTime was set, but drawPlayhead was not set in constructor');\r\n            this._playHeadTime = Math.max(0, viewPort.playheadTime);\r\n            if (this._playHeadTime > 0)\r\n                this._updateDrawLastTime = this._playHeadTime;\r\n            changed = true;\r\n        }\r\n        // Redraw timeline if anything has changed.\r\n        if (changed === true) {\r\n            this.redrawTimeline();\r\n        }\r\n    }\r\n    /**\r\n     * Accessor for polling the currently hovered over object.\r\n     */\r\n    getHoveredObject() {\r\n        return this._hoveredOver;\r\n    }\r\n    /**\r\n     * Calculates the height to give to each row to fit all layers on screen.\r\n     * @param {String[]} layers Map of layers to use.\r\n     * @returns Height of rows.\r\n     */\r\n    calculateRowHeight(layers) {\r\n        return Math.min(MAX_LAYER_HEIGHT, this._canvasHeight / Object.keys(layers).length);\r\n    }\r\n    updateLayerLabels() {\r\n        // Store layers to draw.\r\n        const o = this.getLayersToDraw();\r\n        if (!isEqual(this._layerLabels, o.layers)) {\r\n            this._layerLabels = o.layers;\r\n            // Calculate row height.\r\n            this._rowHeight = this.calculateRowHeight(this._layerLabels);\r\n            // Set timeline object height.\r\n            this._timelineObjectHeight = this._rowHeight * TIMELINE_OBJECT_HEIGHT;\r\n            this._numberOfLayers = Object.keys(this._layerLabels).length;\r\n            this._rowsTotalHeight = this._rowHeight * this._numberOfLayers;\r\n        }\r\n    }\r\n    /**\r\n     * Draws the layer labels to the canvas.\r\n     */\r\n    drawLayerLabels() {\r\n        let row = 0;\r\n        // Iterate through layers.\r\n        for (let layerName of Object.keys(this._layerLabels)) {\r\n            this._canvas.fillStyle = COLOR_LABEL_BACKGROUND;\r\n            this._canvas.fillRect(0, row * this._rowHeight, this._layerLabelWidth, this._rowHeight);\r\n            this._canvas.fillStyle = TEXT_COLOR;\r\n            this._canvas.font = TEXT_FONT_SIZE.toString() + 'px ' + TEXT_FONT_FAMILY;\r\n            this._canvas.textBaseline = 'middle';\r\n            this._canvas.fillText(layerName, 0, (row * this._rowHeight) + (this._rowHeight / 2), this._layerLabelWidth);\r\n            if (this._layerLabels[layerName] !== 0) {\r\n                this._canvas.fillStyle = COLOR_LINE;\r\n                this._canvas.fillRect(this._layerLabelWidth, row * this._rowHeight, this._viewDrawWidth, THICKNESS_LINE);\r\n            }\r\n            row++;\r\n        }\r\n    }\r\n    /**\r\n     * Draws the timeline background.\r\n     */\r\n    drawBackground() {\r\n        this._canvas.fillStyle = COLOR_BACKGROUND;\r\n        this._canvas.fillRect(0, 0, this._canvasWidth, this._canvasHeight);\r\n        this.drawBackgroundRuler();\r\n    }\r\n    /**\r\n     * Draw a ruler on top of background\r\n     */\r\n    drawBackgroundRuler() {\r\n        const range = this.viewRange;\r\n        const endTime = this.viewEndTime;\r\n        const circaNumberOfLines = 5;\r\n        const rounder = Math.pow(10, Math.floor(Math.log10(range / circaNumberOfLines))); // What to round the ruler to\r\n        const rounderNext = rounder * 10;\r\n        const numberOfLines = Math.floor(range / rounder);\r\n        const rulerDiff = rounder;\r\n        const startTime = Math.floor(this._viewStartTime / rounder) * rounder;\r\n        const opacity = (Math.min(1, circaNumberOfLines / numberOfLines));\r\n        if (rulerDiff) {\r\n            this._canvas.strokeStyle = RULER_LINE_COLOR;\r\n            this._canvas.lineWidth = RULER_LINE_WIDTH;\r\n            for (let rulerTime = startTime; rulerTime < endTime; rulerTime += rulerDiff) {\r\n                this._canvas.beginPath();\r\n                let x = this.timeToXCoord(rulerTime);\r\n                let distanceToNext = (rulerTime / rounderNext) % 1;\r\n                if (distanceToNext > 0.5)\r\n                    distanceToNext -= 1;\r\n                distanceToNext = Math.abs(distanceToNext);\r\n                if (distanceToNext < 0.01) {\r\n                    // Is a significant line\r\n                    this._canvas.globalAlpha = 1;\r\n                }\r\n                else {\r\n                    this._canvas.globalAlpha = opacity;\r\n                }\r\n                if (x >= this._viewDrawX) {\r\n                    this._canvas.moveTo(x, 0);\r\n                    this._canvas.lineTo(x, this._canvasHeight);\r\n                }\r\n                this._canvas.stroke();\r\n            }\r\n            this._canvas.globalAlpha = 1;\r\n        }\r\n    }\r\n    /**\r\n     * Draws the playhead initially.\r\n     */\r\n    drawPlayhead() {\r\n        // If the playhead should be draw.\r\n        if (this._drawPlayhead) {\r\n            if (this.istimeInView(this._playHeadTime)) {\r\n                this._canvas.fillStyle = COLOR_PLAYHEAD;\r\n                this._canvas.fillRect(this.timeToXCoord(this._playHeadTime), 0, THICKNESS_PLAYHEAD, this._canvasHeight);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Gets the layers to draw from the timeline.\r\n     */\r\n    getLayersToDraw() {\r\n        this._hoveredObjectMap = {};\r\n        const layersArray = this._resolvedStates ? Object.keys(this._resolvedStates.layers) : [];\r\n        layersArray.sort((a, b) => {\r\n            if (a > b)\r\n                return 1;\r\n            if (a < b)\r\n                return 1;\r\n            return 0;\r\n        });\r\n        const layers = {};\r\n        layersArray.forEach((layerName, index) => {\r\n            layers[layerName] = index;\r\n            this._hoveredObjectMap[layerName] = [];\r\n        });\r\n        return {\r\n            layers: layers,\r\n            layersArray: layersArray\r\n        };\r\n    }\r\n    /**\r\n     * Redraws the timeline to the canvas.\r\n     */\r\n    redrawTimeline() {\r\n        this._canvas.clearRect(0, 0, this._canvasWidth, this._canvasHeight);\r\n        this.drawBackground();\r\n        this.drawLayerLabels();\r\n        // Recompute objects positions\r\n        this._timelineState = this.getTimelineDrawState(this._resolvedStates);\r\n        // Draw the current state.\r\n        this.drawTimelineState(this._timelineState);\r\n        this.drawPlayhead();\r\n        this.checkAutomaticReresolve();\r\n    }\r\n    /**\r\n     * Draws a timeline state to the canvas.\r\n     * @param {TimelineDrawState} currentDrawState State to draw.\r\n     */\r\n    drawTimelineState(currentDrawState) {\r\n        for (let element in currentDrawState) {\r\n            const drawState = currentDrawState[element];\r\n            if (drawState.visible) {\r\n                this._canvas.fillStyle = COLOR_TIMELINE_OBJECT_FILL;\r\n                this._canvas.fillRect(drawState.left, drawState.top, drawState.width, drawState.height);\r\n                this._canvas.strokeStyle = COLOR_TIMELINE_OBJECT_BORDER;\r\n                this._canvas.lineWidth = THICKNESS_TIMELINE_OBJECT_BORDER;\r\n                this._canvas.strokeRect(drawState.left, drawState.top, drawState.width, drawState.height);\r\n                this._canvas.fillStyle = TEXT_COLOR;\r\n                this._canvas.font = TEXT_FONT_SIZE.toString() + 'px ' + TEXT_FONT_FAMILY;\r\n                this._canvas.textBaseline = 'top';\r\n                this._canvas.fillText(drawState.title, drawState.left, drawState.top);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Returns the draw states for all timeline objects.\r\n     * @param {ResolvedStates} timeline Timeline to draw.\r\n     * @returns {TimelineDrawState} State of time-based objects.\r\n     */\r\n    getTimelineDrawState(timeline) {\r\n        let currentDrawState = {};\r\n        if (timeline) {\r\n            for (let objId in timeline.objects) {\r\n                let timelineObj = timeline.objects[objId];\r\n                for (let _i = 0; _i < timelineObj.resolved.instances.length; _i++) {\r\n                    let instanceObj = timelineObj.resolved.instances[_i];\r\n                    let name = 'timelineObject:' + objId + ':' + instanceObj.id;\r\n                    currentDrawState[name] = this.createStateForObject(timelineObj, instanceObj.start, instanceObj.end);\r\n                    if (currentDrawState[name].visible === true) {\r\n                        if (!this._hoveredObjectMap[timelineObj.layer + ''])\r\n                            this._hoveredObjectMap[timelineObj.layer + ''] = [];\r\n                        this._hoveredObjectMap[timelineObj.layer + ''].push({\r\n                            startX: currentDrawState[name].left,\r\n                            endX: currentDrawState[name].left + currentDrawState[name].width,\r\n                            objectRefId: objId,\r\n                            instanceId: instanceObj.id,\r\n                            type: 'timelineObject',\r\n                            name: name\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return currentDrawState;\r\n    }\r\n    /**\r\n     * Creates a draw state for a timeline object.\r\n     * @param {string} layer Object's layer.\r\n     * @param {number} start Start time.\r\n     * @param {number} end End time.\r\n     * @returns {DrawState} State of the object to draw.\r\n     */\r\n    createStateForObject(obj, start, end) {\r\n        // Default state (hidden).\r\n        let state = {\r\n            height: 0,\r\n            left: 0,\r\n            top: 0,\r\n            width: 0,\r\n            visible: false,\r\n            title: 'N/A'\r\n        };\r\n        // State should be default if the object is not being shown.\r\n        if (this.showOnTimeline(start, end)) {\r\n            // Get object dimensions and position.\r\n            let objectWidth = this.getObjectWidth(start, end);\r\n            let xCoord = this.capXcoordToView(this.timeToXCoord(start));\r\n            let objectTop = this.getObjectOffsetFromTop(obj.layer + '');\r\n            // Set state properties.\r\n            state.height = this._timelineObjectHeight;\r\n            state.left = xCoord;\r\n            state.top = objectTop;\r\n            state.width = objectWidth;\r\n            state.visible = true;\r\n            state.title = obj.id;\r\n        }\r\n        return state;\r\n    }\r\n    /**\r\n     * Calculates the offset, in pixels from the start of the timeline for an object.\r\n     * @param {number} start start time of the object.\r\n     * @returns {number} Offset in pixels.\r\n     */\r\n    // private getObjectOffsetFromTimelineStart (start: number): number {\r\n    // \t// Calculate offset.\r\n    // \tlet offset = (start - this._viewStartTime) * this.pixelsWidthPerUnitTime\r\n    // \t// Offset cannot be to the left of the timeline start position.\r\n    // \tif (offset < 0) {\r\n    // \t\toffset = 0\r\n    // \t}\r\n    // \treturn offset\r\n    // }\r\n    /**\r\n     * Calculates the width, in pixels, of an object based on its duration.\r\n     * @param {number} start Start time of the object.\r\n     * @param {number} end End time of the object.\r\n     * @returns {number} Width in pixels.\r\n     */\r\n    getObjectWidth(startTime, endTime) {\r\n        if (!endTime)\r\n            return this._canvasWidth;\r\n        // If the start time is less than the timeline start, set to timeline start.\r\n        if (startTime < this._viewStartTime) {\r\n            startTime = this._viewStartTime;\r\n        }\r\n        // Calculate duration of the object remaining on the timeline.\r\n        let duration = endTime - startTime;\r\n        // Return end point position in pixels.\r\n        return duration * this.pixelsWidthPerUnitTime;\r\n    }\r\n    /**\r\n     * Determines whether to show an object on the timeline.\r\n     * @param {number} start Object start time.\r\n     * @param {number} end Object end time.\r\n     * @returns {true} if object should be shown on the timeline.\r\n     */\r\n    showOnTimeline(start, end) {\r\n        let isAfter = start >= this.viewEndTime;\r\n        let isBefore = (end || Infinity) <= this._viewStartTime;\r\n        return !isAfter && !isBefore;\r\n    }\r\n    /**\r\n     * Calculate position of object instance from top of timeline according to its layer.\r\n     * @param {string} layer Object's layer.\r\n     * @returns Position relative to top of canvas in pixels.\r\n     */\r\n    getObjectOffsetFromTop(layerName) {\r\n        let top = this._layerLabels[layerName];\r\n        return top * this._rowHeight;\r\n    }\r\n    /**\r\n     * Moves the playhead. Called periodically.\r\n     */\r\n    updateDraw() {\r\n        const now = Date.now();\r\n        // How long time since last update:\r\n        const dt = (this._updateDrawLastTime > 0 ?\r\n            now - this._updateDrawLastTime :\r\n            1) / 1000;\r\n        this._updateDrawLastTime = now;\r\n        const deltaTime = this._playSpeed * dt;\r\n        // Check playhead should be drawn.\r\n        let needRedraw = false;\r\n        if (this._playHeadPlaying && this._drawPlayhead) {\r\n            if (this._playViewPort &&\r\n                this.istimeInView(this._playHeadTime) // Only play if playhead is in view\r\n            ) {\r\n                this._viewStartTime += deltaTime;\r\n            }\r\n            // Move playhead forward\r\n            this._playHeadTime += deltaTime;\r\n            needRedraw = true;\r\n        }\r\n        if (needRedraw) {\r\n            this.redrawTimeline();\r\n        }\r\n        // call this function on next frame\r\n        window.requestAnimationFrame(() => this.updateDraw());\r\n    }\r\n    /**\r\n     * Handles mouse down event.\r\n     * @param event Mouse event.\r\n     */\r\n    canvasMouseDown(event) {\r\n        // Store mouse is down.\r\n        this._mouseDown = true;\r\n        // Store X position of mouse on click.\r\n        this._mouseLastX = event.clientX;\r\n        // Prevent event.\r\n        event.preventDefault();\r\n        event.stopPropagation();\r\n    }\r\n    /**\r\n     * Handles mouse up event.\r\n     * @param event Mouse event.\r\n     */\r\n    canvasMouseUp(event) {\r\n        // Mouse no longer down.\r\n        this._mouseDown = false;\r\n        // Reset scroll direction.\r\n        this._lastScrollDirection = 0;\r\n        // Prevent event.\r\n        event.preventDefault();\r\n        event.stopPropagation();\r\n    }\r\n    /**\r\n     * Handles mouse movement on canvas.\r\n     * @param event Mouse event.\r\n     */\r\n    canvasMouseMove(event) {\r\n        // If mouse is down.\r\n        if (this._mouseDown) {\r\n            // If we are beginning scrolling, we can move freely.\r\n            if (this._lastScrollDirection === undefined || this._lastScrollDirection === 0) {\r\n                // Store current mouse X.\r\n                this._mouseLastX = event.clientX;\r\n                // Calculate change in X.\r\n                let deltaX = event.clientX - this._mouseLastX;\r\n                // Store scrolling direction.\r\n                if (deltaX < 0) {\r\n                    this._lastScrollDirection = -1;\r\n                }\r\n                else {\r\n                    this._lastScrollDirection = 1;\r\n                }\r\n                // Scroll to new X position.\r\n                this.canvasScrollByDeltaX(-deltaX);\r\n            }\r\n            else {\r\n                // Calculate scroll direction.\r\n                let direction = this._mouseLastX - event.clientX;\r\n                // If changing direction, store new direction but don't scroll.\r\n                if (direction < 0 && this._lastScrollDirection === 1) {\r\n                    this._mouseLastX = event.clientX;\r\n                    this._lastScrollDirection = -1;\r\n                }\r\n                else if (direction > 0 && this._lastScrollDirection === -1) {\r\n                    this._mouseLastX = event.clientX;\r\n                    this._lastScrollDirection = 1;\r\n                }\r\n                else {\r\n                    // Calculate change in X.\r\n                    let deltaX = event.clientX - this._mouseLastX;\r\n                    // Store last X position.\r\n                    this._mouseLastX = event.clientX;\r\n                    // Move by change in X.\r\n                    this.canvasScrollByDeltaX(-deltaX);\r\n                }\r\n            }\r\n            // Redraw timeline.\r\n            this.redrawTimeline();\r\n        }\r\n        else {\r\n            // Whether an object is under the cursor.\r\n            let found = false;\r\n            // Find the object that is currently hovered over.\r\n            let mousePos = this.getMousePos(this._canvasContainer, event);\r\n            if (mousePos.x > this._viewDrawX) {\r\n                if (mousePos.y < this._rowsTotalHeight) {\r\n                    let selectedRow = Math.floor((mousePos.y / this._rowsTotalHeight) * this._numberOfLayers);\r\n                    let layer;\r\n                    Object.keys(this._layerLabels).forEach(layerName => {\r\n                        if (this._layerLabels[layerName] === selectedRow)\r\n                            layer = layerName;\r\n                    });\r\n                    let hoverMapData = (layer ? this._hoveredObjectMap[layer] : []) || [];\r\n                    hoverMapData.forEach(object => {\r\n                        if (object.startX <= mousePos.x && object.endX >= mousePos.x) {\r\n                            found = true;\r\n                            const hoverHash = object.type + object.objectRefId + object.instanceId; // hash-ish\r\n                            if (this._lastHoveredHash !== hoverHash) {\r\n                                // Get object metadata from the object name of the hovered object.\r\n                                // If we are hovering over a timeline object.\r\n                                if (object.type === 'timelineObject') {\r\n                                    // Get the timeline object and the instance being hovered over.\r\n                                    if (this._resolvedStates) {\r\n                                        let timelineObject = this._resolvedStates.objects[object.objectRefId];\r\n                                        let instance = timelineObject.resolved.instances.find(instance => instance.id === object.instanceId);\r\n                                        if (instance) {\r\n                                            // Construct hover info.\r\n                                            let hoverInfo = {\r\n                                                object: timelineObject,\r\n                                                instance: instance,\r\n                                                pointer: { xPostion: mousePos.x, yPosition: mousePos.y }\r\n                                            };\r\n                                            // Set currently hovered object.\r\n                                            this._hoveredOver = hoverInfo;\r\n                                            // Emit event.\r\n                                            this.emit('timeline:hover', { detail: this._hoveredOver });\r\n                                        }\r\n                                        // Store last items.\r\n                                        this._lastHoverAction = MOUSEIN;\r\n                                        this._lastHoveredHash = hoverHash;\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n            // Emit undefined when mouse out.\r\n            if (!found && this._lastHoverAction === MOUSEIN) {\r\n                this.emit('timeline:hover', { detail: undefined });\r\n                this._lastHoverAction = MOUSEOUT;\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Handles scroll wheel events on the canvas.\r\n     * @param event Scroll event.\r\n     */\r\n    canvasScrollWheel(event) {\r\n        // Get mouse pointer coordinates on canvas.\r\n        let canvasCoord = this.getMousePos(this._canvasContainer, event);\r\n        // Don't scroll if mouse is not over timeline.\r\n        if (canvasCoord.x <= this._viewDrawX) {\r\n            return;\r\n        }\r\n        let changed = false;\r\n        // CTRL + scroll to zoom.\r\n        if (event.ctrlKey === true) {\r\n            if (event.deltaY) {\r\n                changed = true;\r\n                const zoomFactor = Math.pow(ZOOM_FACTOR, -event.deltaY);\r\n                this.zoomUnderCursor(canvasCoord.x, zoomFactor);\r\n            }\r\n        }\r\n        else if (event.deltaX !== 0) { // Scroll on x-axis\r\n            changed = true;\r\n            // Pan.\r\n            this.canvasScrollByDeltaX((event.deltaX * (PAN_FACTOR * this.stepSize)));\r\n        }\r\n        else if (event.deltaY !== 0 && event.altKey === true) { // Also scroll on alt-key + scroll y-axis\r\n            changed = true;\r\n            // Pan.\r\n            this.canvasScrollByDeltaX((event.deltaY * (PAN_FACTOR * this.stepSize)));\r\n        }\r\n        // Prevent event.\r\n        event.preventDefault();\r\n        event.stopPropagation();\r\n        if (changed) {\r\n            // Redraw timeline.\r\n            this.redrawTimeline();\r\n        }\r\n    }\r\n    /**\r\n     * Scroll across the canvas by a specified X value.\r\n     * @param {number} deltaX Value to move by.\r\n     */\r\n    canvasScrollByDeltaX(deltaX) {\r\n        // Calculate new starting time.\r\n        let targetStart = this._viewStartTime + (deltaX / this.pixelsWidthPerUnitTime);\r\n        // Starting time cannot be < 0.\r\n        if (targetStart < 0) {\r\n            targetStart = 0;\r\n        }\r\n        // Optimisation, don't redraw if nothing has changed.\r\n        if (targetStart === this._viewStartTime) {\r\n            return;\r\n        }\r\n        this._viewStartTime = targetStart;\r\n    }\r\n    /**\r\n     * Zooms into/out of timeline, keeping the time under the cursor in the same position.\r\n     * @param cursorX Position of mouse cursor.\r\n     */\r\n    zoomUnderCursor(cursorX, zoomFactor) {\r\n        // Point in time of the cursor\r\n        let cursorTime = this.xCoordToTime(cursorX);\r\n        // Ratio (in view range) of the cursor\r\n        let cursorRatio = this.timeToRatio(cursorTime);\r\n        // Change zoom:\r\n        this._timelineZoom = this._timelineZoom * zoomFactor;\r\n        // Limit within current view\r\n        cursorRatio = Math.max(0, Math.min(1, cursorRatio));\r\n        // Calculate start\r\n        let targetStart = cursorTime - (cursorRatio * this.viewRange);\r\n        // Start cannot be less than 0\r\n        if (targetStart < 0) {\r\n            targetStart = 0;\r\n        }\r\n        // Set draw time\r\n        this._viewStartTime = targetStart;\r\n    }\r\n    /**\r\n     * Gets the mouse position relative to the top-left of the canvas [pixels]\r\n     * @param canvas\r\n     * @param evt\r\n     * @returns {x: number, y: number} Position.\r\n     */\r\n    getMousePos(canvas, evt) {\r\n        const rect = canvas.getBoundingClientRect();\r\n        return {\r\n            x: evt.clientX - rect.left,\r\n            y: evt.clientY - rect.top\r\n        };\r\n    }\r\n    /**\r\n     * Trims a timeline so that objects only exist within a specified time period.\r\n     * @param timeline Timeline to trim.\r\n     * @param trim Times to trim between.\r\n     */\r\n    trimTimeline(timeline, trim) {\r\n        // The new resolved objects.\r\n        let newObjects = {};\r\n        // Iterate through resolved objects.\r\n        Object.keys(timeline.objects).forEach((objId) => {\r\n            const obj = timeline.objects[objId];\r\n            const resultingInstances = [];\r\n            obj.resolved.instances.forEach(instance => {\r\n                // Whether to insert this object into the new timeline.\r\n                let useInstance = false;\r\n                let newInstance = Object.assign({}, instance); // clone\r\n                // If trimming the start time.\r\n                if (trim.start) {\r\n                    // If the object ends after the trim start time.\r\n                    if ((instance.end || Infinity) > trim.start) {\r\n                        useInstance = true;\r\n                        if (newInstance.start < trim.start) {\r\n                            newInstance.start = trim.start;\r\n                        }\r\n                    }\r\n                }\r\n                // If trimming the end time.\r\n                if (trim.end) {\r\n                    // If the object starts before the trim end time.\r\n                    if (instance.start < trim.end) {\r\n                        useInstance = true;\r\n                        if ((newInstance.end || Infinity) > trim.end) {\r\n                            newInstance.end = trim.end;\r\n                        }\r\n                    }\r\n                }\r\n                if (!trim.start && !trim.end) {\r\n                    useInstance = true;\r\n                }\r\n                if (useInstance &&\r\n                    newInstance.start < (newInstance.end || Infinity)) {\r\n                    resultingInstances.push(newInstance);\r\n                }\r\n            });\r\n            // If there isn't a resolved object for the new instance, create it.\r\n            if (!newObjects[objId]) {\r\n                let newObject = {\r\n                    content: obj.content,\r\n                    enable: obj.enable,\r\n                    id: obj.id,\r\n                    layer: obj.layer,\r\n                    resolved: {\r\n                        instances: [],\r\n                        levelDeep: obj.resolved.levelDeep,\r\n                        resolved: obj.resolved.resolved,\r\n                        resolving: obj.resolved.resolving\r\n                    }\r\n                };\r\n                newObjects[objId] = newObject;\r\n            }\r\n            newObjects[objId].resolved.instances = resultingInstances;\r\n        });\r\n        return {\r\n            classes: timeline.classes,\r\n            layers: timeline.layers,\r\n            objects: newObjects,\r\n            options: timeline.options,\r\n            statistics: timeline.statistics,\r\n            state: timeline.state,\r\n            nextEvents: timeline.nextEvents\r\n        };\r\n    }\r\n    /**\r\n     * Merges two timelines by merging instances of objects that intersect each other.\r\n     * @param past Older timeline.\r\n     * @param present Newer timeline.\r\n     * @returns {ResolvedTimeline} containing merged timelines.\r\n     */\r\n    mergeTimelineObjects(past, present, fromNewTimeline) {\r\n        const resultingObjects = {};\r\n        if (fromNewTimeline) {\r\n            past = this.trimTimeline(past, { end: this._playHeadTime });\r\n            present = this.trimTimeline(present, { start: this._playHeadTime });\r\n            // Because we want to keep old objects, this iterator is used to create unique old ids for them\r\n            this._mergeIterator++;\r\n            Object.keys(past.objects).forEach((objId) => {\r\n                const pastObj = past.objects[objId];\r\n                // @ts-ignore: hack to mark it as a \"past object\"\r\n                if (pastObj.__pastObj) {\r\n                    // Copy over it right away, it's old. Don't do anything else\r\n                    resultingObjects[objId] = pastObj;\r\n                    return;\r\n                }\r\n                // If an object exists in both timelines\r\n                const presentObj = present.objects[objId];\r\n                if (presentObj) {\r\n                    if (\r\n                    // Compare the objects, only look into merging them if they look identical\r\n                    isEqual(Object.assign({}, pastObj, { resolved: null }), Object.assign({}, presentObj, { resolved: null }))) {\r\n                        // This assumes that all past instances stop at a certain time at the very latest,\r\n                        // and that all new instances start at that time at the very earliest.\r\n                        // Iterate over all instances of those objects.\r\n                        const allInstances = {};\r\n                        pastObj.resolved.instances.forEach(pastInstance => {\r\n                            allInstances[pastInstance.end + ''] = pastInstance;\r\n                        });\r\n                        presentObj.resolved.instances.forEach(presentInstance => {\r\n                            if (allInstances[presentInstance.start + '']) {\r\n                                // The instances are next to each other, merge them into one:\r\n                                allInstances[presentInstance.start + ''].end = presentInstance.end;\r\n                            }\r\n                            else {\r\n                                allInstances[presentInstance.start + ''] = presentInstance;\r\n                            }\r\n                        });\r\n                        presentObj.resolved.instances = [];\r\n                        Object.keys(allInstances).forEach(key => {\r\n                            const instance = allInstances[key];\r\n                            presentObj.resolved.instances.push(instance);\r\n                        });\r\n                        // Copy over the new object\r\n                        resultingObjects[objId] = presentObj;\r\n                        return; // don't copy over old object\r\n                    }\r\n                    else {\r\n                        // The objects doesn't look identical\r\n                        // Copy over the new object\r\n                        resultingObjects[objId] = presentObj;\r\n                    }\r\n                }\r\n                else {\r\n                    // The old object doesn't exist in the new timeline\r\n                }\r\n                // @ts-ignore: hack to mark it as a \"past object\"\r\n                pastObj.__pastObj = true;\r\n                // Copy over the old object\r\n                resultingObjects[this._mergeIterator + '__' + objId] = pastObj;\r\n            });\r\n            // Iterate over the next objects\r\n            Object.keys(present.objects).forEach((objId) => {\r\n                const presentObj = present.objects[objId];\r\n                if (!past.objects[objId]) { // (if it did existed in the past, it has already been handled)\r\n                    // Just copy over the new object\r\n                    resultingObjects[objId] = presentObj;\r\n                }\r\n            });\r\n        }\r\n        else {\r\n            // No new timeline, objects and instances are only added\r\n            Object.keys(past.objects).forEach((objId) => {\r\n                const pastObj = past.objects[objId];\r\n                resultingObjects[objId] = pastObj;\r\n            });\r\n            Object.keys(present.objects).forEach((objId) => {\r\n                const presentObj = present.objects[objId];\r\n                const existingObj = resultingObjects[objId];\r\n                if (existingObj) {\r\n                    // merge with old instances\r\n                    const existingInstances = {};\r\n                    existingObj.resolved.instances.forEach(instance => {\r\n                        existingInstances[instance.start + '_' + instance.end] = true;\r\n                    });\r\n                    presentObj.resolved.instances.forEach(instance => {\r\n                        // Only push instances that aren't already present:\r\n                        if (!existingInstances[instance.start + '_' + instance.end]) {\r\n                            existingObj.resolved.instances.push(instance);\r\n                        }\r\n                    });\r\n                }\r\n                else {\r\n                    resultingObjects[objId] = presentObj;\r\n                }\r\n            });\r\n        }\r\n        const resultingLayers = {};\r\n        Object.keys(resultingObjects).forEach(key => {\r\n            const obj = resultingObjects[key];\r\n            const layer = obj.layer + '';\r\n            if (!resultingLayers[layer])\r\n                resultingLayers[layer] = [];\r\n            resultingLayers[layer].push(key);\r\n        });\r\n        return Object.assign({}, present, { objects: resultingObjects, layers: resultingLayers });\r\n    }\r\n    updateTimelineResolveWindow() {\r\n        const { start, end } = this.getExpandedStartEndTime(1);\r\n        this._timelineResolveStart = start;\r\n        this._timelineResolveEnd = end;\r\n        this._timelineResolveZoom = this._timelineZoom;\r\n        if (this.latestUpdateTime) {\r\n            // Calculate an optimal number of objects to create, so that the drawing still runs smoothly.\r\n            const targetResolveTime = 50; // ms\r\n            let ratio = targetResolveTime / this.latestUpdateTime;\r\n            this._timelineResolveCountAdjust = Math.max(0.1, Math.min(10, (1 + (this._timelineResolveCountAdjust * ratio)) / 2));\r\n        }\r\n    }\r\n    getExpandedStartEndTime(multiplier = 1) {\r\n        let start = this._viewStartTime;\r\n        let end = this.viewEndTime;\r\n        let duration = end - start;\r\n        let expand = duration * (this._timelineResolveExpand - 1) * multiplier;\r\n        start -= expand * 0.33;\r\n        end += expand * 0.66; // expand more into the future\r\n        start = Math.max(0, start);\r\n        end = Math.max(0, end);\r\n        const zoomDiff = Math.max(this._timelineResolveZoom, this._timelineZoom) /\r\n            Math.min(this._timelineResolveZoom, this._timelineZoom);\r\n        return { start, end, zoomDiff };\r\n    }\r\n    checkAutomaticReresolve() {\r\n        const { start, end, zoomDiff } = this.getExpandedStartEndTime(0.2);\r\n        if (this._timelineResolveAuto && (start < this._timelineResolveStart ||\r\n            end > this._timelineResolveEnd ||\r\n            zoomDiff > 3)) {\r\n            if (!this.reresolveTimeout) {\r\n                this.reresolveTimeout = setTimeout(() => {\r\n                    this.reresolveTimeout = null;\r\n                    this.updateTimelineResolveWindow();\r\n                    this._updateTimeline();\r\n                }, Math.max(100, this.latestUpdateTime * 5));\r\n            }\r\n        }\r\n    }\r\n    // --------------------- Conversions between position & time -------------\r\n    /**\r\n     * Calculate the X coordinate of a time value.\r\n     * @param {number} time The time to convert.\r\n     * @returns {number} The X coordinate of the time.\r\n     */\r\n    timeToXCoord(time) {\r\n        return this._viewDrawX + ((time - this._viewStartTime) * this.pixelsWidthPerUnitTime);\r\n    }\r\n    /**\r\n     * Calculate the time of a X coordinate.\r\n     * @param {number} time The X coordinate to convert.\r\n     * @returns {number} The time of the X coordinate.\r\n     */\r\n    xCoordToTime(position) {\r\n        return this._viewStartTime + ((position - this._viewDrawX) / this.pixelsWidthPerUnitTime);\r\n    }\r\n    /** Calculate the ratio of the time in current view (0 i beginning, 1 is end)  */\r\n    timeToRatio(time) {\r\n        return (time - this._viewStartTime) / this.viewRange;\r\n    }\r\n    /** Returns true if the position is within the current view  */\r\n    istimeInView(time) {\r\n        const ratio = this.timeToRatio(time);\r\n        return ratio >= 0 && ratio < 1;\r\n    }\r\n    capXcoordToView(position) {\r\n        return Math.max(this._viewDrawX, Math.min(this._viewDrawX + this._viewDrawWidth, position));\r\n    }\r\n    // -------------- Getters / Convenience functions ---------------------\r\n    /** Zoom factor [pixels / time] */\r\n    get pixelsWidthPerUnitTime() {\r\n        return (this._timelineZoom / 100);\r\n    }\r\n    /** The range of the view [time] */\r\n    get viewRange() {\r\n        return this._viewDrawWidth / this.pixelsWidthPerUnitTime;\r\n    }\r\n    /** The end time of the view [time] */\r\n    get viewEndTime() {\r\n        return this._viewStartTime + this.viewRange;\r\n    }\r\n}\r\nexports.TimelineVisualizer = TimelineVisualizer;\r\n//# sourceMappingURL=timelineVisualizer.js.map","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nvar objectCreate = Object.create || objectCreatePolyfill\nvar objectKeys = Object.keys || objectKeysPolyfill\nvar bind = Function.prototype.bind || functionBindPolyfill\n\nfunction EventEmitter() {\n  if (!this._events || !Object.prototype.hasOwnProperty.call(this, '_events')) {\n    this._events = objectCreate(null);\n    this._eventsCount = 0;\n  }\n\n  this._maxListeners = this._maxListeners || undefined;\n}\nmodule.exports = EventEmitter;\n\n// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nvar defaultMaxListeners = 10;\n\nvar hasDefineProperty;\ntry {\n  var o = {};\n  if (Object.defineProperty) Object.defineProperty(o, 'x', { value: 0 });\n  hasDefineProperty = o.x === 0;\n} catch (err) { hasDefineProperty = false }\nif (hasDefineProperty) {\n  Object.defineProperty(EventEmitter, 'defaultMaxListeners', {\n    enumerable: true,\n    get: function() {\n      return defaultMaxListeners;\n    },\n    set: function(arg) {\n      // check whether the input is a positive number (whose value is zero or\n      // greater and not a NaN).\n      if (typeof arg !== 'number' || arg < 0 || arg !== arg)\n        throw new TypeError('\"defaultMaxListeners\" must be a positive number');\n      defaultMaxListeners = arg;\n    }\n  });\n} else {\n  EventEmitter.defaultMaxListeners = defaultMaxListeners;\n}\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {\n  if (typeof n !== 'number' || n < 0 || isNaN(n))\n    throw new TypeError('\"n\" argument must be a positive number');\n  this._maxListeners = n;\n  return this;\n};\n\nfunction $getMaxListeners(that) {\n  if (that._maxListeners === undefined)\n    return EventEmitter.defaultMaxListeners;\n  return that._maxListeners;\n}\n\nEventEmitter.prototype.getMaxListeners = function getMaxListeners() {\n  return $getMaxListeners(this);\n};\n\n// These standalone emit* functions are used to optimize calling of event\n// handlers for fast cases because emit() itself often has a variable number of\n// arguments and can be deoptimized because of that. These functions always have\n// the same number of arguments and thus do not get deoptimized, so the code\n// inside them can execute faster.\nfunction emitNone(handler, isFn, self) {\n  if (isFn)\n    handler.call(self);\n  else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      listeners[i].call(self);\n  }\n}\nfunction emitOne(handler, isFn, self, arg1) {\n  if (isFn)\n    handler.call(self, arg1);\n  else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      listeners[i].call(self, arg1);\n  }\n}\nfunction emitTwo(handler, isFn, self, arg1, arg2) {\n  if (isFn)\n    handler.call(self, arg1, arg2);\n  else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      listeners[i].call(self, arg1, arg2);\n  }\n}\nfunction emitThree(handler, isFn, self, arg1, arg2, arg3) {\n  if (isFn)\n    handler.call(self, arg1, arg2, arg3);\n  else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      listeners[i].call(self, arg1, arg2, arg3);\n  }\n}\n\nfunction emitMany(handler, isFn, self, args) {\n  if (isFn)\n    handler.apply(self, args);\n  else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      listeners[i].apply(self, args);\n  }\n}\n\nEventEmitter.prototype.emit = function emit(type) {\n  var er, handler, len, args, i, events;\n  var doError = (type === 'error');\n\n  events = this._events;\n  if (events)\n    doError = (doError && events.error == null);\n  else if (!doError)\n    return false;\n\n  // If there is no 'error' event listener then throw.\n  if (doError) {\n    if (arguments.length > 1)\n      er = arguments[1];\n    if (er instanceof Error) {\n      throw er; // Unhandled 'error' event\n    } else {\n      // At least give some kind of context to the user\n      var err = new Error('Unhandled \"error\" event. (' + er + ')');\n      err.context = er;\n      throw err;\n    }\n    return false;\n  }\n\n  handler = events[type];\n\n  if (!handler)\n    return false;\n\n  var isFn = typeof handler === 'function';\n  len = arguments.length;\n  switch (len) {\n      // fast cases\n    case 1:\n      emitNone(handler, isFn, this);\n      break;\n    case 2:\n      emitOne(handler, isFn, this, arguments[1]);\n      break;\n    case 3:\n      emitTwo(handler, isFn, this, arguments[1], arguments[2]);\n      break;\n    case 4:\n      emitThree(handler, isFn, this, arguments[1], arguments[2], arguments[3]);\n      break;\n      // slower\n    default:\n      args = new Array(len - 1);\n      for (i = 1; i < len; i++)\n        args[i - 1] = arguments[i];\n      emitMany(handler, isFn, this, args);\n  }\n\n  return true;\n};\n\nfunction _addListener(target, type, listener, prepend) {\n  var m;\n  var events;\n  var existing;\n\n  if (typeof listener !== 'function')\n    throw new TypeError('\"listener\" argument must be a function');\n\n  events = target._events;\n  if (!events) {\n    events = target._events = objectCreate(null);\n    target._eventsCount = 0;\n  } else {\n    // To avoid recursion in the case that type === \"newListener\"! Before\n    // adding it to the listeners, first emit \"newListener\".\n    if (events.newListener) {\n      target.emit('newListener', type,\n          listener.listener ? listener.listener : listener);\n\n      // Re-assign `events` because a newListener handler could have caused the\n      // this._events to be assigned to a new object\n      events = target._events;\n    }\n    existing = events[type];\n  }\n\n  if (!existing) {\n    // Optimize the case of one listener. Don't need the extra array object.\n    existing = events[type] = listener;\n    ++target._eventsCount;\n  } else {\n    if (typeof existing === 'function') {\n      // Adding the second element, need to change to array.\n      existing = events[type] =\n          prepend ? [listener, existing] : [existing, listener];\n    } else {\n      // If we've already got an array, just append.\n      if (prepend) {\n        existing.unshift(listener);\n      } else {\n        existing.push(listener);\n      }\n    }\n\n    // Check for listener leak\n    if (!existing.warned) {\n      m = $getMaxListeners(target);\n      if (m && m > 0 && existing.length > m) {\n        existing.warned = true;\n        var w = new Error('Possible EventEmitter memory leak detected. ' +\n            existing.length + ' \"' + String(type) + '\" listeners ' +\n            'added. Use emitter.setMaxListeners() to ' +\n            'increase limit.');\n        w.name = 'MaxListenersExceededWarning';\n        w.emitter = target;\n        w.type = type;\n        w.count = existing.length;\n        if (typeof console === 'object' && console.warn) {\n          console.warn('%s: %s', w.name, w.message);\n        }\n      }\n    }\n  }\n\n  return target;\n}\n\nEventEmitter.prototype.addListener = function addListener(type, listener) {\n  return _addListener(this, type, listener, false);\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.prependListener =\n    function prependListener(type, listener) {\n      return _addListener(this, type, listener, true);\n    };\n\nfunction onceWrapper() {\n  if (!this.fired) {\n    this.target.removeListener(this.type, this.wrapFn);\n    this.fired = true;\n    switch (arguments.length) {\n      case 0:\n        return this.listener.call(this.target);\n      case 1:\n        return this.listener.call(this.target, arguments[0]);\n      case 2:\n        return this.listener.call(this.target, arguments[0], arguments[1]);\n      case 3:\n        return this.listener.call(this.target, arguments[0], arguments[1],\n            arguments[2]);\n      default:\n        var args = new Array(arguments.length);\n        for (var i = 0; i < args.length; ++i)\n          args[i] = arguments[i];\n        this.listener.apply(this.target, args);\n    }\n  }\n}\n\nfunction _onceWrap(target, type, listener) {\n  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };\n  var wrapped = bind.call(onceWrapper, state);\n  wrapped.listener = listener;\n  state.wrapFn = wrapped;\n  return wrapped;\n}\n\nEventEmitter.prototype.once = function once(type, listener) {\n  if (typeof listener !== 'function')\n    throw new TypeError('\"listener\" argument must be a function');\n  this.on(type, _onceWrap(this, type, listener));\n  return this;\n};\n\nEventEmitter.prototype.prependOnceListener =\n    function prependOnceListener(type, listener) {\n      if (typeof listener !== 'function')\n        throw new TypeError('\"listener\" argument must be a function');\n      this.prependListener(type, _onceWrap(this, type, listener));\n      return this;\n    };\n\n// Emits a 'removeListener' event if and only if the listener was removed.\nEventEmitter.prototype.removeListener =\n    function removeListener(type, listener) {\n      var list, events, position, i, originalListener;\n\n      if (typeof listener !== 'function')\n        throw new TypeError('\"listener\" argument must be a function');\n\n      events = this._events;\n      if (!events)\n        return this;\n\n      list = events[type];\n      if (!list)\n        return this;\n\n      if (list === listener || list.listener === listener) {\n        if (--this._eventsCount === 0)\n          this._events = objectCreate(null);\n        else {\n          delete events[type];\n          if (events.removeListener)\n            this.emit('removeListener', type, list.listener || listener);\n        }\n      } else if (typeof list !== 'function') {\n        position = -1;\n\n        for (i = list.length - 1; i >= 0; i--) {\n          if (list[i] === listener || list[i].listener === listener) {\n            originalListener = list[i].listener;\n            position = i;\n            break;\n          }\n        }\n\n        if (position < 0)\n          return this;\n\n        if (position === 0)\n          list.shift();\n        else\n          spliceOne(list, position);\n\n        if (list.length === 1)\n          events[type] = list[0];\n\n        if (events.removeListener)\n          this.emit('removeListener', type, originalListener || listener);\n      }\n\n      return this;\n    };\n\nEventEmitter.prototype.removeAllListeners =\n    function removeAllListeners(type) {\n      var listeners, events, i;\n\n      events = this._events;\n      if (!events)\n        return this;\n\n      // not listening for removeListener, no need to emit\n      if (!events.removeListener) {\n        if (arguments.length === 0) {\n          this._events = objectCreate(null);\n          this._eventsCount = 0;\n        } else if (events[type]) {\n          if (--this._eventsCount === 0)\n            this._events = objectCreate(null);\n          else\n            delete events[type];\n        }\n        return this;\n      }\n\n      // emit removeListener for all listeners on all events\n      if (arguments.length === 0) {\n        var keys = objectKeys(events);\n        var key;\n        for (i = 0; i < keys.length; ++i) {\n          key = keys[i];\n          if (key === 'removeListener') continue;\n          this.removeAllListeners(key);\n        }\n        this.removeAllListeners('removeListener');\n        this._events = objectCreate(null);\n        this._eventsCount = 0;\n        return this;\n      }\n\n      listeners = events[type];\n\n      if (typeof listeners === 'function') {\n        this.removeListener(type, listeners);\n      } else if (listeners) {\n        // LIFO order\n        for (i = listeners.length - 1; i >= 0; i--) {\n          this.removeListener(type, listeners[i]);\n        }\n      }\n\n      return this;\n    };\n\nfunction _listeners(target, type, unwrap) {\n  var events = target._events;\n\n  if (!events)\n    return [];\n\n  var evlistener = events[type];\n  if (!evlistener)\n    return [];\n\n  if (typeof evlistener === 'function')\n    return unwrap ? [evlistener.listener || evlistener] : [evlistener];\n\n  return unwrap ? unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);\n}\n\nEventEmitter.prototype.listeners = function listeners(type) {\n  return _listeners(this, type, true);\n};\n\nEventEmitter.prototype.rawListeners = function rawListeners(type) {\n  return _listeners(this, type, false);\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  if (typeof emitter.listenerCount === 'function') {\n    return emitter.listenerCount(type);\n  } else {\n    return listenerCount.call(emitter, type);\n  }\n};\n\nEventEmitter.prototype.listenerCount = listenerCount;\nfunction listenerCount(type) {\n  var events = this._events;\n\n  if (events) {\n    var evlistener = events[type];\n\n    if (typeof evlistener === 'function') {\n      return 1;\n    } else if (evlistener) {\n      return evlistener.length;\n    }\n  }\n\n  return 0;\n}\n\nEventEmitter.prototype.eventNames = function eventNames() {\n  return this._eventsCount > 0 ? Reflect.ownKeys(this._events) : [];\n};\n\n// About 1.5x faster than the two-arg version of Array#splice().\nfunction spliceOne(list, index) {\n  for (var i = index, k = i + 1, n = list.length; k < n; i += 1, k += 1)\n    list[i] = list[k];\n  list.pop();\n}\n\nfunction arrayClone(arr, n) {\n  var copy = new Array(n);\n  for (var i = 0; i < n; ++i)\n    copy[i] = arr[i];\n  return copy;\n}\n\nfunction unwrapListeners(arr) {\n  var ret = new Array(arr.length);\n  for (var i = 0; i < ret.length; ++i) {\n    ret[i] = arr[i].listener || arr[i];\n  }\n  return ret;\n}\n\nfunction objectCreatePolyfill(proto) {\n  var F = function() {};\n  F.prototype = proto;\n  return new F;\n}\nfunction objectKeysPolyfill(obj) {\n  var keys = [];\n  for (var k in obj) if (Object.prototype.hasOwnProperty.call(obj, k)) {\n    keys.push(k);\n  }\n  return k;\n}\nfunction functionBindPolyfill(context) {\n  var fn = this;\n  return function () {\n    return fn.apply(context, arguments);\n  };\n}\n","/**\n * Lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright JS Foundation and other contributors <https://js.foundation/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as the size to enable large array optimizations. */\nvar LARGE_ARRAY_SIZE = 200;\n\n/** Used to stand-in for `undefined` hash values. */\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n/** Used to compose bitmasks for value comparisons. */\nvar COMPARE_PARTIAL_FLAG = 1,\n    COMPARE_UNORDERED_FLAG = 2;\n\n/** Used as references for various `Number` constants. */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    arrayTag = '[object Array]',\n    asyncTag = '[object AsyncFunction]',\n    boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    errorTag = '[object Error]',\n    funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    nullTag = '[object Null]',\n    objectTag = '[object Object]',\n    promiseTag = '[object Promise]',\n    proxyTag = '[object Proxy]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    symbolTag = '[object Symbol]',\n    undefinedTag = '[object Undefined]',\n    weakMapTag = '[object WeakMap]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]',\n    float32Tag = '[object Float32Array]',\n    float64Tag = '[object Float64Array]',\n    int8Tag = '[object Int8Array]',\n    int16Tag = '[object Int16Array]',\n    int32Tag = '[object Int32Array]',\n    uint8Tag = '[object Uint8Array]',\n    uint8ClampedTag = '[object Uint8ClampedArray]',\n    uint16Tag = '[object Uint16Array]',\n    uint32Tag = '[object Uint32Array]';\n\n/**\n * Used to match `RegExp`\n * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n */\nvar reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\n\n/** Used to detect host constructors (Safari). */\nvar reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n/** Used to detect unsigned integer values. */\nvar reIsUint = /^(?:0|[1-9]\\d*)$/;\n\n/** Used to identify `toStringTag` values of typed arrays. */\nvar typedArrayTags = {};\ntypedArrayTags[float32Tag] = typedArrayTags[float64Tag] =\ntypedArrayTags[int8Tag] = typedArrayTags[int16Tag] =\ntypedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =\ntypedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =\ntypedArrayTags[uint32Tag] = true;\ntypedArrayTags[argsTag] = typedArrayTags[arrayTag] =\ntypedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =\ntypedArrayTags[dataViewTag] = typedArrayTags[dateTag] =\ntypedArrayTags[errorTag] = typedArrayTags[funcTag] =\ntypedArrayTags[mapTag] = typedArrayTags[numberTag] =\ntypedArrayTags[objectTag] = typedArrayTags[regexpTag] =\ntypedArrayTags[setTag] = typedArrayTags[stringTag] =\ntypedArrayTags[weakMapTag] = false;\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\n/** Detect free variable `exports`. */\nvar freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;\n\n/** Detect free variable `module`. */\nvar freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n\n/** Detect the popular CommonJS extension `module.exports`. */\nvar moduleExports = freeModule && freeModule.exports === freeExports;\n\n/** Detect free variable `process` from Node.js. */\nvar freeProcess = moduleExports && freeGlobal.process;\n\n/** Used to access faster Node.js helpers. */\nvar nodeUtil = (function() {\n  try {\n    return freeProcess && freeProcess.binding && freeProcess.binding('util');\n  } catch (e) {}\n}());\n\n/* Node.js helper references. */\nvar nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;\n\n/**\n * A specialized version of `_.filter` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {Array} Returns the new filtered array.\n */\nfunction arrayFilter(array, predicate) {\n  var index = -1,\n      length = array == null ? 0 : array.length,\n      resIndex = 0,\n      result = [];\n\n  while (++index < length) {\n    var value = array[index];\n    if (predicate(value, index, array)) {\n      result[resIndex++] = value;\n    }\n  }\n  return result;\n}\n\n/**\n * Appends the elements of `values` to `array`.\n *\n * @private\n * @param {Array} array The array to modify.\n * @param {Array} values The values to append.\n * @returns {Array} Returns `array`.\n */\nfunction arrayPush(array, values) {\n  var index = -1,\n      length = values.length,\n      offset = array.length;\n\n  while (++index < length) {\n    array[offset + index] = values[index];\n  }\n  return array;\n}\n\n/**\n * A specialized version of `_.some` for arrays without support for iteratee\n * shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {boolean} Returns `true` if any element passes the predicate check,\n *  else `false`.\n */\nfunction arraySome(array, predicate) {\n  var index = -1,\n      length = array == null ? 0 : array.length;\n\n  while (++index < length) {\n    if (predicate(array[index], index, array)) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * The base implementation of `_.times` without support for iteratee shorthands\n * or max array length checks.\n *\n * @private\n * @param {number} n The number of times to invoke `iteratee`.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the array of results.\n */\nfunction baseTimes(n, iteratee) {\n  var index = -1,\n      result = Array(n);\n\n  while (++index < n) {\n    result[index] = iteratee(index);\n  }\n  return result;\n}\n\n/**\n * The base implementation of `_.unary` without support for storing metadata.\n *\n * @private\n * @param {Function} func The function to cap arguments for.\n * @returns {Function} Returns the new capped function.\n */\nfunction baseUnary(func) {\n  return function(value) {\n    return func(value);\n  };\n}\n\n/**\n * Checks if a `cache` value for `key` exists.\n *\n * @private\n * @param {Object} cache The cache to query.\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction cacheHas(cache, key) {\n  return cache.has(key);\n}\n\n/**\n * Gets the value at `key` of `object`.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {string} key The key of the property to get.\n * @returns {*} Returns the property value.\n */\nfunction getValue(object, key) {\n  return object == null ? undefined : object[key];\n}\n\n/**\n * Converts `map` to its key-value pairs.\n *\n * @private\n * @param {Object} map The map to convert.\n * @returns {Array} Returns the key-value pairs.\n */\nfunction mapToArray(map) {\n  var index = -1,\n      result = Array(map.size);\n\n  map.forEach(function(value, key) {\n    result[++index] = [key, value];\n  });\n  return result;\n}\n\n/**\n * Creates a unary function that invokes `func` with its argument transformed.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {Function} transform The argument transform.\n * @returns {Function} Returns the new function.\n */\nfunction overArg(func, transform) {\n  return function(arg) {\n    return func(transform(arg));\n  };\n}\n\n/**\n * Converts `set` to an array of its values.\n *\n * @private\n * @param {Object} set The set to convert.\n * @returns {Array} Returns the values.\n */\nfunction setToArray(set) {\n  var index = -1,\n      result = Array(set.size);\n\n  set.forEach(function(value) {\n    result[++index] = value;\n  });\n  return result;\n}\n\n/** Used for built-in method references. */\nvar arrayProto = Array.prototype,\n    funcProto = Function.prototype,\n    objectProto = Object.prototype;\n\n/** Used to detect overreaching core-js shims. */\nvar coreJsData = root['__core-js_shared__'];\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/** Used to detect methods masquerading as native. */\nvar maskSrcKey = (function() {\n  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\n  return uid ? ('Symbol(src)_1.' + uid) : '';\n}());\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar nativeObjectToString = objectProto.toString;\n\n/** Used to detect if a method is native. */\nvar reIsNative = RegExp('^' +\n  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')\n  .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n);\n\n/** Built-in value references. */\nvar Buffer = moduleExports ? root.Buffer : undefined,\n    Symbol = root.Symbol,\n    Uint8Array = root.Uint8Array,\n    propertyIsEnumerable = objectProto.propertyIsEnumerable,\n    splice = arrayProto.splice,\n    symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeGetSymbols = Object.getOwnPropertySymbols,\n    nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,\n    nativeKeys = overArg(Object.keys, Object);\n\n/* Built-in method references that are verified to be native. */\nvar DataView = getNative(root, 'DataView'),\n    Map = getNative(root, 'Map'),\n    Promise = getNative(root, 'Promise'),\n    Set = getNative(root, 'Set'),\n    WeakMap = getNative(root, 'WeakMap'),\n    nativeCreate = getNative(Object, 'create');\n\n/** Used to detect maps, sets, and weakmaps. */\nvar dataViewCtorString = toSource(DataView),\n    mapCtorString = toSource(Map),\n    promiseCtorString = toSource(Promise),\n    setCtorString = toSource(Set),\n    weakMapCtorString = toSource(WeakMap);\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;\n\n/**\n * Creates a hash object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Hash(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the hash.\n *\n * @private\n * @name clear\n * @memberOf Hash\n */\nfunction hashClear() {\n  this.__data__ = nativeCreate ? nativeCreate(null) : {};\n  this.size = 0;\n}\n\n/**\n * Removes `key` and its value from the hash.\n *\n * @private\n * @name delete\n * @memberOf Hash\n * @param {Object} hash The hash to modify.\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction hashDelete(key) {\n  var result = this.has(key) && delete this.__data__[key];\n  this.size -= result ? 1 : 0;\n  return result;\n}\n\n/**\n * Gets the hash value for `key`.\n *\n * @private\n * @name get\n * @memberOf Hash\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction hashGet(key) {\n  var data = this.__data__;\n  if (nativeCreate) {\n    var result = data[key];\n    return result === HASH_UNDEFINED ? undefined : result;\n  }\n  return hasOwnProperty.call(data, key) ? data[key] : undefined;\n}\n\n/**\n * Checks if a hash value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Hash\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction hashHas(key) {\n  var data = this.__data__;\n  return nativeCreate ? (data[key] !== undefined) : hasOwnProperty.call(data, key);\n}\n\n/**\n * Sets the hash `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Hash\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the hash instance.\n */\nfunction hashSet(key, value) {\n  var data = this.__data__;\n  this.size += this.has(key) ? 0 : 1;\n  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;\n  return this;\n}\n\n// Add methods to `Hash`.\nHash.prototype.clear = hashClear;\nHash.prototype['delete'] = hashDelete;\nHash.prototype.get = hashGet;\nHash.prototype.has = hashHas;\nHash.prototype.set = hashSet;\n\n/**\n * Creates an list cache object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction ListCache(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the list cache.\n *\n * @private\n * @name clear\n * @memberOf ListCache\n */\nfunction listCacheClear() {\n  this.__data__ = [];\n  this.size = 0;\n}\n\n/**\n * Removes `key` and its value from the list cache.\n *\n * @private\n * @name delete\n * @memberOf ListCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction listCacheDelete(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    return false;\n  }\n  var lastIndex = data.length - 1;\n  if (index == lastIndex) {\n    data.pop();\n  } else {\n    splice.call(data, index, 1);\n  }\n  --this.size;\n  return true;\n}\n\n/**\n * Gets the list cache value for `key`.\n *\n * @private\n * @name get\n * @memberOf ListCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction listCacheGet(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  return index < 0 ? undefined : data[index][1];\n}\n\n/**\n * Checks if a list cache value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf ListCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction listCacheHas(key) {\n  return assocIndexOf(this.__data__, key) > -1;\n}\n\n/**\n * Sets the list cache `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf ListCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the list cache instance.\n */\nfunction listCacheSet(key, value) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    ++this.size;\n    data.push([key, value]);\n  } else {\n    data[index][1] = value;\n  }\n  return this;\n}\n\n// Add methods to `ListCache`.\nListCache.prototype.clear = listCacheClear;\nListCache.prototype['delete'] = listCacheDelete;\nListCache.prototype.get = listCacheGet;\nListCache.prototype.has = listCacheHas;\nListCache.prototype.set = listCacheSet;\n\n/**\n * Creates a map cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction MapCache(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the map.\n *\n * @private\n * @name clear\n * @memberOf MapCache\n */\nfunction mapCacheClear() {\n  this.size = 0;\n  this.__data__ = {\n    'hash': new Hash,\n    'map': new (Map || ListCache),\n    'string': new Hash\n  };\n}\n\n/**\n * Removes `key` and its value from the map.\n *\n * @private\n * @name delete\n * @memberOf MapCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction mapCacheDelete(key) {\n  var result = getMapData(this, key)['delete'](key);\n  this.size -= result ? 1 : 0;\n  return result;\n}\n\n/**\n * Gets the map value for `key`.\n *\n * @private\n * @name get\n * @memberOf MapCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction mapCacheGet(key) {\n  return getMapData(this, key).get(key);\n}\n\n/**\n * Checks if a map value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf MapCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction mapCacheHas(key) {\n  return getMapData(this, key).has(key);\n}\n\n/**\n * Sets the map `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf MapCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the map cache instance.\n */\nfunction mapCacheSet(key, value) {\n  var data = getMapData(this, key),\n      size = data.size;\n\n  data.set(key, value);\n  this.size += data.size == size ? 0 : 1;\n  return this;\n}\n\n// Add methods to `MapCache`.\nMapCache.prototype.clear = mapCacheClear;\nMapCache.prototype['delete'] = mapCacheDelete;\nMapCache.prototype.get = mapCacheGet;\nMapCache.prototype.has = mapCacheHas;\nMapCache.prototype.set = mapCacheSet;\n\n/**\n *\n * Creates an array cache object to store unique values.\n *\n * @private\n * @constructor\n * @param {Array} [values] The values to cache.\n */\nfunction SetCache(values) {\n  var index = -1,\n      length = values == null ? 0 : values.length;\n\n  this.__data__ = new MapCache;\n  while (++index < length) {\n    this.add(values[index]);\n  }\n}\n\n/**\n * Adds `value` to the array cache.\n *\n * @private\n * @name add\n * @memberOf SetCache\n * @alias push\n * @param {*} value The value to cache.\n * @returns {Object} Returns the cache instance.\n */\nfunction setCacheAdd(value) {\n  this.__data__.set(value, HASH_UNDEFINED);\n  return this;\n}\n\n/**\n * Checks if `value` is in the array cache.\n *\n * @private\n * @name has\n * @memberOf SetCache\n * @param {*} value The value to search for.\n * @returns {number} Returns `true` if `value` is found, else `false`.\n */\nfunction setCacheHas(value) {\n  return this.__data__.has(value);\n}\n\n// Add methods to `SetCache`.\nSetCache.prototype.add = SetCache.prototype.push = setCacheAdd;\nSetCache.prototype.has = setCacheHas;\n\n/**\n * Creates a stack cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Stack(entries) {\n  var data = this.__data__ = new ListCache(entries);\n  this.size = data.size;\n}\n\n/**\n * Removes all key-value entries from the stack.\n *\n * @private\n * @name clear\n * @memberOf Stack\n */\nfunction stackClear() {\n  this.__data__ = new ListCache;\n  this.size = 0;\n}\n\n/**\n * Removes `key` and its value from the stack.\n *\n * @private\n * @name delete\n * @memberOf Stack\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction stackDelete(key) {\n  var data = this.__data__,\n      result = data['delete'](key);\n\n  this.size = data.size;\n  return result;\n}\n\n/**\n * Gets the stack value for `key`.\n *\n * @private\n * @name get\n * @memberOf Stack\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction stackGet(key) {\n  return this.__data__.get(key);\n}\n\n/**\n * Checks if a stack value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Stack\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction stackHas(key) {\n  return this.__data__.has(key);\n}\n\n/**\n * Sets the stack `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Stack\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the stack cache instance.\n */\nfunction stackSet(key, value) {\n  var data = this.__data__;\n  if (data instanceof ListCache) {\n    var pairs = data.__data__;\n    if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {\n      pairs.push([key, value]);\n      this.size = ++data.size;\n      return this;\n    }\n    data = this.__data__ = new MapCache(pairs);\n  }\n  data.set(key, value);\n  this.size = data.size;\n  return this;\n}\n\n// Add methods to `Stack`.\nStack.prototype.clear = stackClear;\nStack.prototype['delete'] = stackDelete;\nStack.prototype.get = stackGet;\nStack.prototype.has = stackHas;\nStack.prototype.set = stackSet;\n\n/**\n * Creates an array of the enumerable property names of the array-like `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @param {boolean} inherited Specify returning inherited property names.\n * @returns {Array} Returns the array of property names.\n */\nfunction arrayLikeKeys(value, inherited) {\n  var isArr = isArray(value),\n      isArg = !isArr && isArguments(value),\n      isBuff = !isArr && !isArg && isBuffer(value),\n      isType = !isArr && !isArg && !isBuff && isTypedArray(value),\n      skipIndexes = isArr || isArg || isBuff || isType,\n      result = skipIndexes ? baseTimes(value.length, String) : [],\n      length = result.length;\n\n  for (var key in value) {\n    if ((inherited || hasOwnProperty.call(value, key)) &&\n        !(skipIndexes && (\n           // Safari 9 has enumerable `arguments.length` in strict mode.\n           key == 'length' ||\n           // Node.js 0.10 has enumerable non-index properties on buffers.\n           (isBuff && (key == 'offset' || key == 'parent')) ||\n           // PhantomJS 2 has enumerable non-index properties on typed arrays.\n           (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||\n           // Skip index properties.\n           isIndex(key, length)\n        ))) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * Gets the index at which the `key` is found in `array` of key-value pairs.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} key The key to search for.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction assocIndexOf(array, key) {\n  var length = array.length;\n  while (length--) {\n    if (eq(array[length][0], key)) {\n      return length;\n    }\n  }\n  return -1;\n}\n\n/**\n * The base implementation of `getAllKeys` and `getAllKeysIn` which uses\n * `keysFunc` and `symbolsFunc` to get the enumerable property names and\n * symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Function} keysFunc The function to get the keys of `object`.\n * @param {Function} symbolsFunc The function to get the symbols of `object`.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction baseGetAllKeys(object, keysFunc, symbolsFunc) {\n  var result = keysFunc(object);\n  return isArray(object) ? result : arrayPush(result, symbolsFunc(object));\n}\n\n/**\n * The base implementation of `getTag` without fallbacks for buggy environments.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nfunction baseGetTag(value) {\n  if (value == null) {\n    return value === undefined ? undefinedTag : nullTag;\n  }\n  return (symToStringTag && symToStringTag in Object(value))\n    ? getRawTag(value)\n    : objectToString(value);\n}\n\n/**\n * The base implementation of `_.isArguments`.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n */\nfunction baseIsArguments(value) {\n  return isObjectLike(value) && baseGetTag(value) == argsTag;\n}\n\n/**\n * The base implementation of `_.isEqual` which supports partial comparisons\n * and tracks traversed objects.\n *\n * @private\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @param {boolean} bitmask The bitmask flags.\n *  1 - Unordered comparison\n *  2 - Partial comparison\n * @param {Function} [customizer] The function to customize comparisons.\n * @param {Object} [stack] Tracks traversed `value` and `other` objects.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n */\nfunction baseIsEqual(value, other, bitmask, customizer, stack) {\n  if (value === other) {\n    return true;\n  }\n  if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {\n    return value !== value && other !== other;\n  }\n  return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);\n}\n\n/**\n * A specialized version of `baseIsEqual` for arrays and objects which performs\n * deep comparisons and tracks traversed objects enabling objects with circular\n * references to be compared.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} [stack] Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {\n  var objIsArr = isArray(object),\n      othIsArr = isArray(other),\n      objTag = objIsArr ? arrayTag : getTag(object),\n      othTag = othIsArr ? arrayTag : getTag(other);\n\n  objTag = objTag == argsTag ? objectTag : objTag;\n  othTag = othTag == argsTag ? objectTag : othTag;\n\n  var objIsObj = objTag == objectTag,\n      othIsObj = othTag == objectTag,\n      isSameTag = objTag == othTag;\n\n  if (isSameTag && isBuffer(object)) {\n    if (!isBuffer(other)) {\n      return false;\n    }\n    objIsArr = true;\n    objIsObj = false;\n  }\n  if (isSameTag && !objIsObj) {\n    stack || (stack = new Stack);\n    return (objIsArr || isTypedArray(object))\n      ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)\n      : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);\n  }\n  if (!(bitmask & COMPARE_PARTIAL_FLAG)) {\n    var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),\n        othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');\n\n    if (objIsWrapped || othIsWrapped) {\n      var objUnwrapped = objIsWrapped ? object.value() : object,\n          othUnwrapped = othIsWrapped ? other.value() : other;\n\n      stack || (stack = new Stack);\n      return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);\n    }\n  }\n  if (!isSameTag) {\n    return false;\n  }\n  stack || (stack = new Stack);\n  return equalObjects(object, other, bitmask, customizer, equalFunc, stack);\n}\n\n/**\n * The base implementation of `_.isNative` without bad shim checks.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a native function,\n *  else `false`.\n */\nfunction baseIsNative(value) {\n  if (!isObject(value) || isMasked(value)) {\n    return false;\n  }\n  var pattern = isFunction(value) ? reIsNative : reIsHostCtor;\n  return pattern.test(toSource(value));\n}\n\n/**\n * The base implementation of `_.isTypedArray` without Node.js optimizations.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n */\nfunction baseIsTypedArray(value) {\n  return isObjectLike(value) &&\n    isLength(value.length) && !!typedArrayTags[baseGetTag(value)];\n}\n\n/**\n * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction baseKeys(object) {\n  if (!isPrototype(object)) {\n    return nativeKeys(object);\n  }\n  var result = [];\n  for (var key in Object(object)) {\n    if (hasOwnProperty.call(object, key) && key != 'constructor') {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * A specialized version of `baseIsEqualDeep` for arrays with support for\n * partial deep comparisons.\n *\n * @private\n * @param {Array} array The array to compare.\n * @param {Array} other The other array to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `array` and `other` objects.\n * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.\n */\nfunction equalArrays(array, other, bitmask, customizer, equalFunc, stack) {\n  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\n      arrLength = array.length,\n      othLength = other.length;\n\n  if (arrLength != othLength && !(isPartial && othLength > arrLength)) {\n    return false;\n  }\n  // Assume cyclic values are equal.\n  var stacked = stack.get(array);\n  if (stacked && stack.get(other)) {\n    return stacked == other;\n  }\n  var index = -1,\n      result = true,\n      seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;\n\n  stack.set(array, other);\n  stack.set(other, array);\n\n  // Ignore non-index properties.\n  while (++index < arrLength) {\n    var arrValue = array[index],\n        othValue = other[index];\n\n    if (customizer) {\n      var compared = isPartial\n        ? customizer(othValue, arrValue, index, other, array, stack)\n        : customizer(arrValue, othValue, index, array, other, stack);\n    }\n    if (compared !== undefined) {\n      if (compared) {\n        continue;\n      }\n      result = false;\n      break;\n    }\n    // Recursively compare arrays (susceptible to call stack limits).\n    if (seen) {\n      if (!arraySome(other, function(othValue, othIndex) {\n            if (!cacheHas(seen, othIndex) &&\n                (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {\n              return seen.push(othIndex);\n            }\n          })) {\n        result = false;\n        break;\n      }\n    } else if (!(\n          arrValue === othValue ||\n            equalFunc(arrValue, othValue, bitmask, customizer, stack)\n        )) {\n      result = false;\n      break;\n    }\n  }\n  stack['delete'](array);\n  stack['delete'](other);\n  return result;\n}\n\n/**\n * A specialized version of `baseIsEqualDeep` for comparing objects of\n * the same `toStringTag`.\n *\n * **Note:** This function only supports comparing values with tags of\n * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {string} tag The `toStringTag` of the objects to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {\n  switch (tag) {\n    case dataViewTag:\n      if ((object.byteLength != other.byteLength) ||\n          (object.byteOffset != other.byteOffset)) {\n        return false;\n      }\n      object = object.buffer;\n      other = other.buffer;\n\n    case arrayBufferTag:\n      if ((object.byteLength != other.byteLength) ||\n          !equalFunc(new Uint8Array(object), new Uint8Array(other))) {\n        return false;\n      }\n      return true;\n\n    case boolTag:\n    case dateTag:\n    case numberTag:\n      // Coerce booleans to `1` or `0` and dates to milliseconds.\n      // Invalid dates are coerced to `NaN`.\n      return eq(+object, +other);\n\n    case errorTag:\n      return object.name == other.name && object.message == other.message;\n\n    case regexpTag:\n    case stringTag:\n      // Coerce regexes to strings and treat strings, primitives and objects,\n      // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring\n      // for more details.\n      return object == (other + '');\n\n    case mapTag:\n      var convert = mapToArray;\n\n    case setTag:\n      var isPartial = bitmask & COMPARE_PARTIAL_FLAG;\n      convert || (convert = setToArray);\n\n      if (object.size != other.size && !isPartial) {\n        return false;\n      }\n      // Assume cyclic values are equal.\n      var stacked = stack.get(object);\n      if (stacked) {\n        return stacked == other;\n      }\n      bitmask |= COMPARE_UNORDERED_FLAG;\n\n      // Recursively compare objects (susceptible to call stack limits).\n      stack.set(object, other);\n      var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);\n      stack['delete'](object);\n      return result;\n\n    case symbolTag:\n      if (symbolValueOf) {\n        return symbolValueOf.call(object) == symbolValueOf.call(other);\n      }\n  }\n  return false;\n}\n\n/**\n * A specialized version of `baseIsEqualDeep` for objects with support for\n * partial deep comparisons.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction equalObjects(object, other, bitmask, customizer, equalFunc, stack) {\n  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\n      objProps = getAllKeys(object),\n      objLength = objProps.length,\n      othProps = getAllKeys(other),\n      othLength = othProps.length;\n\n  if (objLength != othLength && !isPartial) {\n    return false;\n  }\n  var index = objLength;\n  while (index--) {\n    var key = objProps[index];\n    if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {\n      return false;\n    }\n  }\n  // Assume cyclic values are equal.\n  var stacked = stack.get(object);\n  if (stacked && stack.get(other)) {\n    return stacked == other;\n  }\n  var result = true;\n  stack.set(object, other);\n  stack.set(other, object);\n\n  var skipCtor = isPartial;\n  while (++index < objLength) {\n    key = objProps[index];\n    var objValue = object[key],\n        othValue = other[key];\n\n    if (customizer) {\n      var compared = isPartial\n        ? customizer(othValue, objValue, key, other, object, stack)\n        : customizer(objValue, othValue, key, object, other, stack);\n    }\n    // Recursively compare objects (susceptible to call stack limits).\n    if (!(compared === undefined\n          ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))\n          : compared\n        )) {\n      result = false;\n      break;\n    }\n    skipCtor || (skipCtor = key == 'constructor');\n  }\n  if (result && !skipCtor) {\n    var objCtor = object.constructor,\n        othCtor = other.constructor;\n\n    // Non `Object` object instances with different constructors are not equal.\n    if (objCtor != othCtor &&\n        ('constructor' in object && 'constructor' in other) &&\n        !(typeof objCtor == 'function' && objCtor instanceof objCtor &&\n          typeof othCtor == 'function' && othCtor instanceof othCtor)) {\n      result = false;\n    }\n  }\n  stack['delete'](object);\n  stack['delete'](other);\n  return result;\n}\n\n/**\n * Creates an array of own enumerable property names and symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction getAllKeys(object) {\n  return baseGetAllKeys(object, keys, getSymbols);\n}\n\n/**\n * Gets the data for `map`.\n *\n * @private\n * @param {Object} map The map to query.\n * @param {string} key The reference key.\n * @returns {*} Returns the map data.\n */\nfunction getMapData(map, key) {\n  var data = map.__data__;\n  return isKeyable(key)\n    ? data[typeof key == 'string' ? 'string' : 'hash']\n    : data.map;\n}\n\n/**\n * Gets the native function at `key` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the method to get.\n * @returns {*} Returns the function if it's native, else `undefined`.\n */\nfunction getNative(object, key) {\n  var value = getValue(object, key);\n  return baseIsNative(value) ? value : undefined;\n}\n\n/**\n * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the raw `toStringTag`.\n */\nfunction getRawTag(value) {\n  var isOwn = hasOwnProperty.call(value, symToStringTag),\n      tag = value[symToStringTag];\n\n  try {\n    value[symToStringTag] = undefined;\n    var unmasked = true;\n  } catch (e) {}\n\n  var result = nativeObjectToString.call(value);\n  if (unmasked) {\n    if (isOwn) {\n      value[symToStringTag] = tag;\n    } else {\n      delete value[symToStringTag];\n    }\n  }\n  return result;\n}\n\n/**\n * Creates an array of the own enumerable symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of symbols.\n */\nvar getSymbols = !nativeGetSymbols ? stubArray : function(object) {\n  if (object == null) {\n    return [];\n  }\n  object = Object(object);\n  return arrayFilter(nativeGetSymbols(object), function(symbol) {\n    return propertyIsEnumerable.call(object, symbol);\n  });\n};\n\n/**\n * Gets the `toStringTag` of `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nvar getTag = baseGetTag;\n\n// Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.\nif ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||\n    (Map && getTag(new Map) != mapTag) ||\n    (Promise && getTag(Promise.resolve()) != promiseTag) ||\n    (Set && getTag(new Set) != setTag) ||\n    (WeakMap && getTag(new WeakMap) != weakMapTag)) {\n  getTag = function(value) {\n    var result = baseGetTag(value),\n        Ctor = result == objectTag ? value.constructor : undefined,\n        ctorString = Ctor ? toSource(Ctor) : '';\n\n    if (ctorString) {\n      switch (ctorString) {\n        case dataViewCtorString: return dataViewTag;\n        case mapCtorString: return mapTag;\n        case promiseCtorString: return promiseTag;\n        case setCtorString: return setTag;\n        case weakMapCtorString: return weakMapTag;\n      }\n    }\n    return result;\n  };\n}\n\n/**\n * Checks if `value` is a valid array-like index.\n *\n * @private\n * @param {*} value The value to check.\n * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n */\nfunction isIndex(value, length) {\n  length = length == null ? MAX_SAFE_INTEGER : length;\n  return !!length &&\n    (typeof value == 'number' || reIsUint.test(value)) &&\n    (value > -1 && value % 1 == 0 && value < length);\n}\n\n/**\n * Checks if `value` is suitable for use as unique object key.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n */\nfunction isKeyable(value) {\n  var type = typeof value;\n  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')\n    ? (value !== '__proto__')\n    : (value === null);\n}\n\n/**\n * Checks if `func` has its source masked.\n *\n * @private\n * @param {Function} func The function to check.\n * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n */\nfunction isMasked(func) {\n  return !!maskSrcKey && (maskSrcKey in func);\n}\n\n/**\n * Checks if `value` is likely a prototype object.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n */\nfunction isPrototype(value) {\n  var Ctor = value && value.constructor,\n      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;\n\n  return value === proto;\n}\n\n/**\n * Converts `value` to a string using `Object.prototype.toString`.\n *\n * @private\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n */\nfunction objectToString(value) {\n  return nativeObjectToString.call(value);\n}\n\n/**\n * Converts `func` to its source code.\n *\n * @private\n * @param {Function} func The function to convert.\n * @returns {string} Returns the source code.\n */\nfunction toSource(func) {\n  if (func != null) {\n    try {\n      return funcToString.call(func);\n    } catch (e) {}\n    try {\n      return (func + '');\n    } catch (e) {}\n  }\n  return '';\n}\n\n/**\n * Performs a\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * comparison between two values to determine if they are equivalent.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.eq(object, object);\n * // => true\n *\n * _.eq(object, other);\n * // => false\n *\n * _.eq('a', 'a');\n * // => true\n *\n * _.eq('a', Object('a'));\n * // => false\n *\n * _.eq(NaN, NaN);\n * // => true\n */\nfunction eq(value, other) {\n  return value === other || (value !== value && other !== other);\n}\n\n/**\n * Checks if `value` is likely an `arguments` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n *  else `false`.\n * @example\n *\n * _.isArguments(function() { return arguments; }());\n * // => true\n *\n * _.isArguments([1, 2, 3]);\n * // => false\n */\nvar isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {\n  return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&\n    !propertyIsEnumerable.call(value, 'callee');\n};\n\n/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\n/**\n * Checks if `value` is array-like. A value is considered array-like if it's\n * not a function and has a `value.length` that's an integer greater than or\n * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n * @example\n *\n * _.isArrayLike([1, 2, 3]);\n * // => true\n *\n * _.isArrayLike(document.body.children);\n * // => true\n *\n * _.isArrayLike('abc');\n * // => true\n *\n * _.isArrayLike(_.noop);\n * // => false\n */\nfunction isArrayLike(value) {\n  return value != null && isLength(value.length) && !isFunction(value);\n}\n\n/**\n * Checks if `value` is a buffer.\n *\n * @static\n * @memberOf _\n * @since 4.3.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.\n * @example\n *\n * _.isBuffer(new Buffer(2));\n * // => true\n *\n * _.isBuffer(new Uint8Array(2));\n * // => false\n */\nvar isBuffer = nativeIsBuffer || stubFalse;\n\n/**\n * Performs a deep comparison between two values to determine if they are\n * equivalent.\n *\n * **Note:** This method supports comparing arrays, array buffers, booleans,\n * date objects, error objects, maps, numbers, `Object` objects, regexes,\n * sets, strings, symbols, and typed arrays. `Object` objects are compared\n * by their own, not inherited, enumerable properties. Functions and DOM\n * nodes are compared by strict equality, i.e. `===`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.isEqual(object, other);\n * // => true\n *\n * object === other;\n * // => false\n */\nfunction isEqual(value, other) {\n  return baseIsEqual(value, other);\n}\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n  if (!isObject(value)) {\n    return false;\n  }\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in Safari 9 which returns 'object' for typed arrays and other constructors.\n  var tag = baseGetTag(value);\n  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;\n}\n\n/**\n * Checks if `value` is a valid array-like length.\n *\n * **Note:** This method is loosely based on\n * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n * @example\n *\n * _.isLength(3);\n * // => true\n *\n * _.isLength(Number.MIN_VALUE);\n * // => false\n *\n * _.isLength(Infinity);\n * // => false\n *\n * _.isLength('3');\n * // => false\n */\nfunction isLength(value) {\n  return typeof value == 'number' &&\n    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n}\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return value != null && (type == 'object' || type == 'function');\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return value != null && typeof value == 'object';\n}\n\n/**\n * Checks if `value` is classified as a typed array.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n * @example\n *\n * _.isTypedArray(new Uint8Array);\n * // => true\n *\n * _.isTypedArray([]);\n * // => false\n */\nvar isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;\n\n/**\n * Creates an array of the own enumerable property names of `object`.\n *\n * **Note:** Non-object values are coerced to objects. See the\n * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n * for more details.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.keys(new Foo);\n * // => ['a', 'b'] (iteration order is not guaranteed)\n *\n * _.keys('hi');\n * // => ['0', '1']\n */\nfunction keys(object) {\n  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);\n}\n\n/**\n * This method returns a new empty array.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {Array} Returns the new empty array.\n * @example\n *\n * var arrays = _.times(2, _.stubArray);\n *\n * console.log(arrays);\n * // => [[], []]\n *\n * console.log(arrays[0] === arrays[1]);\n * // => false\n */\nfunction stubArray() {\n  return [];\n}\n\n/**\n * This method returns `false`.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {boolean} Returns `false`.\n * @example\n *\n * _.times(2, _.stubFalse);\n * // => [false, false]\n */\nfunction stubFalse() {\n  return false;\n}\n\nmodule.exports = isEqual;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar EventType;\n(function (EventType) {\n    EventType[EventType[\"START\"] = 0] = \"START\";\n    EventType[EventType[\"END\"] = 1] = \"END\";\n    EventType[EventType[\"KEYFRAME\"] = 2] = \"KEYFRAME\";\n})(EventType = exports.EventType || (exports.EventType = {}));\n//# sourceMappingURL=enums.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\ntslib_1.__exportStar(require(\"./api/enums\"), exports);\nvar resolver_1 = require(\"./resolver/resolver\");\nexports.Resolver = resolver_1.Resolver;\nvar validate_1 = require(\"./resolver/validate\");\nexports.validateTimeline = validate_1.validateTimeline;\nexports.validateObject = validate_1.validateObject;\nexports.validateKeyframe = validate_1.validateKeyframe;\n//# sourceMappingURL=index.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar _ = require(\"underscore\");\n/**\n * Somewhat like _.extend, but with strong types & mandated additional properties\n * @param original Object to be extended\n * @param extendObj properties to add\n */\nfunction extendMandadory(original, extendObj) {\n    return _.extend(original, extendObj);\n}\nexports.extendMandadory = extendMandadory;\nfunction isConstant(str) {\n    return !!(isNumeric(str) ||\n        (_.isString(str) &&\n            (str.match(/^true$/) ||\n                str.match(/^false$/))));\n}\nexports.isConstant = isConstant;\nfunction isNumeric(str) {\n    if (str === null)\n        return false;\n    if (_.isNumber(str))\n        return true;\n    if (_.isString(str))\n        return !!(str.match(/^[0-9\\.\\-]+$/) && !_.isNaN(parseFloat(str)));\n    return false;\n}\nexports.isNumeric = isNumeric;\nfunction sortEvents(events) {\n    return events.sort(function (a, b) {\n        if (a.time > b.time)\n            return 1;\n        if (a.time < b.time)\n            return -1;\n        var aId = a.data && (a.data.id || (a.data.instance && a.data.instance.id));\n        var bId = b.data && (b.data.id || (b.data.instance && b.data.instance.id));\n        if (aId && bId && aId === bId) {\n            // If the event refer to the same ID, let the ending event be first:\n            if (a.value && !b.value)\n                return -1;\n            if (!a.value && b.value)\n                return 1;\n        }\n        if (a.value && !b.value)\n            return 1;\n        if (!a.value && b.value)\n            return -1;\n        return 0;\n    });\n}\nexports.sortEvents = sortEvents;\n/**\n * Clean up instances, join overlapping etc..\n * @param instances\n */\nfunction cleanInstances(instances, allowMerge, allowZeroGaps) {\n    // if (!allowMerge) throw new Error(`TODO: cleanInstances: allowMerge is temorarily removed`)\n    if (allowZeroGaps === void 0) { allowZeroGaps = false; }\n    var events = [];\n    // let i: number = 1\n    _.each(instances, function (instance) {\n        // const id = 'i' + (i++)\n        events.push({\n            time: instance.start,\n            value: true,\n            data: { instance: instance },\n            references: instance.references\n        });\n        if (instance.end !== null) {\n            events.push({\n                time: instance.end,\n                value: false,\n                data: { instance: instance },\n                references: instance.references\n            });\n        }\n    });\n    return convertEventsToInstances(events, allowMerge, allowZeroGaps);\n}\nexports.cleanInstances = cleanInstances;\nfunction convertEventsToInstances(events, allowMerge, allowZeroGaps) {\n    if (allowZeroGaps === void 0) { allowZeroGaps = false; }\n    sortEvents(events);\n    var activeInstances = {};\n    var activeInstanceId = null;\n    var previousActive = false;\n    var returnInstances = [];\n    _.each(events, function (event) {\n        var eventId = event.data.id || event.data.instance.id;\n        var lastInstance = _.last(returnInstances);\n        if (event.value) {\n            activeInstances[eventId] = event;\n        }\n        else {\n            delete activeInstances[eventId];\n        }\n        if (_.keys(activeInstances).length) {\n            // There is an active instance\n            previousActive = true;\n            if (!allowMerge &&\n                event.value &&\n                lastInstance &&\n                lastInstance.end === null &&\n                activeInstanceId !== null &&\n                activeInstanceId !== eventId) {\n                // Start a new instance:\n                lastInstance.end = event.time;\n                returnInstances.push({\n                    id: getId(),\n                    start: event.time,\n                    end: null,\n                    references: event.references\n                });\n                activeInstanceId = eventId;\n            }\n            else if (!allowMerge &&\n                !event.value &&\n                lastInstance &&\n                activeInstanceId === eventId) {\n                // The active instance stopped playing, but another is still playing\n                var latestInstance = _.reduce(activeInstances, function (memo, event, id) {\n                    if (memo === null ||\n                        memo.event.time < event.time) {\n                        return {\n                            event: event,\n                            id: id\n                        };\n                    }\n                    return memo;\n                }, null);\n                if (latestInstance) {\n                    // Restart that instance now:\n                    lastInstance.end = event.time;\n                    returnInstances.push({\n                        id: eventId + '_' + getId(),\n                        start: event.time,\n                        end: null,\n                        references: latestInstance.event.references\n                    });\n                    activeInstanceId = latestInstance.id;\n                }\n            }\n            else if (allowMerge &&\n                !allowZeroGaps &&\n                lastInstance &&\n                lastInstance.end === event.time) {\n                // The previously running ended just now\n                // resume previous instance:\n                lastInstance.end = null;\n                lastInstance.references = joinReferences(lastInstance.references, event.references);\n                addCapsToResuming(lastInstance, event.data.instance.caps);\n            }\n            else if (!lastInstance ||\n                lastInstance.end !== null) {\n                // There is no previously running instance\n                // Start a new instance:\n                returnInstances.push({\n                    id: eventId,\n                    start: event.time,\n                    end: null,\n                    references: event.references,\n                    caps: event.data.instance.caps\n                });\n                activeInstanceId = eventId;\n            }\n            else {\n                // There is already a running instance\n                lastInstance.references = joinReferences(lastInstance.references, event.references);\n                addCapsToResuming(lastInstance, event.data.instance.caps);\n            }\n            if (lastInstance && lastInstance.caps && !lastInstance.caps.length)\n                delete lastInstance.caps;\n        }\n        else {\n            // No instances are active\n            if (lastInstance &&\n                previousActive) {\n                lastInstance.end = event.time;\n            }\n            previousActive = false;\n        }\n    });\n    return returnInstances;\n}\nexports.convertEventsToInstances = convertEventsToInstances;\nfunction invertInstances(instances) {\n    if (instances.length) {\n        instances = cleanInstances(instances, true, true);\n        var invertedInstances_1 = [];\n        if (instances[0].start !== 0) {\n            invertedInstances_1.push({\n                id: getId(),\n                isFirst: true,\n                start: 0,\n                end: null,\n                references: joinReferences(instances[0].references, instances[0].id)\n            });\n        }\n        _.each(instances, function (instance) {\n            var last = _.last(invertedInstances_1);\n            if (last) {\n                last.end = instance.start;\n            }\n            if (instance.end !== null) {\n                invertedInstances_1.push({\n                    id: getId(),\n                    start: instance.end,\n                    end: null,\n                    references: joinReferences(instance.references, instance.id),\n                    caps: instance.caps\n                });\n            }\n        });\n        return invertedInstances_1;\n    }\n    else {\n        return [{\n                id: getId(),\n                isFirst: true,\n                start: 0,\n                end: null,\n                references: []\n            }];\n    }\n}\nexports.invertInstances = invertInstances;\n/**\n * Perform an action on 2 arrays. Behaves somewhat like the \".*\"-operator in Matlab\n * @param array0\n * @param array1\n * @param operate\n */\nfunction operateOnArrays(array0, array1, operate) {\n    if (array0 === null ||\n        array1 === null)\n        return null;\n    if (isReference(array0) &&\n        isReference(array1)) {\n        return operate(array0, array1);\n    }\n    var result = [];\n    var minLength = Math.min(_.isArray(array0) ? array0.length : Infinity, _.isArray(array1) ? array1.length : Infinity);\n    for (var i_1 = 0; i_1 < minLength; i_1++) {\n        var a = (_.isArray(array0) ?\n            array0[i_1] :\n            { id: '', start: array0.value, end: array0.value, references: array0.references });\n        var b = (_.isArray(array1) ?\n            array1[i_1] :\n            { id: '', start: array1.value, end: array1.value, references: array1.references });\n        var start = (a.isFirst ?\n            { value: a.start, references: a.references } :\n            b.isFirst ?\n                { value: b.start, references: b.references } :\n                operate({ value: a.start, references: joinReferences(a.id, a.references) }, { value: b.start, references: joinReferences(b.id, b.references) }));\n        var end = (a.isFirst ?\n            (a.end !== null ? { value: a.end, references: a.references } : null) :\n            b.isFirst ?\n                (b.end !== null ? { value: b.end, references: b.references } : null) :\n                operate(a.end !== null ? { value: a.end, references: joinReferences(a.id, a.references) } : null, b.end !== null ? { value: b.end, references: joinReferences(b.id, b.references) } : null));\n        if (start !== null) {\n            result.push({\n                id: getId(),\n                start: start.value,\n                end: end === null ? null : end.value,\n                references: joinReferences(start.references, end !== null ? end.references : []),\n                caps: joinCaps(a.caps, b.caps)\n            });\n        }\n    }\n    return cleanInstances(result, false);\n}\nexports.operateOnArrays = operateOnArrays;\n/**\n * Like operateOnArrays, but will multiply the number of elements in array0, with the number of elements in array1\n * @param array0\n * @param array1\n * @param operate\n */\n/*export function operateOnArraysMulti (\n    array0: Array<TimelineObjectInstance> | Reference | null,\n    array1: Array<TimelineObjectInstance> | Reference | null,\n    operate: (a: Reference | null, b: Reference | null) => Reference | null\n) {\n    if (array0 === null) return null\n\n    if (_.isArray(array1)) {\n        let resultArray: Array<TimelineObjectInstance> = []\n        _.each(array1, (array1Val) => {\n            const result = operateOnArrays(array0, { value: array1Val.start, references: array1Val.references } , operate)\n            if (_.isArray(result)) {\n                resultArray = resultArray.concat(result)\n            } else if (result !== null) {\n                resultArray.push({\n                    id: getId(),\n                    start: result.value,\n                    end: (\n                        array1Val.end !== null ?\n                        result.value + (array1Val.end - array1Val.start) :\n                        null\n                    ),\n                    references: result.references\n                })\n            }\n        })\n        return resultArray\n    } else {\n        return operateOnArrays(array0, array1, operate)\n    }\n}\n*/\nfunction applyRepeatingInstances(instances, repeatTime0, options) {\n    if (repeatTime0 === null ||\n        !repeatTime0.value)\n        return instances;\n    var repeatTime = repeatTime0.value;\n    if (isReference(instances)) {\n        instances = [{\n                id: '',\n                start: instances.value,\n                end: null,\n                references: instances.references\n            }];\n    }\n    var repeatedInstances = [];\n    _.each(instances, function (instance) {\n        var startTime = Math.max(options.time - (options.time - instance.start) % repeatTime, instance.start);\n        var endTime = (instance.end === null ?\n            null :\n            instance.end + (startTime - instance.start));\n        var cap = (instance.caps ?\n            _.find(instance.caps, function (cap) { return instance.references.indexOf(cap.id) !== -1; })\n            : null) || null;\n        var limit = options.limitCount || 2;\n        for (var i_2 = 0; i_2 < limit; i_2++) {\n            if (options.limitTime &&\n                startTime >= options.limitTime)\n                break;\n            var cappedStartTime = (cap ?\n                Math.max(cap.start, startTime) :\n                startTime);\n            var cappedEndTime = (cap && cap.end !== null && endTime !== null ?\n                Math.min(cap.end, endTime) :\n                endTime);\n            if ((cappedEndTime || Infinity) > cappedStartTime) {\n                repeatedInstances.push({\n                    id: getId(),\n                    start: cappedStartTime,\n                    end: cappedEndTime,\n                    references: joinReferences(instance.id, instance.references, repeatTime0.references)\n                });\n            }\n            startTime += repeatTime;\n            if (endTime !== null)\n                endTime += repeatTime;\n        }\n    });\n    return cleanInstances(repeatedInstances, false);\n}\nexports.applyRepeatingInstances = applyRepeatingInstances;\nfunction capInstances(instances, parentInstances) {\n    if (isReference(parentInstances) ||\n        parentInstances === null)\n        return instances;\n    var returnInstances = [];\n    _.each(instances, function (instance) {\n        var parent = null;\n        _.each(parentInstances, function (p) {\n            if (instance.start >= p.start &&\n                instance.start < (p.end || Infinity)) {\n                if (parent === null ||\n                    (p.end || Infinity) > (parent.end || Infinity)) {\n                    parent = p;\n                }\n            }\n        });\n        if (!parent) {\n            _.each(parentInstances, function (p) {\n                if ((instance.end || Infinity) > p.start &&\n                    (instance.end || Infinity) <= (p.end || Infinity)) {\n                    if (parent === null ||\n                        (p.end || Infinity) < (parent.end || Infinity)) {\n                        parent = p;\n                    }\n                }\n            });\n        }\n        if (parent) {\n            var parent2 = parent; // cast type\n            var i2 = _.clone(instance);\n            if (parent2.end !== null &&\n                (i2.end || Infinity) > parent2.end) {\n                i2.end = parent2.end;\n            }\n            if ((i2.start || Infinity) < parent2.start) {\n                i2.start = parent2.start;\n            }\n            returnInstances.push(i2);\n        }\n    });\n    return returnInstances;\n}\nexports.capInstances = capInstances;\nfunction isReference(ref) {\n    return (_.isObject(ref) &&\n        !_.isArray(ref) &&\n        ref.value !== undefined &&\n        _.isArray(ref.references) &&\n        ref !== null);\n}\nexports.isReference = isReference;\nfunction joinReferences() {\n    var references = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        references[_i] = arguments[_i];\n    }\n    return _.compact(_.uniq(_.reduce(references, function (memo, ref) {\n        if (_.isString(ref))\n            return memo.concat([ref]);\n        else\n            return memo.concat(ref);\n    }, []))).sort(function (a, b) {\n        if (a > b)\n            return 1;\n        if (a < b)\n            return -1;\n        return 0;\n    });\n}\nexports.joinReferences = joinReferences;\nfunction addCapsToResuming(instance) {\n    var caps = [];\n    for (var _i = 1; _i < arguments.length; _i++) {\n        caps[_i - 1] = arguments[_i];\n    }\n    var capsToAdd = [];\n    _.each(joinCaps.apply(void 0, caps), function (cap) {\n        if (cap.end &&\n            instance.end &&\n            cap.end > instance.end) {\n            capsToAdd.push({\n                id: cap.id,\n                start: 0,\n                end: cap.end\n            });\n        }\n    });\n    instance.caps = joinCaps(instance.caps, capsToAdd);\n}\nexports.addCapsToResuming = addCapsToResuming;\nfunction joinCaps() {\n    var caps = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        caps[_i] = arguments[_i];\n    }\n    return (_.uniq(_.compact(_.reduce(caps, function (memo, cap) {\n        if (cap !== undefined) {\n            return (memo || []).concat(cap);\n        }\n        else\n            return memo;\n    }, [])), false, function (cap) {\n        return cap.id;\n    }));\n}\nexports.joinCaps = joinCaps;\nvar i = 0;\n/**\n * Returns a unique id\n */\nfunction getId() {\n    return '@' + (i++).toString(36);\n}\nexports.getId = getId;\nfunction resetId() {\n    i = 0;\n}\nexports.resetId = resetId;\n//# sourceMappingURL=lib.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar _ = require(\"underscore\");\nfunction addObjectToResolvedTimeline(resolvedTimeline, obj) {\n    resolvedTimeline.objects[obj.id] = obj;\n    if (obj.classes) {\n        _.each(obj.classes, function (className) {\n            if (className) {\n                if (!resolvedTimeline.classes[className])\n                    resolvedTimeline.classes[className] = [];\n                resolvedTimeline.classes[className].push(obj.id);\n            }\n        });\n    }\n    if (obj.layer) {\n        if (!resolvedTimeline.layers[obj.layer])\n            resolvedTimeline.layers[obj.layer] = [];\n        resolvedTimeline.layers[obj.layer].push(obj.id);\n    }\n}\nexports.addObjectToResolvedTimeline = addObjectToResolvedTimeline;\n//# sourceMappingURL=common.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar _ = require(\"underscore\");\nexports.OPERATORS = ['&', '|', '+', '-', '*', '/', '%', '!'];\nfunction interpretExpression(expr) {\n    if (_.isString(expr)) {\n        var operatorList = exports.OPERATORS;\n        var regexpOperators = _.map(operatorList, function (o) { return '\\\\' + o; }).join('');\n        expr = expr.replace(new RegExp('([' + regexpOperators + '\\\\(\\\\)])', 'g'), ' $1 '); // Make sure there's a space between every operator & operand\n        var words = _.compact(expr.split(' '));\n        if (words.length === 0)\n            return null; // empty expression\n        // Fix special case: a + - b\n        for (var i = words.length - 2; i >= 1; i--) {\n            if ((words[i] === '-' || words[i] === '+') && wordIsOperator(operatorList, words[i - 1])) {\n                words[i] = words[i] + words[i + 1];\n                words.splice(i + 1, 1);\n            }\n        }\n        var innerExpression = wrapInnerExpressions(words);\n        if (innerExpression.rest.length)\n            throw new Error('interpretExpression: syntax error: parentheses don\\'t add up in \"' + expr + '\".');\n        if (innerExpression.inner.length % 2 !== 1)\n            throw new Error('interpretExpression: operands & operators don\\'t add up: \"' + innerExpression.inner.join(' ') + '\".');\n        var expression = words2Expression(operatorList, innerExpression.inner);\n        validateExpression(operatorList, expression);\n        return expression;\n    }\n    else if (_.isNumber(expr)) {\n        return expr;\n        // return {\n        // \tl: expr,\n        // \to: '+',\n        // \tr: 0\n        // }\n    }\n    else {\n        return expr;\n    }\n}\nexports.interpretExpression = interpretExpression;\nfunction wordIsOperator(operatorList, word) {\n    if (operatorList.indexOf(word) !== -1)\n        return true;\n    return false;\n}\n// Turns ['a', '(', 'b', 'c', ')'] into ['a', ['b', 'c']]\n// or ['a', '&', '!', 'b'] into ['a', '&', ['', '!', 'b']]\nfunction wrapInnerExpressions(words) {\n    for (var i = 0; i < words.length; i++) {\n        if (words[i] === '(') {\n            var tmp = wrapInnerExpressions(words.slice(i + 1));\n            // insert inner expression and remove tha\n            words[i] = tmp.inner;\n            words.splice.apply(words, [i + 1, 99999].concat(tmp.rest));\n        }\n        else if (words[i] === ')') {\n            return {\n                inner: words.slice(0, i),\n                rest: words.slice(i + 1)\n            };\n        }\n        else if (words[i] === '!') {\n            var tmp = wrapInnerExpressions(words.slice(i + 1));\n            // insert inner expression after the '!'\n            words[i] = ['', '!'].concat(tmp.inner);\n            words.splice.apply(words, [i + 1, 99999].concat(tmp.rest));\n        }\n    }\n    return {\n        inner: words,\n        rest: []\n    };\n}\nexports.wrapInnerExpressions = wrapInnerExpressions;\nfunction words2Expression(operatorList, words) {\n    if (!words || !words.length)\n        throw new Error('words2Expression: syntax error: unbalanced expression');\n    while (words.length === 1 && _.isArray(words[0]))\n        words = words[0];\n    if (words.length === 1)\n        return words[0];\n    // Find the operator with the highest priority:\n    var operatorI = -1;\n    _.each(operatorList, function (operator) {\n        if (operatorI === -1) {\n            operatorI = words.lastIndexOf(operator);\n        }\n    });\n    if (operatorI !== -1) {\n        var l = words.slice(0, operatorI);\n        var r = words.slice(operatorI + 1);\n        var expr = {\n            l: words2Expression(operatorList, l),\n            o: words[operatorI],\n            r: words2Expression(operatorList, r)\n        };\n        return expr;\n    }\n    else\n        throw new Error('words2Expression: syntax error: operator not found: \"' + (words.join(' ')) + '\"');\n}\nfunction validateExpression(operatorList, expr0, breadcrumbs) {\n    if (!breadcrumbs)\n        breadcrumbs = 'ROOT';\n    if (_.isObject(expr0) && !_.isArray(expr0)) {\n        var expr = expr0;\n        if (!_.has(expr, 'l'))\n            throw new Error(\"validateExpression: \" + breadcrumbs + \".l missing in \" + JSON.stringify(expr));\n        if (!_.has(expr, 'o'))\n            throw new Error(\"validateExpression: \" + breadcrumbs + \".o missing in \" + JSON.stringify(expr));\n        if (!_.has(expr, 'r'))\n            throw new Error(\"validateExpression: \" + breadcrumbs + \".r missing in \" + JSON.stringify(expr));\n        if (!_.isString(expr.o))\n            throw new Error(\"validateExpression: \" + breadcrumbs + \".o not a string\");\n        if (!wordIsOperator(operatorList, expr.o))\n            throw new Error(breadcrumbs + '.o not valid: \"' + expr.o + '\"');\n        validateExpression(operatorList, expr.l, breadcrumbs + '.l');\n        validateExpression(operatorList, expr.r, breadcrumbs + '.r');\n    }\n    else if (!_.isNull(expr0) && !_.isString(expr0) && !_.isNumber(expr0)) {\n        throw new Error(\"validateExpression: \" + breadcrumbs + \" is of invalid type\");\n    }\n}\n//# sourceMappingURL=expression.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar _ = require(\"underscore\");\nvar lib_1 = require(\"../lib\");\nvar validate_1 = require(\"./validate\");\nvar expression_1 = require(\"./expression\");\nvar state_1 = require(\"./state\");\nvar common_1 = require(\"./common\");\nvar Resolver = /** @class */ (function () {\n    function Resolver() {\n    }\n    /**\n     * Go through all objects on the timeline and calculate all the timings.\n     * Returns a ResolvedTimeline which can be piped into Resolver.getState()\n     * @param timeline Array of timeline objects\n     * @param options Resolve options\n     */\n    Resolver.resolveTimeline = function (timeline, options) {\n        if (!_.isArray(timeline))\n            throw new Error('resolveTimeline: parameter timeline missing');\n        if (!options)\n            throw new Error('resolveTimeline: parameter options missing');\n        validate_1.validateTimeline(timeline, false);\n        lib_1.resetId();\n        var resolvedTimeline = {\n            options: _.clone(options),\n            objects: {},\n            classes: {},\n            layers: {},\n            statistics: {\n                unresolvedCount: 0,\n                resolvedCount: 0,\n                resolvedInstanceCount: 0,\n                resolvedObjectCount: 0,\n                resolvedGroupCount: 0,\n                resolvedKeyframeCount: 0\n            }\n        };\n        // Step 1: pre-populate resolvedTimeline with objects\n        var addToResolvedTimeline = function (obj, levelDeep, parentId, isKeyframe) {\n            if (resolvedTimeline.objects[obj.id])\n                throw Error(\"All timelineObjects must be unique! (duplicate: \\\"\" + obj.id + \"\\\")\");\n            var o = lib_1.extendMandadory(_.clone(obj), {\n                resolved: {\n                    resolved: false,\n                    resolving: false,\n                    instances: [],\n                    levelDeep: levelDeep\n                }\n            });\n            if (parentId)\n                o.resolved.parentId = parentId;\n            if (isKeyframe)\n                o.resolved.isKeyframe = true;\n            common_1.addObjectToResolvedTimeline(resolvedTimeline, o);\n            // Add children:\n            if (obj.isGroup && obj.children) {\n                _.each(obj.children, function (child) {\n                    addToResolvedTimeline(child, levelDeep + 1, obj.id);\n                });\n            }\n            // Add keyframes:\n            if (obj.keyframes) {\n                _.each(obj.keyframes, function (keyframe) {\n                    var kf2 = lib_1.extendMandadory(_.clone(keyframe), {\n                        layer: ''\n                    });\n                    addToResolvedTimeline(kf2, levelDeep + 1, obj.id, true);\n                });\n            }\n        };\n        _.each(timeline, function (obj) {\n            addToResolvedTimeline(obj, 0);\n        });\n        // Step 2: go though and resolve the objects\n        _.each(resolvedTimeline.objects, function (obj) {\n            resolveTimelineObj(resolvedTimeline, obj);\n        });\n        return resolvedTimeline;\n    };\n    /** Calculate the state for all points in time.  */\n    Resolver.resolveAllStates = function (resolvedTimeline) {\n        return state_1.resolveStates(resolvedTimeline);\n    };\n    /**\n     * Calculate the state at a given point in time.\n     * Using a ResolvedTimeline calculated by Resolver.resolveTimeline() or\n     * a ResolvedStates calculated by Resolver.resolveAllStates()\n     * @param resolved ResolvedTimeline calculated by Resolver.resolveTimeline.\n     * @param time The point in time where to calculate the state\n     * @param eventLimit (Optional) Limits the number of returned upcoming events.\n     */\n    Resolver.getState = function (resolved, time, eventLimit) {\n        return state_1.getState(resolved, time, eventLimit);\n    };\n    return Resolver;\n}());\nexports.Resolver = Resolver;\nfunction resolveTimelineObj(resolvedTimeline, obj) {\n    if (obj.resolved.resolved)\n        return;\n    if (obj.resolved.resolving)\n        throw new Error(\"Circular dependency when trying to resolve \\\"\" + obj.id + \"\\\"\");\n    obj.resolved.resolving = true;\n    var instances = [];\n    var repeatingExpr = (obj.enable.repeating !== undefined ?\n        expression_1.interpretExpression(obj.enable.repeating) :\n        null);\n    var lookedupRepeating = lookupExpression(resolvedTimeline, obj, repeatingExpr, 'duration');\n    if (_.isArray(lookedupRepeating)) {\n        throw new Error(\"lookupExpression should never return an array for .duration lookup\"); // perhaps tmp? maybe revisit this at some point\n    }\n    var start = (obj.enable.while !== undefined ?\n        obj.enable.while :\n        obj.enable.start !== undefined ?\n            obj.enable.start :\n            '');\n    if (obj.enable.while === '1') {\n        start = 'true';\n    }\n    else if (obj.enable.while === '0') {\n        start = 'false';\n    }\n    var startExpr = expression_1.interpretExpression(start);\n    var parentInstances = null;\n    var hasParent = false;\n    var referToParent = false;\n    if (obj.resolved.parentId) {\n        hasParent = true;\n        parentInstances = lookupExpression(resolvedTimeline, obj, expression_1.interpretExpression(\"#\" + obj.resolved.parentId), 'start');\n        if (lib_1.isConstant(startExpr)) {\n            // Only use parent if the expression resolves to a number (ie doesn't contain any references)\n            referToParent = true;\n        }\n    }\n    var lookedupStarts = lookupExpression(resolvedTimeline, obj, startExpr, 'start');\n    var applyParentInstances = function (value) {\n        var operate = function (a, b) {\n            if (a === null || b === null)\n                return null;\n            return {\n                value: a.value + b.value,\n                references: lib_1.joinReferences(a.references, b.references)\n            };\n        };\n        return lib_1.operateOnArrays(parentInstances, value, operate);\n    };\n    if (referToParent) {\n        lookedupStarts = applyParentInstances(lookedupStarts);\n    }\n    if (obj.enable.while) {\n        if (_.isArray(lookedupStarts)) {\n            instances = lookedupStarts;\n        }\n        else if (lookedupStarts !== null) {\n            instances = [{\n                    id: lib_1.getId(),\n                    start: lookedupStarts.value,\n                    end: null,\n                    references: lookedupStarts.references\n                }];\n        }\n    }\n    else {\n        var events_1 = [];\n        var iStart_1 = 0;\n        var iEnd_1 = 0;\n        if (_.isArray(lookedupStarts)) {\n            _.each(lookedupStarts, function (instance) {\n                events_1.push({\n                    time: instance.start,\n                    value: true,\n                    data: { instance: instance, id: obj.id + '_' + iStart_1++ },\n                    references: instance.references\n                });\n            });\n        }\n        else if (lookedupStarts !== null) {\n            events_1.push({\n                time: lookedupStarts.value,\n                value: true,\n                data: { instance: { id: lib_1.getId(), start: lookedupStarts.value, end: null, references: lookedupStarts.references }, id: obj.id + '_' + iStart_1++ },\n                references: lookedupStarts.references\n            });\n        }\n        if (obj.enable.end !== undefined) {\n            var endExpr = expression_1.interpretExpression(obj.enable.end);\n            // lookedupEnds will contain an inverted list of instances. Therefore .start means an end\n            var lookedupEnds = (endExpr ?\n                lookupExpression(resolvedTimeline, obj, endExpr, 'end') :\n                null);\n            if (referToParent && lib_1.isConstant(endExpr)) {\n                lookedupEnds = applyParentInstances(lookedupEnds);\n            }\n            if (_.isArray(lookedupEnds)) {\n                _.each(lookedupEnds, function (instance) {\n                    events_1.push({\n                        time: instance.start,\n                        value: false,\n                        data: { instance: instance, id: obj.id + '_' + iEnd_1++ },\n                        references: instance.references\n                    });\n                });\n            }\n            else if (lookedupEnds !== null) {\n                events_1.push({\n                    time: lookedupEnds.value,\n                    value: false,\n                    data: { instance: { id: lib_1.getId(), start: lookedupEnds.value, end: null, references: lookedupEnds.references }, id: obj.id + '_' + iEnd_1++ },\n                    references: lookedupEnds.references\n                });\n            }\n        }\n        else if (obj.enable.duration !== undefined) {\n            var durationExpr = expression_1.interpretExpression(obj.enable.duration);\n            var lookedupDuration = lookupExpression(resolvedTimeline, obj, durationExpr, 'duration');\n            if (_.isArray(lookedupDuration) && lookedupDuration.length === 1) {\n                lookedupDuration = {\n                    value: lookedupDuration[0].start,\n                    references: lookedupDuration[0].references\n                };\n            }\n            if (_.isArray(lookedupDuration)) {\n                throw new Error(\"lookupExpression should never return an array for .duration lookup\"); // perhaps tmp? maybe revisit this at some point\n            }\n            else if (lookedupDuration !== null) {\n                if (lookedupRepeating !== null &&\n                    lookedupDuration.value > lookedupRepeating.value)\n                    lookedupDuration.value = lookedupRepeating.value;\n                var tmpLookedupDuration_1 = lookedupDuration; // cast type\n                _.each(events_1, function (e) {\n                    if (e.value) {\n                        var time = e.time + tmpLookedupDuration_1.value;\n                        var references = lib_1.joinReferences(e.references, tmpLookedupDuration_1.references);\n                        events_1.push({\n                            time: time,\n                            value: false,\n                            data: { id: e.data.id, instance: { id: e.data.instance.id, start: time, end: null, references: references } },\n                            references: references\n                        });\n                    }\n                });\n            }\n        }\n        instances = lib_1.convertEventsToInstances(events_1, false);\n    }\n    if (hasParent) {\n        // figure out what parent-instance the instances are tied to, and cap them\n        var cappedInstances_1 = [];\n        _.each(instances, function (instance) {\n            if (_.isArray(parentInstances)) {\n                var parentInstance = _.find(parentInstances, function (parentInstance) {\n                    return instance.references.indexOf(parentInstance.id) !== -1;\n                });\n                var cappedInstance = (parentInstance ?\n                    lib_1.capInstances([instance], [parentInstance])[0] :\n                    instance);\n                if (cappedInstance) {\n                    if (parentInstance) {\n                        if (!cappedInstance.caps)\n                            cappedInstance.caps = [];\n                        cappedInstance.caps.push({\n                            id: parentInstance.id,\n                            start: parentInstance.start,\n                            end: parentInstance.end\n                        });\n                    }\n                    cappedInstances_1.push(cappedInstance);\n                }\n            }\n        });\n        instances = cappedInstances_1;\n    }\n    instances = lib_1.applyRepeatingInstances(instances, lookedupRepeating, resolvedTimeline.options);\n    // filter out zero-length instances:\n    instances = _.filter(instances, function (instance) {\n        return ((instance.end || Infinity) > instance.start);\n    });\n    obj.resolved.resolved = true;\n    obj.resolved.resolving = false;\n    obj.resolved.instances = instances;\n    if (instances.length) {\n        resolvedTimeline.statistics.resolvedInstanceCount += instances.length;\n        resolvedTimeline.statistics.resolvedCount += 1;\n        if (obj.isGroup) {\n            resolvedTimeline.statistics.resolvedGroupCount += 1;\n        }\n        if (obj.resolved.isKeyframe) {\n            resolvedTimeline.statistics.resolvedKeyframeCount += 1;\n        }\n        else {\n            resolvedTimeline.statistics.resolvedObjectCount += 1;\n        }\n    }\n    else {\n        resolvedTimeline.statistics.unresolvedCount += 1;\n    }\n}\nexports.resolveTimelineObj = resolveTimelineObj;\nfunction lookupExpression(resolvedTimeline, obj, expr, context) {\n    if (expr === null)\n        return null;\n    if (_.isString(expr) &&\n        lib_1.isNumeric(expr)) {\n        return {\n            value: parseFloat(expr),\n            references: []\n        };\n    }\n    else if (_.isNumber(expr)) {\n        return {\n            value: expr,\n            references: []\n        };\n    }\n    else if (_.isString(expr)) {\n        expr = expr.trim();\n        if (lib_1.isConstant(expr)) {\n            if (expr.match(/^true$/i)) {\n                return {\n                    value: 0,\n                    references: []\n                };\n            }\n            else if (expr.match(/^false$/i)) {\n                return [];\n            }\n        }\n        // Look up string\n        var invert = false;\n        var ignoreFirstIfZero = false;\n        var referencedObjs_1 = [];\n        var ref = context;\n        var rest = '';\n        // Match id, example: \"#objectId.start\"\n        var m = expr.match(/^\\W*#([^.]+)(.*)/);\n        if (m) {\n            var id = m[1];\n            rest = m[2];\n            var obj_1 = resolvedTimeline.objects[id];\n            if (obj_1) {\n                referencedObjs_1.push(obj_1);\n            }\n        }\n        else {\n            // Match class, example: \".className.start\"\n            var m_1 = expr.match(/^\\W*\\.([^.]+)(.*)/);\n            if (m_1) {\n                var className = m_1[1];\n                rest = m_1[2];\n                var objIds = resolvedTimeline.classes[className] || [];\n                _.each(objIds, function (objId) {\n                    var obj = resolvedTimeline.objects[objId];\n                    if (obj) {\n                        referencedObjs_1.push(obj);\n                    }\n                });\n            }\n            else {\n                // Match layer, example: \"$layer\"\n                var m_2 = expr.match(/^\\W*\\$([^.]+)(.*)/);\n                if (m_2) {\n                    var layer = m_2[1];\n                    rest = m_2[2];\n                    var objIds = resolvedTimeline.layers[layer] || [];\n                    _.each(objIds, function (objId) {\n                        var obj = resolvedTimeline.objects[objId];\n                        if (obj) {\n                            referencedObjs_1.push(obj);\n                        }\n                    });\n                }\n            }\n        }\n        if (referencedObjs_1.length) {\n            if (rest.match(/start/))\n                ref = 'start';\n            if (rest.match(/end/))\n                ref = 'end';\n            if (rest.match(/duration/))\n                ref = 'duration';\n            if (ref === 'duration') {\n                // Duration refers to the first object on the resolved timeline\n                var instanceDurations_1 = [];\n                _.each(referencedObjs_1, function (referencedObj) {\n                    resolveTimelineObj(resolvedTimeline, referencedObj);\n                    if (referencedObj.resolved.resolved) {\n                        var firstInstance = _.first(referencedObj.resolved.instances);\n                        if (firstInstance) {\n                            var duration = (firstInstance && firstInstance.end !== null ?\n                                firstInstance.end - firstInstance.start :\n                                null);\n                            if (duration !== null) {\n                                instanceDurations_1.push({\n                                    value: duration,\n                                    references: lib_1.joinReferences(referencedObj.id, firstInstance.references)\n                                });\n                            }\n                        }\n                    }\n                });\n                var firstDuration_1 = null;\n                _.each(instanceDurations_1, function (d) {\n                    if (firstDuration_1 === null || d.value < firstDuration_1.value)\n                        firstDuration_1 = d;\n                });\n                return firstDuration_1;\n            }\n            else {\n                var returnInstances_1 = [];\n                if (ref === 'start') {\n                    // nothing\n                }\n                else if (ref === 'end') {\n                    invert = !invert;\n                    ignoreFirstIfZero = true;\n                }\n                else\n                    throw Error(\"Unknown ref: \\\"\" + ref + \"\\\"\");\n                _.each(referencedObjs_1, function (referencedObj) {\n                    resolveTimelineObj(resolvedTimeline, referencedObj);\n                    if (referencedObj.resolved.resolved) {\n                        returnInstances_1 = returnInstances_1.concat(referencedObj.resolved.instances);\n                    }\n                });\n                if (returnInstances_1.length) {\n                    if (invert) {\n                        returnInstances_1 = lib_1.invertInstances(returnInstances_1);\n                    }\n                    else {\n                        returnInstances_1 = lib_1.cleanInstances(returnInstances_1, true, true);\n                    }\n                    if (ignoreFirstIfZero) {\n                        var first = _.first(returnInstances_1);\n                        if (first && first.start === 0) {\n                            returnInstances_1.splice(0, 1);\n                        }\n                    }\n                    return returnInstances_1;\n                }\n                else {\n                    return null;\n                }\n            }\n        }\n        else {\n            return null;\n        }\n    }\n    else {\n        if (expr) {\n            var lookupExpr = {\n                l: lookupExpression(resolvedTimeline, obj, expr.l, context),\n                o: expr.o,\n                r: lookupExpression(resolvedTimeline, obj, expr.r, context)\n            };\n            if (lookupExpr.o === '!') {\n                // Discard l, invert and return r:\n                if (lookupExpr.r && _.isArray(lookupExpr.r) && lookupExpr.r.length) {\n                    return lib_1.invertInstances(lookupExpr.r);\n                }\n                else {\n                    // We can't invert a value\n                    return lookupExpr.r;\n                }\n            }\n            else {\n                if (_.isNull(lookupExpr.l) ||\n                    _.isNull(lookupExpr.r)) {\n                    return null;\n                }\n                if (lookupExpr.o === '&' ||\n                    lookupExpr.o === '|') {\n                    var events_2 = [];\n                    var addEvents = function (instances, left) {\n                        _.each(instances, function (instance) {\n                            events_2.push({\n                                left: left,\n                                time: instance.start,\n                                value: true,\n                                references: [],\n                                data: true,\n                                instance: instance\n                            });\n                            if (instance.end !== null) {\n                                events_2.push({\n                                    left: left,\n                                    time: instance.end,\n                                    value: false,\n                                    references: [],\n                                    data: false,\n                                    instance: instance\n                                });\n                            }\n                        });\n                    };\n                    if (_.isArray(lookupExpr.l))\n                        addEvents(lookupExpr.l, true);\n                    if (_.isArray(lookupExpr.r))\n                        addEvents(lookupExpr.r, false);\n                    events_2 = lib_1.sortEvents(events_2);\n                    var calcResult = (lookupExpr.o === '&' ?\n                        function (left, right) { return !!(left && right); } :\n                        lookupExpr.o === '|' ?\n                            function (left, right) { return !!(left || right); } :\n                            function () { return false; });\n                    var leftValue = (lib_1.isReference(lookupExpr.l) ? !!lookupExpr.l.value : false);\n                    var rightValue = (lib_1.isReference(lookupExpr.r) ? !!lookupExpr.r.value : false);\n                    var leftInstance = null;\n                    var rightInstance = null;\n                    var resultValue = calcResult(leftValue, rightValue);\n                    var resultReferences = lib_1.joinReferences((lib_1.isReference(lookupExpr.l) ? lookupExpr.l.references : []), (lib_1.isReference(lookupExpr.r) ? lookupExpr.r.references : []));\n                    var instances_1 = [];\n                    var updateInstance = function (time, value, references, caps) {\n                        if (value) {\n                            instances_1.push({\n                                id: lib_1.getId(),\n                                start: time,\n                                end: null,\n                                references: references,\n                                caps: caps\n                            });\n                        }\n                        else {\n                            var last = _.last(instances_1);\n                            if (last) {\n                                last.end = time;\n                                // don't update reference on end\n                            }\n                        }\n                    };\n                    updateInstance(0, resultValue, resultReferences, []);\n                    for (var i = 0; i < events_2.length; i++) {\n                        var e = events_2[i];\n                        var next = events_2[i + 1];\n                        if (e.left) {\n                            leftValue = e.value;\n                            leftInstance = e.instance;\n                        }\n                        else {\n                            rightValue = e.value;\n                            rightInstance = e.instance;\n                        }\n                        if (!next || next.time !== e.time) {\n                            var newResultValue = calcResult(leftValue, rightValue);\n                            var resultReferences_1 = lib_1.joinReferences(leftInstance ? leftInstance.references : [], rightInstance ? rightInstance.references : []);\n                            var resultCaps = ((leftInstance ? leftInstance.caps || [] : []).concat(rightInstance ? rightInstance.caps || [] : []));\n                            if (newResultValue !== resultValue) {\n                                updateInstance(e.time, newResultValue, resultReferences_1, resultCaps);\n                                resultValue = newResultValue;\n                            }\n                        }\n                    }\n                    return instances_1;\n                }\n                else {\n                    var operateInner_1 = (lookupExpr.o === '+' ?\n                        function (a, b) { return { value: a.value + b.value, references: lib_1.joinReferences(a.references, b.references) }; } :\n                        lookupExpr.o === '-' ?\n                            function (a, b) { return { value: a.value - b.value, references: lib_1.joinReferences(a.references, b.references) }; } :\n                            lookupExpr.o === '*' ?\n                                function (a, b) { return { value: a.value * b.value, references: lib_1.joinReferences(a.references, b.references) }; } :\n                                lookupExpr.o === '/' ?\n                                    function (a, b) { return { value: a.value / b.value, references: lib_1.joinReferences(a.references, b.references) }; } :\n                                    lookupExpr.o === '%' ?\n                                        function (a, b) { return { value: a.value % b.value, references: lib_1.joinReferences(a.references, b.references) }; } :\n                                        function () { return null; });\n                    var operate = function (a, b) {\n                        if (a === null || b === null)\n                            return null;\n                        return operateInner_1(a, b);\n                    };\n                    var result = lib_1.operateOnArrays(lookupExpr.l, lookupExpr.r, operate);\n                    return result;\n                }\n            }\n        }\n    }\n    return null;\n}\nexports.lookupExpression = lookupExpression;\n//# sourceMappingURL=resolver.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar _ = require(\"underscore\");\nvar common_1 = require(\"./common\");\nvar enums_1 = require(\"../api/enums\");\nfunction getState(resolved, time, eventLimit) {\n    if (eventLimit === void 0) { eventLimit = 0; }\n    var resolvedStates = (isResolvedStates(resolved) ?\n        resolved :\n        resolveStates(resolved, time));\n    var state = {\n        time: time,\n        layers: {},\n        nextEvents: _.filter(resolvedStates.nextEvents, function (e) { return e.time > time; })\n    };\n    if (eventLimit)\n        state.nextEvents = state.nextEvents.slice(0, eventLimit);\n    _.each(_.keys(resolvedStates.layers), function (layer) {\n        var o = getStateAtTime(resolvedStates.state, layer, time);\n        if (o)\n            state.layers[layer] = o;\n    });\n    return state;\n}\nexports.getState = getState;\nfunction resolveStates(resolved, onlyForTime) {\n    var resolvedStates = {\n        options: resolved.options,\n        statistics: resolved.statistics,\n        // These will be re-created during the state-resolving:\n        objects: {},\n        classes: {},\n        layers: {},\n        state: {},\n        nextEvents: []\n    };\n    var resolvedObjects = _.values(resolved.objects);\n    // Sort to make sure parent groups are evaluated before their children:\n    resolvedObjects.sort(function (a, b) {\n        if ((a.resolved.levelDeep || 0) > (b.resolved.levelDeep || 0))\n            return 1;\n        if ((a.resolved.levelDeep || 0) < (b.resolved.levelDeep || 0))\n            return -1;\n        if (a.id > a.id)\n            return 1;\n        if (a.id < a.id)\n            return -1;\n        return 0;\n    });\n    // Step 1: Collect all points-of-interest (which points in time we want to evaluate)\n    // and which instances that are interesting\n    var pointsInTime = {};\n    var eventObjectTimes = {};\n    _.each(resolvedObjects, function (obj) {\n        if (!obj.disabled &&\n            obj.resolved.resolved &&\n            !obj.resolved.isKeyframe) {\n            var parentTimes_1 = getTimesFromParents(resolved, obj);\n            if (obj.layer) { // if layer is empty, don't put in state\n                _.each(obj.resolved.instances, function (instance) {\n                    var useInstance = true;\n                    if (onlyForTime) {\n                        useInstance = ((instance.start || 0) <= onlyForTime &&\n                            (instance.end || Infinity) > onlyForTime);\n                    }\n                    if (useInstance) {\n                        var timeEvents_1 = [];\n                        timeEvents_1.push({ time: instance.start, enable: true });\n                        if (instance.end)\n                            timeEvents_1.push({ time: instance.end, enable: false });\n                        // Also include times from parents, as they could affect the state of this instance:\n                        _.each(parentTimes_1, function (parentTime) {\n                            if (parentTime && (parentTime.time > (instance.start || 0) &&\n                                parentTime.time < (instance.end || Infinity))) {\n                                timeEvents_1.push(parentTime);\n                            }\n                        });\n                        // Save a reference to this instance on all points in time that could affect it:\n                        _.each(timeEvents_1, function (timeEvent) {\n                            if (!pointsInTime[timeEvent.time + ''])\n                                pointsInTime[timeEvent.time + ''] = [];\n                            pointsInTime[timeEvent.time + ''].push({ obj: obj, instance: instance, enable: timeEvent.enable });\n                        });\n                    }\n                });\n            }\n        }\n    });\n    // Also add keyframes to pointsInTime:\n    _.each(resolvedObjects, function (obj) {\n        if (!obj.disabled &&\n            obj.resolved.resolved &&\n            obj.resolved.isKeyframe &&\n            obj.resolved.parentId) {\n            _.each(obj.resolved.instances, function (instance) {\n                var timeEvents = [];\n                if (instance.start) {\n                    timeEvents.push({ time: instance.start, enable: true });\n                }\n                else {\n                    timeEvents.push({ time: instance.start, enable: true });\n                }\n                _.each(timeEvents, function (timeEvent) {\n                    if (!pointsInTime[timeEvent.time + ''])\n                        pointsInTime[timeEvent.time + ''] = [];\n                    pointsInTime[timeEvent.time + ''].push({ obj: obj, instance: instance, enable: timeEvent.enable });\n                });\n            });\n        }\n    });\n    // Step 2: Resolve the state for the points-of-interest\n    // This is done by sweeping the points-of-interest chronologically,\n    // determining the state for every point in time by adding & removing objects from aspiringInstances\n    // Then sorting it to determine who takes precedence\n    var currentState = {};\n    var activeObjIds = {};\n    /** The objects in aspiringInstances  */\n    var aspiringInstances = {};\n    var keyframeEvents = [];\n    var times = _.map(_.keys(pointsInTime), function (time) { return parseFloat(time); });\n    // Sort chronologically:\n    times.sort(function (a, b) {\n        return a - b;\n    });\n    _.each(times, function (time) {\n        var instancesToCheck = pointsInTime[time];\n        var checkedObjectsThisTime = {};\n        instancesToCheck.sort(function (a, b) {\n            if (a.obj.resolved && b.obj.resolved) {\n                // Keyframes comes last:\n                if (a.obj.resolved.isKeyframe && !b.obj.resolved.isKeyframe)\n                    return 1;\n                if (!a.obj.resolved.isKeyframe && b.obj.resolved.isKeyframe)\n                    return -1;\n                // Ending events come before starting events:\n                if (a.enable && !b.enable)\n                    return 1;\n                if (!a.enable && b.enable)\n                    return -1;\n                // Deeper objects (children in groups) comes later, we want to check the parent groups first:\n                if ((a.obj.resolved.levelDeep || 0) > (b.obj.resolved.levelDeep || 0))\n                    return 1;\n                if ((a.obj.resolved.levelDeep || 0) < (b.obj.resolved.levelDeep || 0))\n                    return -1;\n            }\n            return 0;\n        });\n        _.each(instancesToCheck, function (o) {\n            var obj = o.obj;\n            var instance = o.instance;\n            var toBeEnabled = ((instance.start || 0) <= time &&\n                (instance.end || Infinity) > time);\n            var layer = obj.layer + '';\n            if (!checkedObjectsThisTime[obj.id + '_' + instance.id + '_' + o.enable]) { // Only check each object and event-type once for every point in time\n                checkedObjectsThisTime[obj.id + '_' + instance.id + '_' + o.enable] = true;\n                if (!obj.resolved.isKeyframe) {\n                    // If object has a parent, only set if parent is on a layer (if layer is set for parent)\n                    if (toBeEnabled && obj.resolved.parentId) {\n                        var parentObj = (obj.resolved.parentId ?\n                            resolved.objects[obj.resolved.parentId] :\n                            null);\n                        toBeEnabled = !!(parentObj &&\n                            (!parentObj.layer ||\n                                activeObjIds[parentObj.id]));\n                    }\n                    if (!aspiringInstances[obj.layer])\n                        aspiringInstances[obj.layer] = [];\n                    if (toBeEnabled) {\n                        // The instance wants to be enabled (is starting)\n                        // Add to aspiringInstances:\n                        aspiringInstances[obj.layer].push({ obj: obj, instance: instance });\n                    }\n                    else {\n                        // The instance doesn't want to be enabled (is ending)\n                        // Remove from aspiringInstances:\n                        aspiringInstances[layer] = _.reject(aspiringInstances[layer] || [], function (o) { return o.obj.id === obj.id; });\n                    }\n                    // Evaluate the layer to determine who has the throne:\n                    aspiringInstances[layer].sort(function (a, b) {\n                        // Determine who takes precedence:\n                        // First, sort using priority\n                        if ((a.obj.priority || 0) < (b.obj.priority || 0))\n                            return 1;\n                        if ((a.obj.priority || 0) > (b.obj.priority || 0))\n                            return -1;\n                        // Then, sort using the start time\n                        if ((a.instance.start || 0) < (b.instance.start || 0))\n                            return 1;\n                        if ((a.instance.start || 0) > (b.instance.start || 0))\n                            return -1;\n                        // Last resort: sort using id:\n                        if (a.obj.id > b.obj.id)\n                            return 1;\n                        if (a.obj.id < b.obj.id)\n                            return -1;\n                        return 0;\n                    });\n                    // Now, the one on top has the throne\n                    // Update current state:\n                    var currentOnTopOfLayer = aspiringInstances[layer][0];\n                    var prevObj = currentState[layer];\n                    var replaceOldObj = (currentOnTopOfLayer &&\n                        (!prevObj ||\n                            prevObj.id !== currentOnTopOfLayer.obj.id ||\n                            prevObj.instance.id !== currentOnTopOfLayer.instance.id));\n                    var removeOldObj = (!currentOnTopOfLayer &&\n                        prevObj);\n                    if (replaceOldObj || removeOldObj) {\n                        if (prevObj) {\n                            // Cap the old instance, so it'll end at this point in time:\n                            prevObj.instance.end = time;\n                            // Update activeObjIds:\n                            delete activeObjIds[prevObj.id];\n                            // Add to nextEvents:\n                            if (!onlyForTime ||\n                                prevObj.instance.end > onlyForTime) {\n                                resolvedStates.nextEvents.push({\n                                    type: enums_1.EventType.END,\n                                    time: prevObj.instance.end,\n                                    objId: prevObj.id\n                                });\n                                eventObjectTimes[instance.end + ''] = enums_1.EventType.END;\n                            }\n                        }\n                    }\n                    if (replaceOldObj) {\n                        // Set the new object to State\n                        // Construct a new object clone:\n                        var newObj_1;\n                        if (resolvedStates.objects[currentOnTopOfLayer.obj.id]) {\n                            // Use the already existing one\n                            newObj_1 = resolvedStates.objects[currentOnTopOfLayer.obj.id];\n                        }\n                        else {\n                            newObj_1 = _.clone(currentOnTopOfLayer.obj);\n                            newObj_1.content = JSON.parse(JSON.stringify(newObj_1.content));\n                            newObj_1.resolved = tslib_1.__assign({}, newObj_1.resolved || {}, { instances: [] });\n                            common_1.addObjectToResolvedTimeline(resolvedStates, newObj_1);\n                        }\n                        var newInstance_1 = tslib_1.__assign({}, currentOnTopOfLayer.instance, { \n                            // We're setting new start & end times so they match up with the state:\n                            start: time, end: null, fromInstanceId: currentOnTopOfLayer.instance.id });\n                        // Make the instance id unique:\n                        _.each(newObj_1.resolved.instances, function (instance) {\n                            if (instance.id === newInstance_1.id) {\n                                newInstance_1.id = newInstance_1.id + '_$' + newObj_1.resolved.instances.length;\n                            }\n                        });\n                        newObj_1.resolved.instances.push(newInstance_1);\n                        var newObjInstance = tslib_1.__assign({}, newObj_1, { instance: newInstance_1 });\n                        // Save to current state:\n                        currentState[layer] = newObjInstance;\n                        // Update activeObjIds:\n                        activeObjIds[newObjInstance.id] = newObjInstance;\n                        // Update the tracking state as well:\n                        setStateAtTime(resolvedStates.state, layer, time, newObjInstance);\n                        // Add to nextEvents:\n                        if (newInstance_1.start > (onlyForTime || 0)) {\n                            resolvedStates.nextEvents.push({\n                                type: enums_1.EventType.START,\n                                time: newInstance_1.start,\n                                objId: obj.id\n                            });\n                            eventObjectTimes[newInstance_1.start + ''] = enums_1.EventType.START;\n                        }\n                    }\n                    else if (removeOldObj) {\n                        // Remove from current state:\n                        delete currentState[layer];\n                        // Update the tracking state as well:\n                        setStateAtTime(resolvedStates.state, layer, time, null);\n                    }\n                }\n                else {\n                    // Is a keyframe\n                    var keyframe = obj;\n                    // Add keyframe to resolvedStates.objects:\n                    resolvedStates.objects[keyframe.id] = keyframe;\n                    // Check if the keyframe's parent is currently active?\n                    if (keyframe.resolved.parentId) {\n                        var parentObj = activeObjIds[keyframe.resolved.parentId];\n                        if (parentObj && parentObj.layer) { // keyframe is on an active object\n                            var parentObjInstance = currentState[parentObj.layer];\n                            if (parentObjInstance) {\n                                var keyframeInstance = tslib_1.__assign({}, keyframe, { instance: instance, isKeyframe: true, keyframeEndTime: instance.end });\n                                // Note: The keyframes are a little bit special, since their contents are applied to their parents.\n                                // That application is done in the getStateAtTime function.\n                                // Add keyframe to the tracking state:\n                                addKeyframeAtTime(resolvedStates.state, parentObj.layer + '', time, keyframeInstance);\n                                // Add keyframe to nextEvents:\n                                keyframeEvents.push({\n                                    type: enums_1.EventType.KEYFRAME,\n                                    time: instance.start,\n                                    objId: keyframe.id\n                                });\n                                if (instance.end !== null) {\n                                    keyframeEvents.push({\n                                        type: enums_1.EventType.KEYFRAME,\n                                        time: instance.end,\n                                        objId: keyframe.id\n                                    });\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        });\n    });\n    // Go through the keyframe events and add them to nextEvents:\n    _.each(keyframeEvents, function (keyframeEvent) {\n        // tslint:disable-next-line\n        if (eventObjectTimes[keyframeEvent.time + ''] === undefined) { // no need to put a keyframe event if there's already another event there\n            resolvedStates.nextEvents.push(keyframeEvent);\n            eventObjectTimes[keyframeEvent.time + ''] = enums_1.EventType.KEYFRAME;\n        }\n    });\n    if (onlyForTime) {\n        resolvedStates.nextEvents = _.filter(resolvedStates.nextEvents, function (e) { return e.time > onlyForTime; });\n    }\n    resolvedStates.nextEvents.sort(function (a, b) {\n        if (a.time > b.time)\n            return 1;\n        if (a.time < b.time)\n            return -1;\n        if (a.type > b.type)\n            return -1;\n        if (a.type < b.type)\n            return 1;\n        if (a.objId < b.objId)\n            return -1;\n        if (a.objId > b.objId)\n            return 1;\n        return 0;\n    });\n    return resolvedStates;\n}\nexports.resolveStates = resolveStates;\nfunction applyKeyframeContent(parentContent, keyframeContent) {\n    _.each(keyframeContent, function (value, attr) {\n        if (_.isArray(value)) {\n            if (!_.isArray(parentContent[attr]))\n                parentContent[attr] = [];\n            applyKeyframeContent(parentContent[attr], value);\n            parentContent[attr].splice(value.length, 99999);\n        }\n        else if (_.isObject(value)) {\n            if (!_.isObject(parentContent[attr]) ||\n                _.isArray(parentContent[attr]))\n                parentContent[attr] = {};\n            applyKeyframeContent(parentContent[attr], value);\n        }\n        else {\n            parentContent[attr] = value;\n        }\n    });\n}\nexports.applyKeyframeContent = applyKeyframeContent;\nfunction getTimesFromParents(resolved, obj) {\n    var times = [];\n    var parentObj = (obj.resolved.parentId ?\n        resolved.objects[obj.resolved.parentId] :\n        null);\n    if (parentObj && parentObj.resolved.resolved) {\n        _.each(parentObj.resolved.instances, function (instance) {\n            times.push({ time: instance.start, enable: true });\n            if (instance.end)\n                times.push({ time: instance.end, enable: false });\n        });\n        times = times.concat(getTimesFromParents(resolved, parentObj));\n    }\n    return times;\n}\nfunction setStateAtTime(states, layer, time, objInstance) {\n    if (!states[layer])\n        states[layer] = {};\n    states[layer][time + ''] = objInstance ? [objInstance] : objInstance;\n}\nfunction addKeyframeAtTime(states, layer, time, objInstanceKf) {\n    if (!states[layer])\n        states[layer] = {};\n    if (!states[layer][time + ''])\n        states[layer][time + ''] = [];\n    // @ts-ignore object is possibly null\n    states[layer][time + ''].push(objInstanceKf);\n}\nfunction getStateAtTime(states, layer, requestTime) {\n    var layerStates = states[layer] || {};\n    var times = _.map(_.keys(layerStates), function (time) { return parseFloat(time); });\n    times.sort(function (a, b) {\n        return a - b;\n    });\n    var state = null;\n    var isCloned = false;\n    _.find(times, function (time) {\n        if (time <= requestTime) {\n            var currentStateInstances = layerStates[time + ''];\n            if (currentStateInstances && currentStateInstances.length) {\n                _.each(currentStateInstances, function (currentState) {\n                    if (currentState &&\n                        currentState.isKeyframe) {\n                        var keyframe = currentState;\n                        if (state && keyframe.resolved.parentId === state.id) {\n                            if ((keyframe.keyframeEndTime || Infinity) > requestTime) {\n                                if (!isCloned) {\n                                    isCloned = true;\n                                    state = tslib_1.__assign({}, state, { content: JSON.parse(JSON.stringify(state.content)) });\n                                }\n                                // Apply the keyframe on the state:\n                                applyKeyframeContent(state.content, keyframe.content);\n                            }\n                        }\n                    }\n                    else {\n                        state = currentState;\n                        isCloned = false;\n                    }\n                });\n            }\n            else {\n                state = null;\n                isCloned = false;\n            }\n            return false;\n        }\n        else {\n            return true;\n        }\n    });\n    return state;\n}\nfunction isResolvedStates(resolved) {\n    return !!(resolved &&\n        typeof resolved === 'object' &&\n        resolved.objects &&\n        resolved.state &&\n        resolved.nextEvents);\n}\n//# sourceMappingURL=state.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar _ = require(\"underscore\");\nfunction validateObject0(obj, strict, uniqueIds) {\n    if (!uniqueIds)\n        uniqueIds = {};\n    if (!obj)\n        throw new Error(\"Object is undefined\");\n    if (!_.isObject(obj))\n        throw new Error(\"Object is not an object\");\n    if (!obj.id)\n        throw new Error(\"Object missing \\\"id\\\" attribute\");\n    if (!_.isString(obj.id))\n        throw new Error(\"Object \\\"id\\\" attribute is not a string: \\\"\" + obj.id + \"\\\"\");\n    if (uniqueIds[obj.id])\n        throw new Error(\"Object id \\\"\" + obj.id + \"\\\" is not unique\");\n    uniqueIds[obj.id] = true;\n    // @ts-ignore\n    if (obj.layer === undefined)\n        throw new Error(\"Object \\\"\" + obj.id + \"\\\": \\\"layer\\\" attribute is undefined\");\n    if (!obj.content)\n        throw new Error(\"Object \\\"\" + obj.id + \"\\\": \\\"content\\\" attribute must be set\");\n    if (!obj.enable)\n        throw new Error(\"Object \\\"\" + obj.id + \"\\\": \\\"enable\\\" attribute must be set\");\n    if (obj.enable.start !== undefined) {\n        if (strict && obj.enable.while !== undefined)\n            throw new Error(\"Object \\\"\" + obj.id + \"\\\": \\\"enable.start\\\" and \\\"enable.while\\\" cannot be combined\");\n        if (strict &&\n            obj.enable.end !== undefined &&\n            obj.enable.duration !== undefined)\n            throw new Error(\"Object \\\"\" + obj.id + \"\\\": \\\"enable.end\\\" and \\\"enable.duration\\\" cannot be combined\");\n    }\n    else if (obj.enable.while !== undefined) {\n        if (strict && obj.enable.end !== undefined)\n            throw new Error(\"Object \\\"\" + obj.id + \"\\\": \\\"enable.while\\\" and \\\"enable.end\\\" cannot be combined\");\n        if (strict && obj.enable.duration !== undefined)\n            throw new Error(\"Object \\\"\" + obj.id + \"\\\": \\\"enable.while\\\" and \\\"enable.duration\\\" cannot be combined\");\n    }\n    else\n        throw new Error(\"Object \\\"\" + obj.id + \"\\\": \\\"enable.start\\\" or \\\"enable.while\\\" must be set\");\n    if (obj.keyframes) {\n        _.each(obj.keyframes, function (keyframe, i) {\n            try {\n                validateKeyframe0(keyframe, strict, uniqueIds);\n            }\n            catch (e) {\n                throw new Error(\"Object \\\"\" + obj.id + \"\\\" keyframe[\" + i + \"]: \" + e);\n            }\n        });\n    }\n    if (obj.classes) {\n        _.each(obj.classes, function (className, i) {\n            if (className && !_.isString(className))\n                throw new Error(\"Object \\\"\" + obj.id + \"\\\": \\\"classes[\" + i + \"]\\\" is not a string\");\n        });\n    }\n    if (obj.children && !obj.isGroup)\n        throw new Error(\"Object \\\"\" + obj.id + \"\\\": attribute \\\"children\\\" is set but \\\"isGroup\\\" is not\");\n    if (obj.isGroup && !obj.children)\n        throw new Error(\"Object \\\"\" + obj.id + \"\\\": attribute \\\"isGroup\\\" is set but \\\"children\\\" missing\");\n    if (obj.children) {\n        _.each(obj.children, function (child, i) {\n            try {\n                validateObject0(child, strict, uniqueIds);\n            }\n            catch (e) {\n                throw new Error(\"Object \\\"\" + obj.id + \"\\\" child[\" + i + \"]: \" + e);\n            }\n        });\n    }\n    if (obj.priority !== undefined && !_.isNumber(obj.priority))\n        throw new Error(\"Object \\\"\" + obj.id + \"\\\": attribute \\\"priority\\\" is not a number\");\n}\nfunction validateKeyframe0(keyframe, strict, uniqueIds) {\n    if (!uniqueIds)\n        uniqueIds = {};\n    if (!keyframe)\n        throw new Error(\"Keyframe is undefined\");\n    if (!_.isObject(keyframe))\n        throw new Error(\"Keyframe is not an object\");\n    if (!keyframe.id)\n        throw new Error(\"Keyframe missing id attribute\");\n    if (!_.isString(keyframe.id))\n        throw new Error(\"Keyframe id attribute is not a string: \\\"\" + keyframe.id + \"\\\"\");\n    if (uniqueIds[keyframe.id])\n        throw new Error(\"Keyframe id \\\"\" + keyframe.id + \"\\\" is not unique\");\n    uniqueIds[keyframe.id] = true;\n    if (!keyframe.content)\n        throw new Error(\"Keyframe \\\"\" + keyframe.id + \"\\\": \\\"content\\\" attribute must be set\");\n    if (!keyframe.enable)\n        throw new Error(\"Keyframe \\\"\" + keyframe.id + \"\\\": \\\"enable\\\" attribute must be set\");\n    if (keyframe.enable.start !== undefined) {\n        if (strict && keyframe.enable.while !== undefined)\n            throw new Error(\"Keyframe \\\"\" + keyframe.id + \"\\\": \\\"enable.start\\\" and \\\"enable.while\\\" cannot be combined\");\n        if (strict &&\n            keyframe.enable.end !== undefined &&\n            keyframe.enable.duration !== undefined)\n            throw new Error(\"Keyframe \\\"\" + keyframe.id + \"\\\": \\\"enable.end\\\" and \\\"enable.duration\\\" cannot be combined\");\n    }\n    else if (keyframe.enable.while !== undefined) {\n        if (strict && keyframe.enable.end !== undefined)\n            throw new Error(\"Keyframe \\\"\" + keyframe.id + \"\\\": \\\"enable.while\\\" and \\\"enable.end\\\" cannot be combined\");\n        if (strict && keyframe.enable.duration !== undefined)\n            throw new Error(\"Keyframe \\\"\" + keyframe.id + \"\\\": \\\"enable.while\\\" and \\\"enable.duration\\\" cannot be combined\");\n    }\n    else\n        throw new Error(\"Keyframe \\\"\" + keyframe.id + \"\\\": \\\"enable.start\\\" or \\\"enable.while\\\" must be set\");\n    if (keyframe.classes) {\n        _.each(keyframe.classes, function (className, i) {\n            if (className && !_.isString(className))\n                throw new Error(\"Keyframe \\\"\" + keyframe.id + \"\\\": \\\"classes[\" + i + \"]\\\" is not a string\");\n        });\n    }\n}\n/**\n * Validates all objects in the timeline. Throws an error if something's wrong\n * @param timeline The timeline to validate\n * @param strict Set to true to enable some strict rules (rules that can possibly be ignored)\n */\nfunction validateTimeline(timeline, strict) {\n    var uniqueIds = {};\n    _.each(timeline, function (obj) {\n        validateObject0(obj, strict, uniqueIds);\n    });\n}\nexports.validateTimeline = validateTimeline;\n/**\n * Validates a Timeline-object. Throws an error if something's wrong\n * @param timeline The timeline to validate\n * @param strict Set to true to enable some strict rules (rules that can possibly be ignored)\n */\nfunction validateObject(obj, strict) {\n    validateObject0(obj, strict);\n}\nexports.validateObject = validateObject;\n/**\n * Validates a Timeline-keyframe. Throws an error if something's wrong\n * @param timeline The timeline to validate\n * @param strict Set to true to enable some strict rules (rules that can possibly be ignored)\n */\nfunction validateKeyframe(keyframe, strict) {\n    validateKeyframe0(keyframe, strict);\n}\nexports.validateKeyframe = validateKeyframe;\n//# sourceMappingURL=validate.js.map","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global global, define, System, Reflect, Promise */\r\nvar __extends;\r\nvar __assign;\r\nvar __rest;\r\nvar __decorate;\r\nvar __param;\r\nvar __metadata;\r\nvar __awaiter;\r\nvar __generator;\r\nvar __exportStar;\r\nvar __values;\r\nvar __read;\r\nvar __spread;\r\nvar __await;\r\nvar __asyncGenerator;\r\nvar __asyncDelegator;\r\nvar __asyncValues;\r\nvar __makeTemplateObject;\r\nvar __importStar;\r\nvar __importDefault;\r\n(function (factory) {\r\n    var root = typeof global === \"object\" ? global : typeof self === \"object\" ? self : typeof this === \"object\" ? this : {};\r\n    if (typeof define === \"function\" && define.amd) {\r\n        define(\"tslib\", [\"exports\"], function (exports) { factory(createExporter(root, createExporter(exports))); });\r\n    }\r\n    else if (typeof module === \"object\" && typeof module.exports === \"object\") {\r\n        factory(createExporter(root, createExporter(module.exports)));\r\n    }\r\n    else {\r\n        factory(createExporter(root));\r\n    }\r\n    function createExporter(exports, previous) {\r\n        if (exports !== root) {\r\n            if (typeof Object.create === \"function\") {\r\n                Object.defineProperty(exports, \"__esModule\", { value: true });\r\n            }\r\n            else {\r\n                exports.__esModule = true;\r\n            }\r\n        }\r\n        return function (id, v) { return exports[id] = previous ? previous(id, v) : v; };\r\n    }\r\n})\r\n(function (exporter) {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\n    __extends = function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n\r\n    __assign = Object.assign || function (t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    };\r\n\r\n    __rest = function (s, e) {\r\n        var t = {};\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n            t[p] = s[p];\r\n        if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n                t[p[i]] = s[p[i]];\r\n        return t;\r\n    };\r\n\r\n    __decorate = function (decorators, target, key, desc) {\r\n        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n        if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n        return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n    };\r\n\r\n    __param = function (paramIndex, decorator) {\r\n        return function (target, key) { decorator(target, key, paramIndex); }\r\n    };\r\n\r\n    __metadata = function (metadataKey, metadataValue) {\r\n        if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n    };\r\n\r\n    __awaiter = function (thisArg, _arguments, P, generator) {\r\n        return new (P || (P = Promise))(function (resolve, reject) {\r\n            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n            function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n            function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n            step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n        });\r\n    };\r\n\r\n    __generator = function (thisArg, body) {\r\n        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n        return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n        function verb(n) { return function (v) { return step([n, v]); }; }\r\n        function step(op) {\r\n            if (f) throw new TypeError(\"Generator is already executing.\");\r\n            while (_) try {\r\n                if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n                if (y = 0, t) op = [op[0] & 2, t.value];\r\n                switch (op[0]) {\r\n                    case 0: case 1: t = op; break;\r\n                    case 4: _.label++; return { value: op[1], done: false };\r\n                    case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                    case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                    default:\r\n                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                        if (t[2]) _.ops.pop();\r\n                        _.trys.pop(); continue;\r\n                }\r\n                op = body.call(thisArg, _);\r\n            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n        }\r\n    };\r\n\r\n    __exportStar = function (m, exports) {\r\n        for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n    };\r\n\r\n    __values = function (o) {\r\n        var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n        if (m) return m.call(o);\r\n        return {\r\n            next: function () {\r\n                if (o && i >= o.length) o = void 0;\r\n                return { value: o && o[i++], done: !o };\r\n            }\r\n        };\r\n    };\r\n\r\n    __read = function (o, n) {\r\n        var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n        if (!m) return o;\r\n        var i = m.call(o), r, ar = [], e;\r\n        try {\r\n            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n        }\r\n        catch (error) { e = { error: error }; }\r\n        finally {\r\n            try {\r\n                if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n            }\r\n            finally { if (e) throw e.error; }\r\n        }\r\n        return ar;\r\n    };\r\n\r\n    __spread = function () {\r\n        for (var ar = [], i = 0; i < arguments.length; i++)\r\n            ar = ar.concat(__read(arguments[i]));\r\n        return ar;\r\n    };\r\n\r\n    __await = function (v) {\r\n        return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n    };\r\n\r\n    __asyncGenerator = function (thisArg, _arguments, generator) {\r\n        if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n        var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n        return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n        function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n        function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);  }\r\n        function fulfill(value) { resume(\"next\", value); }\r\n        function reject(value) { resume(\"throw\", value); }\r\n        function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n    };\r\n\r\n    __asyncDelegator = function (o) {\r\n        var i, p;\r\n        return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n    };\r\n\r\n    __asyncValues = function (o) {\r\n        if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n        var m = o[Symbol.asyncIterator], i;\r\n        return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n    };\r\n\r\n    __makeTemplateObject = function (cooked, raw) {\r\n        if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n        return cooked;\r\n    };\r\n\r\n    __importStar = function (mod) {\r\n        if (mod && mod.__esModule) return mod;\r\n        var result = {};\r\n        if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n        result[\"default\"] = mod;\r\n        return result;\r\n    };\r\n\r\n    __importDefault = function (mod) {\r\n        return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n    };\r\n\r\n    exporter(\"__extends\", __extends);\r\n    exporter(\"__assign\", __assign);\r\n    exporter(\"__rest\", __rest);\r\n    exporter(\"__decorate\", __decorate);\r\n    exporter(\"__param\", __param);\r\n    exporter(\"__metadata\", __metadata);\r\n    exporter(\"__awaiter\", __awaiter);\r\n    exporter(\"__generator\", __generator);\r\n    exporter(\"__exportStar\", __exportStar);\r\n    exporter(\"__values\", __values);\r\n    exporter(\"__read\", __read);\r\n    exporter(\"__spread\", __spread);\r\n    exporter(\"__await\", __await);\r\n    exporter(\"__asyncGenerator\", __asyncGenerator);\r\n    exporter(\"__asyncDelegator\", __asyncDelegator);\r\n    exporter(\"__asyncValues\", __asyncValues);\r\n    exporter(\"__makeTemplateObject\", __makeTemplateObject);\r\n    exporter(\"__importStar\", __importStar);\r\n    exporter(\"__importDefault\", __importDefault);\r\n});\r\n","//     Underscore.js 1.9.1\n//     http://underscorejs.org\n//     (c) 2009-2018 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n//     Underscore may be freely distributed under the MIT license.\n\n(function() {\n\n  // Baseline setup\n  // --------------\n\n  // Establish the root object, `window` (`self`) in the browser, `global`\n  // on the server, or `this` in some virtual machines. We use `self`\n  // instead of `window` for `WebWorker` support.\n  var root = typeof self == 'object' && self.self === self && self ||\n            typeof global == 'object' && global.global === global && global ||\n            this ||\n            {};\n\n  // Save the previous value of the `_` variable.\n  var previousUnderscore = root._;\n\n  // Save bytes in the minified (but not gzipped) version:\n  var ArrayProto = Array.prototype, ObjProto = Object.prototype;\n  var SymbolProto = typeof Symbol !== 'undefined' ? Symbol.prototype : null;\n\n  // Create quick reference variables for speed access to core prototypes.\n  var push = ArrayProto.push,\n      slice = ArrayProto.slice,\n      toString = ObjProto.toString,\n      hasOwnProperty = ObjProto.hasOwnProperty;\n\n  // All **ECMAScript 5** native function implementations that we hope to use\n  // are declared here.\n  var nativeIsArray = Array.isArray,\n      nativeKeys = Object.keys,\n      nativeCreate = Object.create;\n\n  // Naked function reference for surrogate-prototype-swapping.\n  var Ctor = function(){};\n\n  // Create a safe reference to the Underscore object for use below.\n  var _ = function(obj) {\n    if (obj instanceof _) return obj;\n    if (!(this instanceof _)) return new _(obj);\n    this._wrapped = obj;\n  };\n\n  // Export the Underscore object for **Node.js**, with\n  // backwards-compatibility for their old module API. If we're in\n  // the browser, add `_` as a global object.\n  // (`nodeType` is checked to ensure that `module`\n  // and `exports` are not HTML elements.)\n  if (typeof exports != 'undefined' && !exports.nodeType) {\n    if (typeof module != 'undefined' && !module.nodeType && module.exports) {\n      exports = module.exports = _;\n    }\n    exports._ = _;\n  } else {\n    root._ = _;\n  }\n\n  // Current version.\n  _.VERSION = '1.9.1';\n\n  // Internal function that returns an efficient (for current engines) version\n  // of the passed-in callback, to be repeatedly applied in other Underscore\n  // functions.\n  var optimizeCb = function(func, context, argCount) {\n    if (context === void 0) return func;\n    switch (argCount == null ? 3 : argCount) {\n      case 1: return function(value) {\n        return func.call(context, value);\n      };\n      // The 2-argument case is omitted because we’re not using it.\n      case 3: return function(value, index, collection) {\n        return func.call(context, value, index, collection);\n      };\n      case 4: return function(accumulator, value, index, collection) {\n        return func.call(context, accumulator, value, index, collection);\n      };\n    }\n    return function() {\n      return func.apply(context, arguments);\n    };\n  };\n\n  var builtinIteratee;\n\n  // An internal function to generate callbacks that can be applied to each\n  // element in a collection, returning the desired result — either `identity`,\n  // an arbitrary callback, a property matcher, or a property accessor.\n  var cb = function(value, context, argCount) {\n    if (_.iteratee !== builtinIteratee) return _.iteratee(value, context);\n    if (value == null) return _.identity;\n    if (_.isFunction(value)) return optimizeCb(value, context, argCount);\n    if (_.isObject(value) && !_.isArray(value)) return _.matcher(value);\n    return _.property(value);\n  };\n\n  // External wrapper for our callback generator. Users may customize\n  // `_.iteratee` if they want additional predicate/iteratee shorthand styles.\n  // This abstraction hides the internal-only argCount argument.\n  _.iteratee = builtinIteratee = function(value, context) {\n    return cb(value, context, Infinity);\n  };\n\n  // Some functions take a variable number of arguments, or a few expected\n  // arguments at the beginning and then a variable number of values to operate\n  // on. This helper accumulates all remaining arguments past the function’s\n  // argument length (or an explicit `startIndex`), into an array that becomes\n  // the last argument. Similar to ES6’s \"rest parameter\".\n  var restArguments = function(func, startIndex) {\n    startIndex = startIndex == null ? func.length - 1 : +startIndex;\n    return function() {\n      var length = Math.max(arguments.length - startIndex, 0),\n          rest = Array(length),\n          index = 0;\n      for (; index < length; index++) {\n        rest[index] = arguments[index + startIndex];\n      }\n      switch (startIndex) {\n        case 0: return func.call(this, rest);\n        case 1: return func.call(this, arguments[0], rest);\n        case 2: return func.call(this, arguments[0], arguments[1], rest);\n      }\n      var args = Array(startIndex + 1);\n      for (index = 0; index < startIndex; index++) {\n        args[index] = arguments[index];\n      }\n      args[startIndex] = rest;\n      return func.apply(this, args);\n    };\n  };\n\n  // An internal function for creating a new object that inherits from another.\n  var baseCreate = function(prototype) {\n    if (!_.isObject(prototype)) return {};\n    if (nativeCreate) return nativeCreate(prototype);\n    Ctor.prototype = prototype;\n    var result = new Ctor;\n    Ctor.prototype = null;\n    return result;\n  };\n\n  var shallowProperty = function(key) {\n    return function(obj) {\n      return obj == null ? void 0 : obj[key];\n    };\n  };\n\n  var has = function(obj, path) {\n    return obj != null && hasOwnProperty.call(obj, path);\n  }\n\n  var deepGet = function(obj, path) {\n    var length = path.length;\n    for (var i = 0; i < length; i++) {\n      if (obj == null) return void 0;\n      obj = obj[path[i]];\n    }\n    return length ? obj : void 0;\n  };\n\n  // Helper for collection methods to determine whether a collection\n  // should be iterated as an array or as an object.\n  // Related: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-tolength\n  // Avoids a very nasty iOS 8 JIT bug on ARM-64. #2094\n  var MAX_ARRAY_INDEX = Math.pow(2, 53) - 1;\n  var getLength = shallowProperty('length');\n  var isArrayLike = function(collection) {\n    var length = getLength(collection);\n    return typeof length == 'number' && length >= 0 && length <= MAX_ARRAY_INDEX;\n  };\n\n  // Collection Functions\n  // --------------------\n\n  // The cornerstone, an `each` implementation, aka `forEach`.\n  // Handles raw objects in addition to array-likes. Treats all\n  // sparse array-likes as if they were dense.\n  _.each = _.forEach = function(obj, iteratee, context) {\n    iteratee = optimizeCb(iteratee, context);\n    var i, length;\n    if (isArrayLike(obj)) {\n      for (i = 0, length = obj.length; i < length; i++) {\n        iteratee(obj[i], i, obj);\n      }\n    } else {\n      var keys = _.keys(obj);\n      for (i = 0, length = keys.length; i < length; i++) {\n        iteratee(obj[keys[i]], keys[i], obj);\n      }\n    }\n    return obj;\n  };\n\n  // Return the results of applying the iteratee to each element.\n  _.map = _.collect = function(obj, iteratee, context) {\n    iteratee = cb(iteratee, context);\n    var keys = !isArrayLike(obj) && _.keys(obj),\n        length = (keys || obj).length,\n        results = Array(length);\n    for (var index = 0; index < length; index++) {\n      var currentKey = keys ? keys[index] : index;\n      results[index] = iteratee(obj[currentKey], currentKey, obj);\n    }\n    return results;\n  };\n\n  // Create a reducing function iterating left or right.\n  var createReduce = function(dir) {\n    // Wrap code that reassigns argument variables in a separate function than\n    // the one that accesses `arguments.length` to avoid a perf hit. (#1991)\n    var reducer = function(obj, iteratee, memo, initial) {\n      var keys = !isArrayLike(obj) && _.keys(obj),\n          length = (keys || obj).length,\n          index = dir > 0 ? 0 : length - 1;\n      if (!initial) {\n        memo = obj[keys ? keys[index] : index];\n        index += dir;\n      }\n      for (; index >= 0 && index < length; index += dir) {\n        var currentKey = keys ? keys[index] : index;\n        memo = iteratee(memo, obj[currentKey], currentKey, obj);\n      }\n      return memo;\n    };\n\n    return function(obj, iteratee, memo, context) {\n      var initial = arguments.length >= 3;\n      return reducer(obj, optimizeCb(iteratee, context, 4), memo, initial);\n    };\n  };\n\n  // **Reduce** builds up a single result from a list of values, aka `inject`,\n  // or `foldl`.\n  _.reduce = _.foldl = _.inject = createReduce(1);\n\n  // The right-associative version of reduce, also known as `foldr`.\n  _.reduceRight = _.foldr = createReduce(-1);\n\n  // Return the first value which passes a truth test. Aliased as `detect`.\n  _.find = _.detect = function(obj, predicate, context) {\n    var keyFinder = isArrayLike(obj) ? _.findIndex : _.findKey;\n    var key = keyFinder(obj, predicate, context);\n    if (key !== void 0 && key !== -1) return obj[key];\n  };\n\n  // Return all the elements that pass a truth test.\n  // Aliased as `select`.\n  _.filter = _.select = function(obj, predicate, context) {\n    var results = [];\n    predicate = cb(predicate, context);\n    _.each(obj, function(value, index, list) {\n      if (predicate(value, index, list)) results.push(value);\n    });\n    return results;\n  };\n\n  // Return all the elements for which a truth test fails.\n  _.reject = function(obj, predicate, context) {\n    return _.filter(obj, _.negate(cb(predicate)), context);\n  };\n\n  // Determine whether all of the elements match a truth test.\n  // Aliased as `all`.\n  _.every = _.all = function(obj, predicate, context) {\n    predicate = cb(predicate, context);\n    var keys = !isArrayLike(obj) && _.keys(obj),\n        length = (keys || obj).length;\n    for (var index = 0; index < length; index++) {\n      var currentKey = keys ? keys[index] : index;\n      if (!predicate(obj[currentKey], currentKey, obj)) return false;\n    }\n    return true;\n  };\n\n  // Determine if at least one element in the object matches a truth test.\n  // Aliased as `any`.\n  _.some = _.any = function(obj, predicate, context) {\n    predicate = cb(predicate, context);\n    var keys = !isArrayLike(obj) && _.keys(obj),\n        length = (keys || obj).length;\n    for (var index = 0; index < length; index++) {\n      var currentKey = keys ? keys[index] : index;\n      if (predicate(obj[currentKey], currentKey, obj)) return true;\n    }\n    return false;\n  };\n\n  // Determine if the array or object contains a given item (using `===`).\n  // Aliased as `includes` and `include`.\n  _.contains = _.includes = _.include = function(obj, item, fromIndex, guard) {\n    if (!isArrayLike(obj)) obj = _.values(obj);\n    if (typeof fromIndex != 'number' || guard) fromIndex = 0;\n    return _.indexOf(obj, item, fromIndex) >= 0;\n  };\n\n  // Invoke a method (with arguments) on every item in a collection.\n  _.invoke = restArguments(function(obj, path, args) {\n    var contextPath, func;\n    if (_.isFunction(path)) {\n      func = path;\n    } else if (_.isArray(path)) {\n      contextPath = path.slice(0, -1);\n      path = path[path.length - 1];\n    }\n    return _.map(obj, function(context) {\n      var method = func;\n      if (!method) {\n        if (contextPath && contextPath.length) {\n          context = deepGet(context, contextPath);\n        }\n        if (context == null) return void 0;\n        method = context[path];\n      }\n      return method == null ? method : method.apply(context, args);\n    });\n  });\n\n  // Convenience version of a common use case of `map`: fetching a property.\n  _.pluck = function(obj, key) {\n    return _.map(obj, _.property(key));\n  };\n\n  // Convenience version of a common use case of `filter`: selecting only objects\n  // containing specific `key:value` pairs.\n  _.where = function(obj, attrs) {\n    return _.filter(obj, _.matcher(attrs));\n  };\n\n  // Convenience version of a common use case of `find`: getting the first object\n  // containing specific `key:value` pairs.\n  _.findWhere = function(obj, attrs) {\n    return _.find(obj, _.matcher(attrs));\n  };\n\n  // Return the maximum element (or element-based computation).\n  _.max = function(obj, iteratee, context) {\n    var result = -Infinity, lastComputed = -Infinity,\n        value, computed;\n    if (iteratee == null || typeof iteratee == 'number' && typeof obj[0] != 'object' && obj != null) {\n      obj = isArrayLike(obj) ? obj : _.values(obj);\n      for (var i = 0, length = obj.length; i < length; i++) {\n        value = obj[i];\n        if (value != null && value > result) {\n          result = value;\n        }\n      }\n    } else {\n      iteratee = cb(iteratee, context);\n      _.each(obj, function(v, index, list) {\n        computed = iteratee(v, index, list);\n        if (computed > lastComputed || computed === -Infinity && result === -Infinity) {\n          result = v;\n          lastComputed = computed;\n        }\n      });\n    }\n    return result;\n  };\n\n  // Return the minimum element (or element-based computation).\n  _.min = function(obj, iteratee, context) {\n    var result = Infinity, lastComputed = Infinity,\n        value, computed;\n    if (iteratee == null || typeof iteratee == 'number' && typeof obj[0] != 'object' && obj != null) {\n      obj = isArrayLike(obj) ? obj : _.values(obj);\n      for (var i = 0, length = obj.length; i < length; i++) {\n        value = obj[i];\n        if (value != null && value < result) {\n          result = value;\n        }\n      }\n    } else {\n      iteratee = cb(iteratee, context);\n      _.each(obj, function(v, index, list) {\n        computed = iteratee(v, index, list);\n        if (computed < lastComputed || computed === Infinity && result === Infinity) {\n          result = v;\n          lastComputed = computed;\n        }\n      });\n    }\n    return result;\n  };\n\n  // Shuffle a collection.\n  _.shuffle = function(obj) {\n    return _.sample(obj, Infinity);\n  };\n\n  // Sample **n** random values from a collection using the modern version of the\n  // [Fisher-Yates shuffle](http://en.wikipedia.org/wiki/Fisher–Yates_shuffle).\n  // If **n** is not specified, returns a single random element.\n  // The internal `guard` argument allows it to work with `map`.\n  _.sample = function(obj, n, guard) {\n    if (n == null || guard) {\n      if (!isArrayLike(obj)) obj = _.values(obj);\n      return obj[_.random(obj.length - 1)];\n    }\n    var sample = isArrayLike(obj) ? _.clone(obj) : _.values(obj);\n    var length = getLength(sample);\n    n = Math.max(Math.min(n, length), 0);\n    var last = length - 1;\n    for (var index = 0; index < n; index++) {\n      var rand = _.random(index, last);\n      var temp = sample[index];\n      sample[index] = sample[rand];\n      sample[rand] = temp;\n    }\n    return sample.slice(0, n);\n  };\n\n  // Sort the object's values by a criterion produced by an iteratee.\n  _.sortBy = function(obj, iteratee, context) {\n    var index = 0;\n    iteratee = cb(iteratee, context);\n    return _.pluck(_.map(obj, function(value, key, list) {\n      return {\n        value: value,\n        index: index++,\n        criteria: iteratee(value, key, list)\n      };\n    }).sort(function(left, right) {\n      var a = left.criteria;\n      var b = right.criteria;\n      if (a !== b) {\n        if (a > b || a === void 0) return 1;\n        if (a < b || b === void 0) return -1;\n      }\n      return left.index - right.index;\n    }), 'value');\n  };\n\n  // An internal function used for aggregate \"group by\" operations.\n  var group = function(behavior, partition) {\n    return function(obj, iteratee, context) {\n      var result = partition ? [[], []] : {};\n      iteratee = cb(iteratee, context);\n      _.each(obj, function(value, index) {\n        var key = iteratee(value, index, obj);\n        behavior(result, value, key);\n      });\n      return result;\n    };\n  };\n\n  // Groups the object's values by a criterion. Pass either a string attribute\n  // to group by, or a function that returns the criterion.\n  _.groupBy = group(function(result, value, key) {\n    if (has(result, key)) result[key].push(value); else result[key] = [value];\n  });\n\n  // Indexes the object's values by a criterion, similar to `groupBy`, but for\n  // when you know that your index values will be unique.\n  _.indexBy = group(function(result, value, key) {\n    result[key] = value;\n  });\n\n  // Counts instances of an object that group by a certain criterion. Pass\n  // either a string attribute to count by, or a function that returns the\n  // criterion.\n  _.countBy = group(function(result, value, key) {\n    if (has(result, key)) result[key]++; else result[key] = 1;\n  });\n\n  var reStrSymbol = /[^\\ud800-\\udfff]|[\\ud800-\\udbff][\\udc00-\\udfff]|[\\ud800-\\udfff]/g;\n  // Safely create a real, live array from anything iterable.\n  _.toArray = function(obj) {\n    if (!obj) return [];\n    if (_.isArray(obj)) return slice.call(obj);\n    if (_.isString(obj)) {\n      // Keep surrogate pair characters together\n      return obj.match(reStrSymbol);\n    }\n    if (isArrayLike(obj)) return _.map(obj, _.identity);\n    return _.values(obj);\n  };\n\n  // Return the number of elements in an object.\n  _.size = function(obj) {\n    if (obj == null) return 0;\n    return isArrayLike(obj) ? obj.length : _.keys(obj).length;\n  };\n\n  // Split a collection into two arrays: one whose elements all satisfy the given\n  // predicate, and one whose elements all do not satisfy the predicate.\n  _.partition = group(function(result, value, pass) {\n    result[pass ? 0 : 1].push(value);\n  }, true);\n\n  // Array Functions\n  // ---------------\n\n  // Get the first element of an array. Passing **n** will return the first N\n  // values in the array. Aliased as `head` and `take`. The **guard** check\n  // allows it to work with `_.map`.\n  _.first = _.head = _.take = function(array, n, guard) {\n    if (array == null || array.length < 1) return n == null ? void 0 : [];\n    if (n == null || guard) return array[0];\n    return _.initial(array, array.length - n);\n  };\n\n  // Returns everything but the last entry of the array. Especially useful on\n  // the arguments object. Passing **n** will return all the values in\n  // the array, excluding the last N.\n  _.initial = function(array, n, guard) {\n    return slice.call(array, 0, Math.max(0, array.length - (n == null || guard ? 1 : n)));\n  };\n\n  // Get the last element of an array. Passing **n** will return the last N\n  // values in the array.\n  _.last = function(array, n, guard) {\n    if (array == null || array.length < 1) return n == null ? void 0 : [];\n    if (n == null || guard) return array[array.length - 1];\n    return _.rest(array, Math.max(0, array.length - n));\n  };\n\n  // Returns everything but the first entry of the array. Aliased as `tail` and `drop`.\n  // Especially useful on the arguments object. Passing an **n** will return\n  // the rest N values in the array.\n  _.rest = _.tail = _.drop = function(array, n, guard) {\n    return slice.call(array, n == null || guard ? 1 : n);\n  };\n\n  // Trim out all falsy values from an array.\n  _.compact = function(array) {\n    return _.filter(array, Boolean);\n  };\n\n  // Internal implementation of a recursive `flatten` function.\n  var flatten = function(input, shallow, strict, output) {\n    output = output || [];\n    var idx = output.length;\n    for (var i = 0, length = getLength(input); i < length; i++) {\n      var value = input[i];\n      if (isArrayLike(value) && (_.isArray(value) || _.isArguments(value))) {\n        // Flatten current level of array or arguments object.\n        if (shallow) {\n          var j = 0, len = value.length;\n          while (j < len) output[idx++] = value[j++];\n        } else {\n          flatten(value, shallow, strict, output);\n          idx = output.length;\n        }\n      } else if (!strict) {\n        output[idx++] = value;\n      }\n    }\n    return output;\n  };\n\n  // Flatten out an array, either recursively (by default), or just one level.\n  _.flatten = function(array, shallow) {\n    return flatten(array, shallow, false);\n  };\n\n  // Return a version of the array that does not contain the specified value(s).\n  _.without = restArguments(function(array, otherArrays) {\n    return _.difference(array, otherArrays);\n  });\n\n  // Produce a duplicate-free version of the array. If the array has already\n  // been sorted, you have the option of using a faster algorithm.\n  // The faster algorithm will not work with an iteratee if the iteratee\n  // is not a one-to-one function, so providing an iteratee will disable\n  // the faster algorithm.\n  // Aliased as `unique`.\n  _.uniq = _.unique = function(array, isSorted, iteratee, context) {\n    if (!_.isBoolean(isSorted)) {\n      context = iteratee;\n      iteratee = isSorted;\n      isSorted = false;\n    }\n    if (iteratee != null) iteratee = cb(iteratee, context);\n    var result = [];\n    var seen = [];\n    for (var i = 0, length = getLength(array); i < length; i++) {\n      var value = array[i],\n          computed = iteratee ? iteratee(value, i, array) : value;\n      if (isSorted && !iteratee) {\n        if (!i || seen !== computed) result.push(value);\n        seen = computed;\n      } else if (iteratee) {\n        if (!_.contains(seen, computed)) {\n          seen.push(computed);\n          result.push(value);\n        }\n      } else if (!_.contains(result, value)) {\n        result.push(value);\n      }\n    }\n    return result;\n  };\n\n  // Produce an array that contains the union: each distinct element from all of\n  // the passed-in arrays.\n  _.union = restArguments(function(arrays) {\n    return _.uniq(flatten(arrays, true, true));\n  });\n\n  // Produce an array that contains every item shared between all the\n  // passed-in arrays.\n  _.intersection = function(array) {\n    var result = [];\n    var argsLength = arguments.length;\n    for (var i = 0, length = getLength(array); i < length; i++) {\n      var item = array[i];\n      if (_.contains(result, item)) continue;\n      var j;\n      for (j = 1; j < argsLength; j++) {\n        if (!_.contains(arguments[j], item)) break;\n      }\n      if (j === argsLength) result.push(item);\n    }\n    return result;\n  };\n\n  // Take the difference between one array and a number of other arrays.\n  // Only the elements present in just the first array will remain.\n  _.difference = restArguments(function(array, rest) {\n    rest = flatten(rest, true, true);\n    return _.filter(array, function(value){\n      return !_.contains(rest, value);\n    });\n  });\n\n  // Complement of _.zip. Unzip accepts an array of arrays and groups\n  // each array's elements on shared indices.\n  _.unzip = function(array) {\n    var length = array && _.max(array, getLength).length || 0;\n    var result = Array(length);\n\n    for (var index = 0; index < length; index++) {\n      result[index] = _.pluck(array, index);\n    }\n    return result;\n  };\n\n  // Zip together multiple lists into a single array -- elements that share\n  // an index go together.\n  _.zip = restArguments(_.unzip);\n\n  // Converts lists into objects. Pass either a single array of `[key, value]`\n  // pairs, or two parallel arrays of the same length -- one of keys, and one of\n  // the corresponding values. Passing by pairs is the reverse of _.pairs.\n  _.object = function(list, values) {\n    var result = {};\n    for (var i = 0, length = getLength(list); i < length; i++) {\n      if (values) {\n        result[list[i]] = values[i];\n      } else {\n        result[list[i][0]] = list[i][1];\n      }\n    }\n    return result;\n  };\n\n  // Generator function to create the findIndex and findLastIndex functions.\n  var createPredicateIndexFinder = function(dir) {\n    return function(array, predicate, context) {\n      predicate = cb(predicate, context);\n      var length = getLength(array);\n      var index = dir > 0 ? 0 : length - 1;\n      for (; index >= 0 && index < length; index += dir) {\n        if (predicate(array[index], index, array)) return index;\n      }\n      return -1;\n    };\n  };\n\n  // Returns the first index on an array-like that passes a predicate test.\n  _.findIndex = createPredicateIndexFinder(1);\n  _.findLastIndex = createPredicateIndexFinder(-1);\n\n  // Use a comparator function to figure out the smallest index at which\n  // an object should be inserted so as to maintain order. Uses binary search.\n  _.sortedIndex = function(array, obj, iteratee, context) {\n    iteratee = cb(iteratee, context, 1);\n    var value = iteratee(obj);\n    var low = 0, high = getLength(array);\n    while (low < high) {\n      var mid = Math.floor((low + high) / 2);\n      if (iteratee(array[mid]) < value) low = mid + 1; else high = mid;\n    }\n    return low;\n  };\n\n  // Generator function to create the indexOf and lastIndexOf functions.\n  var createIndexFinder = function(dir, predicateFind, sortedIndex) {\n    return function(array, item, idx) {\n      var i = 0, length = getLength(array);\n      if (typeof idx == 'number') {\n        if (dir > 0) {\n          i = idx >= 0 ? idx : Math.max(idx + length, i);\n        } else {\n          length = idx >= 0 ? Math.min(idx + 1, length) : idx + length + 1;\n        }\n      } else if (sortedIndex && idx && length) {\n        idx = sortedIndex(array, item);\n        return array[idx] === item ? idx : -1;\n      }\n      if (item !== item) {\n        idx = predicateFind(slice.call(array, i, length), _.isNaN);\n        return idx >= 0 ? idx + i : -1;\n      }\n      for (idx = dir > 0 ? i : length - 1; idx >= 0 && idx < length; idx += dir) {\n        if (array[idx] === item) return idx;\n      }\n      return -1;\n    };\n  };\n\n  // Return the position of the first occurrence of an item in an array,\n  // or -1 if the item is not included in the array.\n  // If the array is large and already in sort order, pass `true`\n  // for **isSorted** to use binary search.\n  _.indexOf = createIndexFinder(1, _.findIndex, _.sortedIndex);\n  _.lastIndexOf = createIndexFinder(-1, _.findLastIndex);\n\n  // Generate an integer Array containing an arithmetic progression. A port of\n  // the native Python `range()` function. See\n  // [the Python documentation](http://docs.python.org/library/functions.html#range).\n  _.range = function(start, stop, step) {\n    if (stop == null) {\n      stop = start || 0;\n      start = 0;\n    }\n    if (!step) {\n      step = stop < start ? -1 : 1;\n    }\n\n    var length = Math.max(Math.ceil((stop - start) / step), 0);\n    var range = Array(length);\n\n    for (var idx = 0; idx < length; idx++, start += step) {\n      range[idx] = start;\n    }\n\n    return range;\n  };\n\n  // Chunk a single array into multiple arrays, each containing `count` or fewer\n  // items.\n  _.chunk = function(array, count) {\n    if (count == null || count < 1) return [];\n    var result = [];\n    var i = 0, length = array.length;\n    while (i < length) {\n      result.push(slice.call(array, i, i += count));\n    }\n    return result;\n  };\n\n  // Function (ahem) Functions\n  // ------------------\n\n  // Determines whether to execute a function as a constructor\n  // or a normal function with the provided arguments.\n  var executeBound = function(sourceFunc, boundFunc, context, callingContext, args) {\n    if (!(callingContext instanceof boundFunc)) return sourceFunc.apply(context, args);\n    var self = baseCreate(sourceFunc.prototype);\n    var result = sourceFunc.apply(self, args);\n    if (_.isObject(result)) return result;\n    return self;\n  };\n\n  // Create a function bound to a given object (assigning `this`, and arguments,\n  // optionally). Delegates to **ECMAScript 5**'s native `Function.bind` if\n  // available.\n  _.bind = restArguments(function(func, context, args) {\n    if (!_.isFunction(func)) throw new TypeError('Bind must be called on a function');\n    var bound = restArguments(function(callArgs) {\n      return executeBound(func, bound, context, this, args.concat(callArgs));\n    });\n    return bound;\n  });\n\n  // Partially apply a function by creating a version that has had some of its\n  // arguments pre-filled, without changing its dynamic `this` context. _ acts\n  // as a placeholder by default, allowing any combination of arguments to be\n  // pre-filled. Set `_.partial.placeholder` for a custom placeholder argument.\n  _.partial = restArguments(function(func, boundArgs) {\n    var placeholder = _.partial.placeholder;\n    var bound = function() {\n      var position = 0, length = boundArgs.length;\n      var args = Array(length);\n      for (var i = 0; i < length; i++) {\n        args[i] = boundArgs[i] === placeholder ? arguments[position++] : boundArgs[i];\n      }\n      while (position < arguments.length) args.push(arguments[position++]);\n      return executeBound(func, bound, this, this, args);\n    };\n    return bound;\n  });\n\n  _.partial.placeholder = _;\n\n  // Bind a number of an object's methods to that object. Remaining arguments\n  // are the method names to be bound. Useful for ensuring that all callbacks\n  // defined on an object belong to it.\n  _.bindAll = restArguments(function(obj, keys) {\n    keys = flatten(keys, false, false);\n    var index = keys.length;\n    if (index < 1) throw new Error('bindAll must be passed function names');\n    while (index--) {\n      var key = keys[index];\n      obj[key] = _.bind(obj[key], obj);\n    }\n  });\n\n  // Memoize an expensive function by storing its results.\n  _.memoize = function(func, hasher) {\n    var memoize = function(key) {\n      var cache = memoize.cache;\n      var address = '' + (hasher ? hasher.apply(this, arguments) : key);\n      if (!has(cache, address)) cache[address] = func.apply(this, arguments);\n      return cache[address];\n    };\n    memoize.cache = {};\n    return memoize;\n  };\n\n  // Delays a function for the given number of milliseconds, and then calls\n  // it with the arguments supplied.\n  _.delay = restArguments(function(func, wait, args) {\n    return setTimeout(function() {\n      return func.apply(null, args);\n    }, wait);\n  });\n\n  // Defers a function, scheduling it to run after the current call stack has\n  // cleared.\n  _.defer = _.partial(_.delay, _, 1);\n\n  // Returns a function, that, when invoked, will only be triggered at most once\n  // during a given window of time. Normally, the throttled function will run\n  // as much as it can, without ever going more than once per `wait` duration;\n  // but if you'd like to disable the execution on the leading edge, pass\n  // `{leading: false}`. To disable execution on the trailing edge, ditto.\n  _.throttle = function(func, wait, options) {\n    var timeout, context, args, result;\n    var previous = 0;\n    if (!options) options = {};\n\n    var later = function() {\n      previous = options.leading === false ? 0 : _.now();\n      timeout = null;\n      result = func.apply(context, args);\n      if (!timeout) context = args = null;\n    };\n\n    var throttled = function() {\n      var now = _.now();\n      if (!previous && options.leading === false) previous = now;\n      var remaining = wait - (now - previous);\n      context = this;\n      args = arguments;\n      if (remaining <= 0 || remaining > wait) {\n        if (timeout) {\n          clearTimeout(timeout);\n          timeout = null;\n        }\n        previous = now;\n        result = func.apply(context, args);\n        if (!timeout) context = args = null;\n      } else if (!timeout && options.trailing !== false) {\n        timeout = setTimeout(later, remaining);\n      }\n      return result;\n    };\n\n    throttled.cancel = function() {\n      clearTimeout(timeout);\n      previous = 0;\n      timeout = context = args = null;\n    };\n\n    return throttled;\n  };\n\n  // Returns a function, that, as long as it continues to be invoked, will not\n  // be triggered. The function will be called after it stops being called for\n  // N milliseconds. If `immediate` is passed, trigger the function on the\n  // leading edge, instead of the trailing.\n  _.debounce = function(func, wait, immediate) {\n    var timeout, result;\n\n    var later = function(context, args) {\n      timeout = null;\n      if (args) result = func.apply(context, args);\n    };\n\n    var debounced = restArguments(function(args) {\n      if (timeout) clearTimeout(timeout);\n      if (immediate) {\n        var callNow = !timeout;\n        timeout = setTimeout(later, wait);\n        if (callNow) result = func.apply(this, args);\n      } else {\n        timeout = _.delay(later, wait, this, args);\n      }\n\n      return result;\n    });\n\n    debounced.cancel = function() {\n      clearTimeout(timeout);\n      timeout = null;\n    };\n\n    return debounced;\n  };\n\n  // Returns the first function passed as an argument to the second,\n  // allowing you to adjust arguments, run code before and after, and\n  // conditionally execute the original function.\n  _.wrap = function(func, wrapper) {\n    return _.partial(wrapper, func);\n  };\n\n  // Returns a negated version of the passed-in predicate.\n  _.negate = function(predicate) {\n    return function() {\n      return !predicate.apply(this, arguments);\n    };\n  };\n\n  // Returns a function that is the composition of a list of functions, each\n  // consuming the return value of the function that follows.\n  _.compose = function() {\n    var args = arguments;\n    var start = args.length - 1;\n    return function() {\n      var i = start;\n      var result = args[start].apply(this, arguments);\n      while (i--) result = args[i].call(this, result);\n      return result;\n    };\n  };\n\n  // Returns a function that will only be executed on and after the Nth call.\n  _.after = function(times, func) {\n    return function() {\n      if (--times < 1) {\n        return func.apply(this, arguments);\n      }\n    };\n  };\n\n  // Returns a function that will only be executed up to (but not including) the Nth call.\n  _.before = function(times, func) {\n    var memo;\n    return function() {\n      if (--times > 0) {\n        memo = func.apply(this, arguments);\n      }\n      if (times <= 1) func = null;\n      return memo;\n    };\n  };\n\n  // Returns a function that will be executed at most one time, no matter how\n  // often you call it. Useful for lazy initialization.\n  _.once = _.partial(_.before, 2);\n\n  _.restArguments = restArguments;\n\n  // Object Functions\n  // ----------------\n\n  // Keys in IE < 9 that won't be iterated by `for key in ...` and thus missed.\n  var hasEnumBug = !{toString: null}.propertyIsEnumerable('toString');\n  var nonEnumerableProps = ['valueOf', 'isPrototypeOf', 'toString',\n    'propertyIsEnumerable', 'hasOwnProperty', 'toLocaleString'];\n\n  var collectNonEnumProps = function(obj, keys) {\n    var nonEnumIdx = nonEnumerableProps.length;\n    var constructor = obj.constructor;\n    var proto = _.isFunction(constructor) && constructor.prototype || ObjProto;\n\n    // Constructor is a special case.\n    var prop = 'constructor';\n    if (has(obj, prop) && !_.contains(keys, prop)) keys.push(prop);\n\n    while (nonEnumIdx--) {\n      prop = nonEnumerableProps[nonEnumIdx];\n      if (prop in obj && obj[prop] !== proto[prop] && !_.contains(keys, prop)) {\n        keys.push(prop);\n      }\n    }\n  };\n\n  // Retrieve the names of an object's own properties.\n  // Delegates to **ECMAScript 5**'s native `Object.keys`.\n  _.keys = function(obj) {\n    if (!_.isObject(obj)) return [];\n    if (nativeKeys) return nativeKeys(obj);\n    var keys = [];\n    for (var key in obj) if (has(obj, key)) keys.push(key);\n    // Ahem, IE < 9.\n    if (hasEnumBug) collectNonEnumProps(obj, keys);\n    return keys;\n  };\n\n  // Retrieve all the property names of an object.\n  _.allKeys = function(obj) {\n    if (!_.isObject(obj)) return [];\n    var keys = [];\n    for (var key in obj) keys.push(key);\n    // Ahem, IE < 9.\n    if (hasEnumBug) collectNonEnumProps(obj, keys);\n    return keys;\n  };\n\n  // Retrieve the values of an object's properties.\n  _.values = function(obj) {\n    var keys = _.keys(obj);\n    var length = keys.length;\n    var values = Array(length);\n    for (var i = 0; i < length; i++) {\n      values[i] = obj[keys[i]];\n    }\n    return values;\n  };\n\n  // Returns the results of applying the iteratee to each element of the object.\n  // In contrast to _.map it returns an object.\n  _.mapObject = function(obj, iteratee, context) {\n    iteratee = cb(iteratee, context);\n    var keys = _.keys(obj),\n        length = keys.length,\n        results = {};\n    for (var index = 0; index < length; index++) {\n      var currentKey = keys[index];\n      results[currentKey] = iteratee(obj[currentKey], currentKey, obj);\n    }\n    return results;\n  };\n\n  // Convert an object into a list of `[key, value]` pairs.\n  // The opposite of _.object.\n  _.pairs = function(obj) {\n    var keys = _.keys(obj);\n    var length = keys.length;\n    var pairs = Array(length);\n    for (var i = 0; i < length; i++) {\n      pairs[i] = [keys[i], obj[keys[i]]];\n    }\n    return pairs;\n  };\n\n  // Invert the keys and values of an object. The values must be serializable.\n  _.invert = function(obj) {\n    var result = {};\n    var keys = _.keys(obj);\n    for (var i = 0, length = keys.length; i < length; i++) {\n      result[obj[keys[i]]] = keys[i];\n    }\n    return result;\n  };\n\n  // Return a sorted list of the function names available on the object.\n  // Aliased as `methods`.\n  _.functions = _.methods = function(obj) {\n    var names = [];\n    for (var key in obj) {\n      if (_.isFunction(obj[key])) names.push(key);\n    }\n    return names.sort();\n  };\n\n  // An internal function for creating assigner functions.\n  var createAssigner = function(keysFunc, defaults) {\n    return function(obj) {\n      var length = arguments.length;\n      if (defaults) obj = Object(obj);\n      if (length < 2 || obj == null) return obj;\n      for (var index = 1; index < length; index++) {\n        var source = arguments[index],\n            keys = keysFunc(source),\n            l = keys.length;\n        for (var i = 0; i < l; i++) {\n          var key = keys[i];\n          if (!defaults || obj[key] === void 0) obj[key] = source[key];\n        }\n      }\n      return obj;\n    };\n  };\n\n  // Extend a given object with all the properties in passed-in object(s).\n  _.extend = createAssigner(_.allKeys);\n\n  // Assigns a given object with all the own properties in the passed-in object(s).\n  // (https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object/assign)\n  _.extendOwn = _.assign = createAssigner(_.keys);\n\n  // Returns the first key on an object that passes a predicate test.\n  _.findKey = function(obj, predicate, context) {\n    predicate = cb(predicate, context);\n    var keys = _.keys(obj), key;\n    for (var i = 0, length = keys.length; i < length; i++) {\n      key = keys[i];\n      if (predicate(obj[key], key, obj)) return key;\n    }\n  };\n\n  // Internal pick helper function to determine if `obj` has key `key`.\n  var keyInObj = function(value, key, obj) {\n    return key in obj;\n  };\n\n  // Return a copy of the object only containing the whitelisted properties.\n  _.pick = restArguments(function(obj, keys) {\n    var result = {}, iteratee = keys[0];\n    if (obj == null) return result;\n    if (_.isFunction(iteratee)) {\n      if (keys.length > 1) iteratee = optimizeCb(iteratee, keys[1]);\n      keys = _.allKeys(obj);\n    } else {\n      iteratee = keyInObj;\n      keys = flatten(keys, false, false);\n      obj = Object(obj);\n    }\n    for (var i = 0, length = keys.length; i < length; i++) {\n      var key = keys[i];\n      var value = obj[key];\n      if (iteratee(value, key, obj)) result[key] = value;\n    }\n    return result;\n  });\n\n  // Return a copy of the object without the blacklisted properties.\n  _.omit = restArguments(function(obj, keys) {\n    var iteratee = keys[0], context;\n    if (_.isFunction(iteratee)) {\n      iteratee = _.negate(iteratee);\n      if (keys.length > 1) context = keys[1];\n    } else {\n      keys = _.map(flatten(keys, false, false), String);\n      iteratee = function(value, key) {\n        return !_.contains(keys, key);\n      };\n    }\n    return _.pick(obj, iteratee, context);\n  });\n\n  // Fill in a given object with default properties.\n  _.defaults = createAssigner(_.allKeys, true);\n\n  // Creates an object that inherits from the given prototype object.\n  // If additional properties are provided then they will be added to the\n  // created object.\n  _.create = function(prototype, props) {\n    var result = baseCreate(prototype);\n    if (props) _.extendOwn(result, props);\n    return result;\n  };\n\n  // Create a (shallow-cloned) duplicate of an object.\n  _.clone = function(obj) {\n    if (!_.isObject(obj)) return obj;\n    return _.isArray(obj) ? obj.slice() : _.extend({}, obj);\n  };\n\n  // Invokes interceptor with the obj, and then returns obj.\n  // The primary purpose of this method is to \"tap into\" a method chain, in\n  // order to perform operations on intermediate results within the chain.\n  _.tap = function(obj, interceptor) {\n    interceptor(obj);\n    return obj;\n  };\n\n  // Returns whether an object has a given set of `key:value` pairs.\n  _.isMatch = function(object, attrs) {\n    var keys = _.keys(attrs), length = keys.length;\n    if (object == null) return !length;\n    var obj = Object(object);\n    for (var i = 0; i < length; i++) {\n      var key = keys[i];\n      if (attrs[key] !== obj[key] || !(key in obj)) return false;\n    }\n    return true;\n  };\n\n\n  // Internal recursive comparison function for `isEqual`.\n  var eq, deepEq;\n  eq = function(a, b, aStack, bStack) {\n    // Identical objects are equal. `0 === -0`, but they aren't identical.\n    // See the [Harmony `egal` proposal](http://wiki.ecmascript.org/doku.php?id=harmony:egal).\n    if (a === b) return a !== 0 || 1 / a === 1 / b;\n    // `null` or `undefined` only equal to itself (strict comparison).\n    if (a == null || b == null) return false;\n    // `NaN`s are equivalent, but non-reflexive.\n    if (a !== a) return b !== b;\n    // Exhaust primitive checks\n    var type = typeof a;\n    if (type !== 'function' && type !== 'object' && typeof b != 'object') return false;\n    return deepEq(a, b, aStack, bStack);\n  };\n\n  // Internal recursive comparison function for `isEqual`.\n  deepEq = function(a, b, aStack, bStack) {\n    // Unwrap any wrapped objects.\n    if (a instanceof _) a = a._wrapped;\n    if (b instanceof _) b = b._wrapped;\n    // Compare `[[Class]]` names.\n    var className = toString.call(a);\n    if (className !== toString.call(b)) return false;\n    switch (className) {\n      // Strings, numbers, regular expressions, dates, and booleans are compared by value.\n      case '[object RegExp]':\n      // RegExps are coerced to strings for comparison (Note: '' + /a/i === '/a/i')\n      case '[object String]':\n        // Primitives and their corresponding object wrappers are equivalent; thus, `\"5\"` is\n        // equivalent to `new String(\"5\")`.\n        return '' + a === '' + b;\n      case '[object Number]':\n        // `NaN`s are equivalent, but non-reflexive.\n        // Object(NaN) is equivalent to NaN.\n        if (+a !== +a) return +b !== +b;\n        // An `egal` comparison is performed for other numeric values.\n        return +a === 0 ? 1 / +a === 1 / b : +a === +b;\n      case '[object Date]':\n      case '[object Boolean]':\n        // Coerce dates and booleans to numeric primitive values. Dates are compared by their\n        // millisecond representations. Note that invalid dates with millisecond representations\n        // of `NaN` are not equivalent.\n        return +a === +b;\n      case '[object Symbol]':\n        return SymbolProto.valueOf.call(a) === SymbolProto.valueOf.call(b);\n    }\n\n    var areArrays = className === '[object Array]';\n    if (!areArrays) {\n      if (typeof a != 'object' || typeof b != 'object') return false;\n\n      // Objects with different constructors are not equivalent, but `Object`s or `Array`s\n      // from different frames are.\n      var aCtor = a.constructor, bCtor = b.constructor;\n      if (aCtor !== bCtor && !(_.isFunction(aCtor) && aCtor instanceof aCtor &&\n                               _.isFunction(bCtor) && bCtor instanceof bCtor)\n                          && ('constructor' in a && 'constructor' in b)) {\n        return false;\n      }\n    }\n    // Assume equality for cyclic structures. The algorithm for detecting cyclic\n    // structures is adapted from ES 5.1 section 15.12.3, abstract operation `JO`.\n\n    // Initializing stack of traversed objects.\n    // It's done here since we only need them for objects and arrays comparison.\n    aStack = aStack || [];\n    bStack = bStack || [];\n    var length = aStack.length;\n    while (length--) {\n      // Linear search. Performance is inversely proportional to the number of\n      // unique nested structures.\n      if (aStack[length] === a) return bStack[length] === b;\n    }\n\n    // Add the first object to the stack of traversed objects.\n    aStack.push(a);\n    bStack.push(b);\n\n    // Recursively compare objects and arrays.\n    if (areArrays) {\n      // Compare array lengths to determine if a deep comparison is necessary.\n      length = a.length;\n      if (length !== b.length) return false;\n      // Deep compare the contents, ignoring non-numeric properties.\n      while (length--) {\n        if (!eq(a[length], b[length], aStack, bStack)) return false;\n      }\n    } else {\n      // Deep compare objects.\n      var keys = _.keys(a), key;\n      length = keys.length;\n      // Ensure that both objects contain the same number of properties before comparing deep equality.\n      if (_.keys(b).length !== length) return false;\n      while (length--) {\n        // Deep compare each member\n        key = keys[length];\n        if (!(has(b, key) && eq(a[key], b[key], aStack, bStack))) return false;\n      }\n    }\n    // Remove the first object from the stack of traversed objects.\n    aStack.pop();\n    bStack.pop();\n    return true;\n  };\n\n  // Perform a deep comparison to check if two objects are equal.\n  _.isEqual = function(a, b) {\n    return eq(a, b);\n  };\n\n  // Is a given array, string, or object empty?\n  // An \"empty\" object has no enumerable own-properties.\n  _.isEmpty = function(obj) {\n    if (obj == null) return true;\n    if (isArrayLike(obj) && (_.isArray(obj) || _.isString(obj) || _.isArguments(obj))) return obj.length === 0;\n    return _.keys(obj).length === 0;\n  };\n\n  // Is a given value a DOM element?\n  _.isElement = function(obj) {\n    return !!(obj && obj.nodeType === 1);\n  };\n\n  // Is a given value an array?\n  // Delegates to ECMA5's native Array.isArray\n  _.isArray = nativeIsArray || function(obj) {\n    return toString.call(obj) === '[object Array]';\n  };\n\n  // Is a given variable an object?\n  _.isObject = function(obj) {\n    var type = typeof obj;\n    return type === 'function' || type === 'object' && !!obj;\n  };\n\n  // Add some isType methods: isArguments, isFunction, isString, isNumber, isDate, isRegExp, isError, isMap, isWeakMap, isSet, isWeakSet.\n  _.each(['Arguments', 'Function', 'String', 'Number', 'Date', 'RegExp', 'Error', 'Symbol', 'Map', 'WeakMap', 'Set', 'WeakSet'], function(name) {\n    _['is' + name] = function(obj) {\n      return toString.call(obj) === '[object ' + name + ']';\n    };\n  });\n\n  // Define a fallback version of the method in browsers (ahem, IE < 9), where\n  // there isn't any inspectable \"Arguments\" type.\n  if (!_.isArguments(arguments)) {\n    _.isArguments = function(obj) {\n      return has(obj, 'callee');\n    };\n  }\n\n  // Optimize `isFunction` if appropriate. Work around some typeof bugs in old v8,\n  // IE 11 (#1621), Safari 8 (#1929), and PhantomJS (#2236).\n  var nodelist = root.document && root.document.childNodes;\n  if (typeof /./ != 'function' && typeof Int8Array != 'object' && typeof nodelist != 'function') {\n    _.isFunction = function(obj) {\n      return typeof obj == 'function' || false;\n    };\n  }\n\n  // Is a given object a finite number?\n  _.isFinite = function(obj) {\n    return !_.isSymbol(obj) && isFinite(obj) && !isNaN(parseFloat(obj));\n  };\n\n  // Is the given value `NaN`?\n  _.isNaN = function(obj) {\n    return _.isNumber(obj) && isNaN(obj);\n  };\n\n  // Is a given value a boolean?\n  _.isBoolean = function(obj) {\n    return obj === true || obj === false || toString.call(obj) === '[object Boolean]';\n  };\n\n  // Is a given value equal to null?\n  _.isNull = function(obj) {\n    return obj === null;\n  };\n\n  // Is a given variable undefined?\n  _.isUndefined = function(obj) {\n    return obj === void 0;\n  };\n\n  // Shortcut function for checking if an object has a given property directly\n  // on itself (in other words, not on a prototype).\n  _.has = function(obj, path) {\n    if (!_.isArray(path)) {\n      return has(obj, path);\n    }\n    var length = path.length;\n    for (var i = 0; i < length; i++) {\n      var key = path[i];\n      if (obj == null || !hasOwnProperty.call(obj, key)) {\n        return false;\n      }\n      obj = obj[key];\n    }\n    return !!length;\n  };\n\n  // Utility Functions\n  // -----------------\n\n  // Run Underscore.js in *noConflict* mode, returning the `_` variable to its\n  // previous owner. Returns a reference to the Underscore object.\n  _.noConflict = function() {\n    root._ = previousUnderscore;\n    return this;\n  };\n\n  // Keep the identity function around for default iteratees.\n  _.identity = function(value) {\n    return value;\n  };\n\n  // Predicate-generating functions. Often useful outside of Underscore.\n  _.constant = function(value) {\n    return function() {\n      return value;\n    };\n  };\n\n  _.noop = function(){};\n\n  // Creates a function that, when passed an object, will traverse that object’s\n  // properties down the given `path`, specified as an array of keys or indexes.\n  _.property = function(path) {\n    if (!_.isArray(path)) {\n      return shallowProperty(path);\n    }\n    return function(obj) {\n      return deepGet(obj, path);\n    };\n  };\n\n  // Generates a function for a given object that returns a given property.\n  _.propertyOf = function(obj) {\n    if (obj == null) {\n      return function(){};\n    }\n    return function(path) {\n      return !_.isArray(path) ? obj[path] : deepGet(obj, path);\n    };\n  };\n\n  // Returns a predicate for checking whether an object has a given set of\n  // `key:value` pairs.\n  _.matcher = _.matches = function(attrs) {\n    attrs = _.extendOwn({}, attrs);\n    return function(obj) {\n      return _.isMatch(obj, attrs);\n    };\n  };\n\n  // Run a function **n** times.\n  _.times = function(n, iteratee, context) {\n    var accum = Array(Math.max(0, n));\n    iteratee = optimizeCb(iteratee, context, 1);\n    for (var i = 0; i < n; i++) accum[i] = iteratee(i);\n    return accum;\n  };\n\n  // Return a random integer between min and max (inclusive).\n  _.random = function(min, max) {\n    if (max == null) {\n      max = min;\n      min = 0;\n    }\n    return min + Math.floor(Math.random() * (max - min + 1));\n  };\n\n  // A (possibly faster) way to get the current timestamp as an integer.\n  _.now = Date.now || function() {\n    return new Date().getTime();\n  };\n\n  // List of HTML entities for escaping.\n  var escapeMap = {\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;',\n    '\"': '&quot;',\n    \"'\": '&#x27;',\n    '`': '&#x60;'\n  };\n  var unescapeMap = _.invert(escapeMap);\n\n  // Functions for escaping and unescaping strings to/from HTML interpolation.\n  var createEscaper = function(map) {\n    var escaper = function(match) {\n      return map[match];\n    };\n    // Regexes for identifying a key that needs to be escaped.\n    var source = '(?:' + _.keys(map).join('|') + ')';\n    var testRegexp = RegExp(source);\n    var replaceRegexp = RegExp(source, 'g');\n    return function(string) {\n      string = string == null ? '' : '' + string;\n      return testRegexp.test(string) ? string.replace(replaceRegexp, escaper) : string;\n    };\n  };\n  _.escape = createEscaper(escapeMap);\n  _.unescape = createEscaper(unescapeMap);\n\n  // Traverses the children of `obj` along `path`. If a child is a function, it\n  // is invoked with its parent as context. Returns the value of the final\n  // child, or `fallback` if any child is undefined.\n  _.result = function(obj, path, fallback) {\n    if (!_.isArray(path)) path = [path];\n    var length = path.length;\n    if (!length) {\n      return _.isFunction(fallback) ? fallback.call(obj) : fallback;\n    }\n    for (var i = 0; i < length; i++) {\n      var prop = obj == null ? void 0 : obj[path[i]];\n      if (prop === void 0) {\n        prop = fallback;\n        i = length; // Ensure we don't continue iterating.\n      }\n      obj = _.isFunction(prop) ? prop.call(obj) : prop;\n    }\n    return obj;\n  };\n\n  // Generate a unique integer id (unique within the entire client session).\n  // Useful for temporary DOM ids.\n  var idCounter = 0;\n  _.uniqueId = function(prefix) {\n    var id = ++idCounter + '';\n    return prefix ? prefix + id : id;\n  };\n\n  // By default, Underscore uses ERB-style template delimiters, change the\n  // following template settings to use alternative delimiters.\n  _.templateSettings = {\n    evaluate: /<%([\\s\\S]+?)%>/g,\n    interpolate: /<%=([\\s\\S]+?)%>/g,\n    escape: /<%-([\\s\\S]+?)%>/g\n  };\n\n  // When customizing `templateSettings`, if you don't want to define an\n  // interpolation, evaluation or escaping regex, we need one that is\n  // guaranteed not to match.\n  var noMatch = /(.)^/;\n\n  // Certain characters need to be escaped so that they can be put into a\n  // string literal.\n  var escapes = {\n    \"'\": \"'\",\n    '\\\\': '\\\\',\n    '\\r': 'r',\n    '\\n': 'n',\n    '\\u2028': 'u2028',\n    '\\u2029': 'u2029'\n  };\n\n  var escapeRegExp = /\\\\|'|\\r|\\n|\\u2028|\\u2029/g;\n\n  var escapeChar = function(match) {\n    return '\\\\' + escapes[match];\n  };\n\n  // JavaScript micro-templating, similar to John Resig's implementation.\n  // Underscore templating handles arbitrary delimiters, preserves whitespace,\n  // and correctly escapes quotes within interpolated code.\n  // NB: `oldSettings` only exists for backwards compatibility.\n  _.template = function(text, settings, oldSettings) {\n    if (!settings && oldSettings) settings = oldSettings;\n    settings = _.defaults({}, settings, _.templateSettings);\n\n    // Combine delimiters into one regular expression via alternation.\n    var matcher = RegExp([\n      (settings.escape || noMatch).source,\n      (settings.interpolate || noMatch).source,\n      (settings.evaluate || noMatch).source\n    ].join('|') + '|$', 'g');\n\n    // Compile the template source, escaping string literals appropriately.\n    var index = 0;\n    var source = \"__p+='\";\n    text.replace(matcher, function(match, escape, interpolate, evaluate, offset) {\n      source += text.slice(index, offset).replace(escapeRegExp, escapeChar);\n      index = offset + match.length;\n\n      if (escape) {\n        source += \"'+\\n((__t=(\" + escape + \"))==null?'':_.escape(__t))+\\n'\";\n      } else if (interpolate) {\n        source += \"'+\\n((__t=(\" + interpolate + \"))==null?'':__t)+\\n'\";\n      } else if (evaluate) {\n        source += \"';\\n\" + evaluate + \"\\n__p+='\";\n      }\n\n      // Adobe VMs need the match returned to produce the correct offset.\n      return match;\n    });\n    source += \"';\\n\";\n\n    // If a variable is not specified, place data values in local scope.\n    if (!settings.variable) source = 'with(obj||{}){\\n' + source + '}\\n';\n\n    source = \"var __t,__p='',__j=Array.prototype.join,\" +\n      \"print=function(){__p+=__j.call(arguments,'');};\\n\" +\n      source + 'return __p;\\n';\n\n    var render;\n    try {\n      render = new Function(settings.variable || 'obj', '_', source);\n    } catch (e) {\n      e.source = source;\n      throw e;\n    }\n\n    var template = function(data) {\n      return render.call(this, data, _);\n    };\n\n    // Provide the compiled source as a convenience for precompilation.\n    var argument = settings.variable || 'obj';\n    template.source = 'function(' + argument + '){\\n' + source + '}';\n\n    return template;\n  };\n\n  // Add a \"chain\" function. Start chaining a wrapped Underscore object.\n  _.chain = function(obj) {\n    var instance = _(obj);\n    instance._chain = true;\n    return instance;\n  };\n\n  // OOP\n  // ---------------\n  // If Underscore is called as a function, it returns a wrapped object that\n  // can be used OO-style. This wrapper holds altered versions of all the\n  // underscore functions. Wrapped objects may be chained.\n\n  // Helper function to continue chaining intermediate results.\n  var chainResult = function(instance, obj) {\n    return instance._chain ? _(obj).chain() : obj;\n  };\n\n  // Add your own custom functions to the Underscore object.\n  _.mixin = function(obj) {\n    _.each(_.functions(obj), function(name) {\n      var func = _[name] = obj[name];\n      _.prototype[name] = function() {\n        var args = [this._wrapped];\n        push.apply(args, arguments);\n        return chainResult(this, func.apply(_, args));\n      };\n    });\n    return _;\n  };\n\n  // Add all of the Underscore functions to the wrapper object.\n  _.mixin(_);\n\n  // Add all mutator Array functions to the wrapper.\n  _.each(['pop', 'push', 'reverse', 'shift', 'sort', 'splice', 'unshift'], function(name) {\n    var method = ArrayProto[name];\n    _.prototype[name] = function() {\n      var obj = this._wrapped;\n      method.apply(obj, arguments);\n      if ((name === 'shift' || name === 'splice') && obj.length === 0) delete obj[0];\n      return chainResult(this, obj);\n    };\n  });\n\n  // Add all accessor Array functions to the wrapper.\n  _.each(['concat', 'join', 'slice'], function(name) {\n    var method = ArrayProto[name];\n    _.prototype[name] = function() {\n      return chainResult(this, method.apply(this._wrapped, arguments));\n    };\n  });\n\n  // Extracts the result from a wrapped and chained object.\n  _.prototype.value = function() {\n    return this._wrapped;\n  };\n\n  // Provide unwrapping proxy for some methods used in engine operations\n  // such as arithmetic and JSON stringification.\n  _.prototype.valueOf = _.prototype.toJSON = _.prototype.value;\n\n  _.prototype.toString = function() {\n    return String(this._wrapped);\n  };\n\n  // AMD registration happens at the end for compatibility with AMD loaders\n  // that may not enforce next-turn semantics on modules. Even though general\n  // practice for AMD registration is to be anonymous, underscore registers\n  // as a named module because, like jQuery, it is a base library that is\n  // popular enough to be bundled in a third party lib, but not be part of\n  // an AMD load request. Those cases could generate an error when an\n  // anonymous define() is called outside of a loader request.\n  if (typeof define == 'function' && define.amd) {\n    define('underscore', [], function() {\n      return _;\n    });\n  }\n}());\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}